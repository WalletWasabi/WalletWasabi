using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Linq;
using WalletWasabi.Fluent.Generators;
using Xunit;

namespace WalletWasabi.Tests.UnitTests.Fluent.Generators;

/// <summary>
/// Tests for <see cref="OapthGenerator"/>.
/// </summary>
/// <seealso href="https://github.com/dotnet/roslyn/blob/master/docs/features/source-generators.cookbook.md#unit-testing-of-generators"/>
public class OapthGeneratorTests
{
	[Fact]
	public void SimpleGeneratorTest()
	{
		// Input for our generator.
		Compilation inputCompilation = CompilationHelpers.CreateCompilation(@"
namespace WalletWasabi.Fluent.ViewModels
{
	public class TestViewModel3
	{
		[Oaph(PropertyName = ""TestName"")] private readonly ObservableAsPropertyHelper<bool> _prop1;
		[Oaph] private readonly ObservableAsPropertyHelper<bool?> _prop2;
		[Oaph] private readonly ObservableAsPropertyHelper<bool> _prop3;
	}
}
");

		OapthGenerator generator = new();
		GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);

		// Run the generation pass
		driver = driver.RunGeneratorsAndUpdateCompilation(inputCompilation, out var outputCompilation, out var diagnostics);

		Assert.True(diagnostics.IsEmpty);
		Assert.Equal(3, outputCompilation.SyntaxTrees.Count());

		GeneratorDriverRunResult runResult = driver.GetRunResult();
		Assert.Equal(2, runResult.GeneratedTrees.Length);
		Assert.True(runResult.Diagnostics.IsEmpty);

		GeneratorRunResult generatorResult = runResult.Results[0];
		Assert.True(generatorResult.Exception is null);
		Assert.Equal(generatorResult.Generator, generator);
		Assert.True(generatorResult.Diagnostics.IsEmpty);
		Assert.Equal(2, generatorResult.GeneratedSources.Length);

		string expectedGeneratedSourceCode = @"
// <auto-generated />
#nullable enable
using ReactiveUI;

namespace WalletWasabi.Fluent.ViewModels
{
    public partial class TestViewModel3 : ReactiveUI.ReactiveObject
    {
        public bool TestName => _prop1.Value;
        public bool? Prop2 => _prop2.Value;
        public bool Prop3 => _prop3.Value;
    }
}".Trim();

		Assert.Equal(expectedGeneratedSourceCode, generatorResult.GeneratedSources[1].SourceText.ToString());
	}
}

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Kinect</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Kinect.ColorImageFrame">
            <summary>
            A frame used specifically for color images.
            It provides access to the dimensions, format and pixel data for a color frame.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ImageFrame">
            <summary>
            A container for per-frame sensor data buffers.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageFrame._isDisposed">
            <summary>
            Tracks whether this instance is disposed.  0 == false, 1 == true.
            We need to use int (vs. bool) for Interlocked.Exchange.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageFrame.#ctor(Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags)">
            <summary>
            Initializes a new instance of the ImageFrame class that represents this frame's data.
            </summary>
            <param name="imageType">The ImageType for this frame.</param>
            <param name="imageResolution">The ImageResolution for this frame.</param>
            <param name="frameNumber">The frame number of this frame.</param>
            <param name="timestamp">The timestamp of this frame.</param>
            <param name="frameFlags">The frame flags of this frame.</param>
        </member>
        <member name="M:Microsoft.Kinect.ImageFrame.Dispose">
            <summary>
            Disposes the image frame.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageFrame.Finalize">
            <summary>
            Finalizes an instance of the ImageFrame class.
            This is used to notify the developer that they forgot to dispose the frame.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageFrame.Dispose(System.Boolean)">
            <summary>
            To be implemented by derived classes to return data to free lists.
            </summary>
            <param name="disposing">Specify true to indicate that the class should clean up all resources.</param>
        </member>
        <member name="P:Microsoft.Kinect.ImageFrame.Timestamp">
            <summary>
            Gets the time of this ImageFrame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageFrame.FrameNumber">
            <summary>
            Gets the frame identification.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageFrame.Width">
            <summary>
            Gets the width in pixels of this ImageFrame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageFrame.Height">
            <summary>
            Gets the height in pixels of this ImageFrame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageFrame.BytesPerPixel">
            <summary>
            Gets the bytes per pixel of this ImageFrame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageFrame.PixelDataLength">
            <summary>
            Gets the total length of the pixel data buffer of this ImageFrame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageFrame.SourceStream">
            <summary>
            Gets the frame's source stream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageFrame.FrameFlags">
            <summary>
            Gets the frame's flags.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFrame._colorImageStream">
            <summary>
            The underlying stream object.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFrame._frameData">
            <summary>
            The related frame data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFrame._dataAccessLock">
            <summary>
            The lock object used to synchronize access as necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrame.#ctor(Microsoft.Kinect.ColorImageStream,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags,Microsoft.Kinect.DataPool{System.Int32,Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution,System.Byte[],System.Nullable{System.Boolean}}.Entry)">
            <summary>
            Initializes a new instance of the ColorImageFrame class.
            </summary>
            <param name="colorImageStream">The underlying stream object.</param>
            <param name="frameNumber">The current frame number.</param>
            <param name="timestamp">The timestamp of the frame.</param>
            <param name="frameFlags">The frame flags.</param>
            <param name="pixelData">The actual pixel data.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrame.Create(Microsoft.Kinect.ColorImageStream,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags)">
            <summary>
            Construct a ColorImageFrame for the frameNumber provided, if possible.
            If the data is not available for the specified frameNumber, this returns null.
            If this method succeeds, the result must be disposed.
            </summary>
            <param name="colorImageStream">The associated ColorImageStream.</param>
            <param name="frameNumber">The frameNumber to retrieve.</param>
            <param name="timestamp">The timestamp of the frame to retrieve.</param>
            <param name="frameFlags">The frame flags of the frame.</param>
            <returns>Null upon failure, a ColorImageStream upon success, which must be Disposed.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrame.GetRawPixelData">
            <summary>
            This method provides the raw array that contains the color frame's pixel data.
            </summary>
            <returns>A byte array of the color frame's pixel data.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrame.CopyPixelDataTo(System.Byte[])">
            <summary>
            This method copies the frame's pixel data to a pre-allocated byte array.
            </summary>
            <param name="pixelData">The byte array to receive the data.
            It must be exactly PixelDataLength in length.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrame.CopyPixelDataTo(System.IntPtr,System.Int32)">
            <summary>
            This method copies the frame's pixel data to a pre-allocated byte array.
            </summary>
            <param name="pixelData">The IntPtr of the byte array.</param>
            <param name="pixelDataLength">The count of Bytes to copy to pixelData.  This must be equal to the frameâ€™s PixelDataLength.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrame.Dispose(System.Boolean)">
            <summary>
            Disposes the frame object.
            </summary>
            <param name="disposing">Specify true to indicate that the class should clean up all resources.</param>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageFrame.Format">
            <summary>
            Gets this frame's Framerate and Resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageFrame.PixelDataLength">
            <summary>
            Gets the total length of the pixel data buffer of this ImageFrame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageFrame.SourceStream">
            <summary>
            The frame's source stream.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.CoordinateMapper">
            <summary>
            Maps between Skeleton, Depth, and Color space for a KinectSensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.CoordinateMapper._coordinateMapper">
            <summary>
            Privately held reference to the KinectSensor for performing mapping operations.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Initializes a new instance of the CoordinateMapper class from the given parameters.
            </summary>
            <param name="parameters">Binary parameters.</param>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.CoordinateMapper_RelationalParametersChanged(System.Object,System.EventArgs)">
            <summary>
            Method to handle RelationalParametersChanged event.  Re-fires to INPC.
            </summary>
            <param name="sender">The object that sent the event.</param>
            <param name="e">Generic event parameters.</param>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.#ctor(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initializes a new instance of the CoordinateMapper class.
            </summary>
            <param name="sensor">The KinectSensor to perform mappings for.</param>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.ManagedNuiTransformDepthImageToSkeleton(System.Single,System.Single,System.Int32)">
            <summary>
            Based off the function NuiTransformDepthImageToSkeleton from NuiSkeleton.h, which is inline
            so it is neither directly possible nor is it performant to p-invoke it from managed.
            </summary>
            <param name="fDepthX">X coordinate from the depth image.</param>
            <param name="fDepthY">Y coordinate from the depth image.</param>
            <param name="depthPixelDatum">Depth value from the depth image.</param>
            <returns>A Vector indicating the point on the skeleton corresponding to the depth pixel.</returns>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.ManagedNuiTransformSkeletonToDepthImage(Microsoft.Kinect.Interop._Vector4,System.Single@,System.Single@,System.Single@)">
            <summary>
            Based off the function NuiTransformSkeletonToDepthImage from NuiSkeleton.h, which is inline
            so it is neither directly possible nor is it performant to p-invoke it from managed.
            </summary>
            <param name="vPoint">Vector from skeleton to transform.</param>
            <param name="pfDepthX">Resulting X coordinate for skeleton point.</param>
            <param name="pfDepthY">Resulting Y coordinate for skeleton point.</param>
            <param name="pfDepthValue">Resulting depth value for skeleton point.</param>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.ImageTypeFromColorImageFormat(Microsoft.Kinect.ColorImageFormat)">
            <summary>
            Extracts the ImageType from the ColorImageFormat.
            </summary>
            <param name="colorImageFormat">The ColorImageFormat to convert.</param>
            <returns>The converted ImageType.</returns>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.MapColorFrameToDepthFrame(Microsoft.Kinect.ColorImageFormat,Microsoft.Kinect.DepthImageFormat,Microsoft.Kinect.DepthImagePixel[],Microsoft.Kinect.DepthImagePoint[])">
            <summary>
            Maps the entire color frame to depth space. Each element will be the result
            of mapping the corresponding color pixel into the specified depth frame. 
            Will be equal in length to the number of color pixels. Any color pixel 
            without a corresponding depth pixel will result in a sentinel value. The resulting
            depth points can be tested by calling KinectSensor.IsKnownPoint().
            </summary>
            <param name="colorImageFormat">The desired target image format.</param>
            <param name="depthImageFormat">The depth format of the source.</param>
            <param name="depthPixels">
            The depth frame pixel data as retrieved from DepthImageFrame.CopyPixelDataTo.
            Must be equal in length to Width*Height of the depth format specified by depthImageFormat.
            </param>
            <param name="depthPoints">
            The DepthImagePoint array to receive the data. Must be equal in length to
            Width*Height of the color format specified by colorImageFormat.
            </param>
            <remarks>
            <para>Because depth image data and color image data come from separate sensors, pixels in the
            two images may not always line up exactly. The two sensors may have different fields of view,
            or may not be aimed precisely in the same direction. This means that a point near the edge of
            the depth image may correspond to a pixel just beyond the edge of the color image, or vice
            versa.</para>
            <para>This function accepts coordinates outside the bounds of the depth image. It may return
            pixels outside the color image. This means that you can use data from the two images in
            combination, even when the two images do not line up completely. You must verify that the
            coordinates that are returned lie within the color image before using the coordinates to
            reference pixels in that color image.</para>
            <para>The depth image coordinates you specify are not required to be within the bounds of the
            depth frame image, but they should not be too far outside the depth frame image bounds. If the
            coordinates are far outside the depth frame image, they are unlikely to map to coordinates
            inside the bounds of the color image. This function will then return color image coordinates
            that are unlikely to be useful.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.MapColorFrameToSkeletonFrame(Microsoft.Kinect.ColorImageFormat,Microsoft.Kinect.DepthImageFormat,Microsoft.Kinect.DepthImagePixel[],Microsoft.Kinect.SkeletonPoint[])">
            <summary>
            Maps the entire color frame to skeleton space. Each element will be the result of
            mapping the corresponding color pixel into the specified depth frame and then into
            skeleton space. Will be equal in length to the number of color pixels. Any color
            pixel without a corresponding depth pixel will result in a sentinel value. The resulting
            skeleton points can be tested by calling KinectSensor.IsKnownPoint().
            </summary>
            <param name="colorImageFormat">The desired target image format.</param>
            <param name="depthImageFormat">The depth format of the source.</param>
            <param name="depthPixels">
            The depth frame pixel data, as retrieved from DepthImageFrame.CopyPixelDataTo.
            Must be equal in length to Width*Height of the depth format specified by depthImageFormat.
            </param>
            <param name="skeletonPoints">
            The SkeletonPoint array to receive the data. Must be equal in length to Width*Height
            of the color format specified by colorImageFormat.
            </param>
            <remarks>
            <para>Because depth image data and color image data come from separate sensors, pixels in the
            two images may not always line up exactly. The two sensors may have different fields of view,
            or may not be aimed precisely in the same direction. This means that a point near the edge of
            the depth image may correspond to a pixel just beyond the edge of the color image, or vice
            versa.</para>
            <para>This function accepts coordinates outside the bounds of the depth image. It may return
            pixels outside the color image. This means that you can use data from the two images in
            combination, even when the two images do not line up completely. You must verify that the
            coordinates that are returned lie within the color image before using the coordinates to
            reference pixels in that color image.</para>
            <para>The depth image coordinates you specify are not required to be within the bounds of the
            depth frame image, but they should not be too far outside the depth frame image bounds. If the
            coordinates are far outside the depth frame image, they are unlikely to map to coordinates
            inside the bounds of the color image. This function will then return color image coordinates
            that are unlikely to be useful.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.MapDepthFrameToColorFrame(Microsoft.Kinect.DepthImageFormat,Microsoft.Kinect.DepthImagePixel[],Microsoft.Kinect.ColorImageFormat,Microsoft.Kinect.ColorImagePoint[])">
            <summary>
            Maps the entire depth frame to color space.  Each element will be the result of
            mapping the corresponding DepthImagePixel into color space.  Will be equal in length
            to the number of DepthImagePixels. Any DepthImagePixel without a corresponding
            color pixel will result in a sentinel value. The resulting ColorImagePoints can
            be tested by calling KinectSensor.IsKnownPoint().
            </summary>
            <param name="depthImageFormat">The depth format of the source.</param>
            <param name="depthPixels">
            The depth frame pixel data, as retrieved from DepthImageFrame.CopyPixelDataTo.
            Must be equal in length to Width*Height of the depth format specified by depthImageFormat.
            </param>        
            <param name="colorImageFormat">The desired target image format.</param>
            <param name="colorPoints">
            The ColorImagePoint array to receive the data.  Must be equal in length to Width*Height
            of the depth format specified by depthImageFormat.
            </param>
            <remarks>
            <para>Because depth image data and color image data come from separate sensors, pixels in the
            two images may not always line up exactly. The two sensors may have different fields of view,
            or may not be aimed precisely in the same direction. This means that a point near the edge of
            the depth image may correspond to a pixel just beyond the edge of the color image, or vice
            versa.</para>
            <para>This function accepts coordinates outside the bounds of the depth image. It may return
            pixels outside the color image. This means that you can use data from the two images in
            combination, even when the two images do not line up completely. You must verify that the
            coordinates that are returned lie within the color image before using the coordinates to
            reference pixels in that color image.</para>
            <para>The depth image coordinates you specify are not required to be within the bounds of the
            depth frame image, but they should not be too far outside the depth frame image bounds. If the
            coordinates are far outside the depth frame image, they are unlikely to map to coordinates
            inside the bounds of the color image. This function will then return color image coordinates
            that are unlikely to be useful.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.MapDepthFrameToSkeletonFrame(Microsoft.Kinect.DepthImageFormat,Microsoft.Kinect.DepthImagePixel[],Microsoft.Kinect.SkeletonPoint[])">
            <summary>
            Maps the entire depth frame to skeleton space. Each element will be the result of mapping
            the corresponding DepthImagePixel from the specified depth frame into skeleton space. Will be
            equal in length to the number of depth pixels. Any depth pixel without corresponding skeleton
            point will result in a sentinel value.  The resulting SkeletonPoints can be tested by calling
            KinectSensor.IsKnownPoint().
            </summary>
            <param name="depthImageFormat">The depth format of the source.</param>
            <param name="depthPixels">
            The depth frame pixel data, as retrieved from DepthImageFrame.CopyPixelDataTo.
            Must be equal in length to Width*Height of the depth format specified by depthImageFormat.
            </param>
            <param name="skeletonPoints">
            The SkeletonPoint array to receive the data. Must be equal in length to Width*Height of the
            depth format specified by depthImageFormat.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.MapDepthPointToColorPoint(Microsoft.Kinect.DepthImageFormat,Microsoft.Kinect.DepthImagePoint,Microsoft.Kinect.ColorImageFormat)">
            <summary>
            Maps from a DepthImagePoint to the corresponding ColorImagePoint.
            </summary>
            <param name="depthImageFormat">The depth format of the source.</param>
            <param name="depthPoint">The depth point to map.</param>
            <param name="colorImageFormat">The desired target image format.</param>
            <returns>The ColorImagePoint corresponding to the point in DepthImage space.</returns>
            <remarks>
            <para>Because depth image data and color image data come from separate sensors, pixels in the
            two images may not always line up exactly. The two sensors may have different fields of view,
            or may not be aimed precisely in the same direction. This means that a point near the edge of
            the depth image may correspond to a pixel just beyond the edge of the color image, or vice
            versa.</para>
            <para>This function accepts coordinates outside the bounds of the depth image. It may return
            pixels outside the color image. This means that you can use data from the two images in
            combination, even when the two images do not line up completely. You must verify that the
            coordinates that are returned lie within the color image before using the coordinates to
            reference pixels in that color image.</para>
            <para>The depth image coordinates you specify are not required to be within the bounds of the
            depth frame image, but they should not be too far outside the depth frame image bounds. If the
            coordinates are far outside the depth frame image, they are unlikely to map to coordinates
            inside the bounds of the color image. This function will then return color image coordinates
            that are unlikely to be useful.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.MapDepthPointToSkeletonPoint(Microsoft.Kinect.DepthImageFormat,Microsoft.Kinect.DepthImagePoint)">
            <summary>
            Maps from a DepthImagePoint to the corresponding SkeletonPoint.
            </summary>
            <param name="depthImageFormat">The the depth format to use in the conversion.</param>
            <param name="depthImagePoint">The depth image point for the depth frame.</param>
            <returns>The skeleton point for the given DepthImagePoint and format.</returns>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.MapSkeletonPointToColorPoint(Microsoft.Kinect.SkeletonPoint,Microsoft.Kinect.ColorImageFormat)">
            <summary>
            Maps from a SkeletonPoint to the corresponding ColorImagePoint.
            </summary>
            <param name="skeletonPoint">The SkeletonPoint to map.</param>
            <param name="colorImageFormat">The desired target image format.</param>
            <returns>The ColorImagePoint for the given skeleton point and format.</returns>
            <remarks>
            <para>Because depth image data and color image data come from separate sensors, pixels in the
            two images may not always line up exactly. The two sensors may have different fields of view,
            or may not be aimed precisely in the same direction. This means that a point near the edge of
            the depth image may correspond to a pixel just beyond the edge of the color image, or vice
            versa.</para>
            <para>This function accepts coordinates outside the bounds of the depth image. It may return
            pixels outside the color image. This means that you can use data from the two images in
            combination, even when the two images do not line up completely. You must verify that the
            coordinates that are returned lie within the color image before using the coordinates to
            reference pixels in that color image.</para>
            <para>The depth image coordinates you specify are not required to be within the bounds of the
            depth frame image, but they should not be too far outside the depth frame image bounds. If the
            coordinates are far outside the depth frame image, they are unlikely to map to coordinates
            inside the bounds of the color image. This function will then return color image coordinates
            that are unlikely to be useful.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.CoordinateMapper.MapSkeletonPointToDepthPoint(Microsoft.Kinect.SkeletonPoint,Microsoft.Kinect.DepthImageFormat)">
            <summary>
            Maps from a SkeletonPoint to the corresponding DepthImagePoint.
            </summary>
            <param name="skeletonPoint">The supplied skeleton point.</param>
            <param name="depthImageFormat">The depth format to convert to.</param>
            <returns>The DepthImagePoint for the given skeleton point.</returns>
        </member>
        <member name="P:Microsoft.Kinect.CoordinateMapper.ColorToDepthRelationalParameters">
            <summary>
            Gets the binary paramters associated with this instance of CoordinateMapper.
            </summary>
            <returns>Binary parameters.</returns>
        </member>
        <member name="E:Microsoft.Kinect.CoordinateMapper.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.BacklightCompensationMode">
            <summary>
            This enum has all of the available backlight compensation modes.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BacklightCompensationMode.AverageBrightness">
            <summary>
            Favors the average brightness.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BacklightCompensationMode.CenterPriority">
            <summary>
            Favors the center of the scene.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BacklightCompensationMode.LowlightsPriority">
            <summary>
            Favors lowlights.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BacklightCompensationMode.CenterOnly">
            <summary>
            Favors the center only.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.PowerLineFrequency">
            <summary>
            This allows for flicker reduction due to power line frequency.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.PowerLineFrequency.Disabled">
            <summary>
            Disables flicker reduction.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.PowerLineFrequency.FiftyHertz">
            <summary>
            Used for power line frequencies of 50 hertz.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.PowerLineFrequency.SixtyHertz">
            <summary>
            Used for power line frequencies of 60 hertz.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ColorCameraSettings">
            <summary>
            This class contains all of the available color camera settings.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorCameraSettings._colorCameraSettings">
            <summary>
            This holds a reference to the associated sensor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ColorCameraSettings.#ctor(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initializes a new instance of the ColorCameraSettings class.
            </summary>
            <param name="mainNui">The sensor these settings relate to.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorCameraSettings.ResetToDefault">
            <summary>
            Resets all color camera settings to their defaults.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ColorCameraSettings.CheckAndTriggerIfChanged(System.Double,System.Double,System.String)">
            <summary>
            This triggers the NotifyPropertyChanged if the value is different.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorCameraSettings.CheckAndTriggerIfChanged(System.Boolean,System.Boolean,System.String)">
            <summary>
            This triggers the NotifyPropertyChanged if the value is different.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorCameraSettings.CheckAndTriggerIfChanged(Microsoft.Kinect.PowerLineFrequency,Microsoft.Kinect.PowerLineFrequency,System.String)">
            <summary>
            This triggers the NotifyPropertyChanged if the value is different.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorCameraSettings.CheckAndTriggerIfChanged(Microsoft.Kinect.BacklightCompensationMode,Microsoft.Kinect.BacklightCompensationMode,System.String)">
            <summary>
            This triggers the NotifyPropertyChanged if the value is different.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorCameraSettings.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies the client of property changes.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.AutoExposure">
            <summary>
            Gets or sets a value indicating whether the auto exposure is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.ExposureTime">
            <summary>
            Gets or sets a value for the exposure time.
            </summary>
            <remarks>This property takes effect only when AutoExposure is false.</remarks>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinExposureTime">
            <summary>
            Gets the minimum exposure time.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxExposureTime">
            <summary>
            Gets the maximum exposure time.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.FrameInterval">
            <summary>
            Gets or sets a value for the frame interval.
            </summary>
            <remarks>This property takes effect only when AutoExposure is false.</remarks>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinFrameInterval">
            <summary>
            Gets the minimum frame interval.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxFrameInterval">
            <summary>
            Gets the maximum frame interval.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.Brightness">
            <summary>
            Gets or sets a value for the brightness.
            </summary>
            <remarks>This property takes effect only when AutoExposure is true.</remarks>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinBrightness">
            <summary>
            Gets the minimum brightness.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxBrightness">
            <summary>
            Gets the maximum brightness.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.BacklightCompensationMode">
            <summary>
            Gets or sets the desired backlight compensation mode.
            </summary>
            <remarks>This property takes effect only when AutoExposure is true.</remarks>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.PowerLineFrequency">
            <summary>
            Gets or sets the desired power line frequency.
            </summary>
            <remarks>This property takes effect only when AutoExposure is true.</remarks>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.Gain">
            <summary>
            Gets or sets a value for the gain.
            </summary>
            <remarks>This property takes effect only when AutoExposure is false.</remarks>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinGain">
            <summary>
            Gets the minimum gain.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxGain">
            <summary>
            Gets the maximum gain.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.AutoWhiteBalance">
            <summary>
            Gets or sets a value indicating whether the white balance is automatic or not.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.WhiteBalance">
            <summary>
            Gets or sets a value for the white balance.
            </summary>
            <remarks>This property takes effect only when AutoWhiteBalance is false.</remarks>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinWhiteBalance">
            <summary>
            Gets the minimum white balance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxWhiteBalance">
            <summary>
            Gets the maximum white balance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.Contrast">
            <summary>
            Gets or sets a value for the white balance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinContrast">
            <summary>
            Gets the minimum white balance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxContrast">
            <summary>
            Gets the maximum white balance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.Hue">
            <summary>
            Gets or sets a value for the white balance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinHue">
            <summary>
            Gets the minimum hue.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxHue">
            <summary>
            Gets the maximum hue.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.Saturation">
            <summary>
            Gets or sets a value for the saturation.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinSaturation">
            <summary>
            Gets the minimum saturation.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxSaturation">
            <summary>
            Gets the maximum saturation.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.Gamma">
            <summary>
            Gets or sets a value for the gamma.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinGamma">
            <summary>
            Gets the minimum gamma.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxGamma">
            <summary>
            Gets the maximum gamma.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.Sharpness">
            <summary>
            Gets or sets a value for the sharpness.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MinSharpness">
            <summary>
            Gets the minimum sharpness.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorCameraSettings.MaxSharpness">
            <summary>
            Gets the maximum sharpness.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.ColorCameraSettings.PropertyChanged">
            <summary>
            This event triggers when a related property changes.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DataPool`4">
            <summary>
            The generic DataPool class for a key with three values.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="V1">The first value type.</typeparam>
            <typeparam name="V2">The second value type.</typeparam>
            <typeparam name="V3">The third value type.</typeparam>
        </member>
        <member name="T:Microsoft.Kinect.DataPool`5">
            <summary>
            The generic DataPool class for a key with four values.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="V1">The first value type.</typeparam>
            <typeparam name="V2">The second value type.</typeparam>
            <typeparam name="V3">The third value type.</typeparam>
            <typeparam name="V4">The fourth value type.</typeparam>
        </member>
        <member name="F:Microsoft.Kinect.DataPool`5._dataPool">
            <summary>
            The array of private entries.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DataPool`5._nextPoolEntry">
            <summary>
            The next available entry.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DataPool`5._dataPoolLock">
            <summary>
            The lock object used to synchronize access.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DataPool`5.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DataPool class.
            </summary>
            <param name="length">The number of pool entries to manage.</param>
        </member>
        <member name="M:Microsoft.Kinect.DataPool`5.CheckOutFreeEntryForUpdate">
            <summary>
            Returns a free entry, allocating if necessary.
            Must be checked in via CheckInEntryForUpdate.
            </summary>
            <returns>A new Entry to be updated and checked in via CheckInEntryForUpdate.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DataPool`5.CheckInEntryForUpdate(Microsoft.Kinect.DataPool{`0,`1,`2,`3,`4}.Entry)">
            <summary>
            Marks an entry as fully updated, ready to be retrieved via TryLockEntry.
            </summary>
            <param name="entry">
              The entry that is done being updated, as retrived from CHeckOutFreeEntryForUpdate.
              The Key may not be null.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.DataPool`5.TryLockEntry(`0,Microsoft.Kinect.DataPool{`0,`1,`2,`3,`4}.Entry@)">
            <summary>
            Attempt to find and lock an entry given the provided Key.  If successful, must be unlocked
            via UnlockEntry.
            </summary>
            <param name="key">The Key to use to look up an entry.  Cannot be null.</param>
            <param name="entry">The entry if found, null otherwise.</param>
            <returns>True if a matching entry is found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DataPool`5.UnlockEntry(Microsoft.Kinect.DataPool{`0,`1,`2,`3,`4}.Entry)">
            <summary>
            Unlocks an entry retrieved via TryLockEntry.  Must be an Entry retrieved from this DataPool instance.
            </summary>
            <param name="entry">The entry to unlock.</param>
        </member>
        <member name="T:Microsoft.Kinect.DataPool`5.Entry">
            <summary>
            A basic Key/Value pair.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DataPool`5.Entry.Key">
            <summary>
            Gets or sets the key of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DataPool`5.Entry.Value1">
            <summary>
            Gets or sets the first value.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DataPool`5.Entry.Value2">
            <summary>
            Gets or sets the second value.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DataPool`5.Entry.Value3">
            <summary>
            Gets or sets the third value.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DataPool`5.Entry.Value4">
            <summary>
            Gets or sets the fourth value.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DataPool`5.EntryPrivate">
            <summary>
            Private subclass of Entry, used for additional bookkeping.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DataPool`5.EntryPrivate._refCount">
            <summary>
            The current reference count.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DataPool`5.EntryPrivate.AddRef">
            <summary>
            Adds a reference count to the entry.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DataPool`5.EntryPrivate.Release">
            <summary>
            Releases a reference count from the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DataPool`5.EntryPrivate.IsLocked">
            <summary>
            Gets a value indicating whether the object is locked or not.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DataPool`5.EntryPrivate.IsInPool">
            <summary>
            Gets or sets a value indicating whether the object is in a pool.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DataPool`5.EntryPrivate.IsValid">
            <summary>
            Gets or sets a value indicating whether the object is valid.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DataPool`4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the DataPool class.
            </summary>
            <param name="length">The number of pool entries to manage.</param>
        </member>
        <member name="T:Microsoft.Kinect.DepthImagePixel">
            <summary>
            A structure representing a pixel in a DepthImageFrame.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImagePixel._UnknownDepth">
            <summary>
            The value for an unknown depth.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePixel.GetHashCode">
            <summary>
            This gets the hash code for a given depth image pixel.
            </summary>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePixel.Equals(System.Object)">
            <summary>
            This method compares two depth image pixel objects.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePixel.Equals(Microsoft.Kinect.DepthImagePixel)">
            <summary>
            This method compares two depth image pixel objects.
            </summary>
            <param name="pixel">The DepthImagePixel to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePixel.op_Equality(Microsoft.Kinect.DepthImagePixel,Microsoft.Kinect.DepthImagePixel)">
            <summary>
            This method compares two depth image pixel objects.
            </summary>
            <param name="pixel1">The first DepthImagePixel to compare.</param>
            <param name="pixel2">The second DepthImagePixel to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePixel.op_Inequality(Microsoft.Kinect.DepthImagePixel,Microsoft.Kinect.DepthImagePixel)">
            <summary>
            This method compares two depth image pixel objects.
            </summary>
            <param name="pixel1">The first DepthImagePixel to compare.</param>
            <param name="pixel2">The second DepthImagePixel to compare.</param>
            <returns>It returns true if they are not equal and false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.DepthImagePixel.PlayerIndex">
            <summary>
            Gets or sets the player index for the pixel.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImagePixel.Depth">
            <summary>
            Gets or sets the depth (in millimeters) for the pixel.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImagePixel.IsKnownDepth">
            <summary>
            Gets a value indicating whether the Depth value is a known value.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DepthImageFrame">
            <summary>
            A frame used specifically for depth images.  
            It provides access to the dimensions, format and pixel data for a depth frame,
            and allows for mapping of coordinates between skeleton frames and color frames.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrame.PlayerIndexBitmask">
            <summary>
            A bitmask for extracting the player index bit field from the depth value.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrame.PlayerIndexBitmaskWidth">
            <summary>
            The width of the player index bitmask.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrame._depthImageStream">
            <summary>
            The underlying depth image stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrame._frameData">
            <summary>
            The underlying depth frame data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrame._dataAccessLock">
            <summary>
            The lock object used to synchronize access as necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.#ctor(Microsoft.Kinect.DepthImageStream,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags,Microsoft.Kinect.DataPool{System.Int32,Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution,System.Int16[],Microsoft.Kinect.DepthImagePixel[]}.Entry)">
            <summary>
            Initializes a new instance of the DepthImageFrame class.
            </summary>
            <param name="depthImageStream">The related depth stream.</param>
            <param name="frameNumber">The current frame number.</param>
            <param name="timestamp">The current timestamp.</param>
            <param name="frameFlags">The current frame flags.</param>
            <param name="pixelData">The pixel data.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.Create(Microsoft.Kinect.DepthImageStream,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags)">
            <summary>
            Construct a DepthImageFrame for the frameNumber provided, if possible.
            If the data is not available for the specified frameNumber, this returns null.
            If this method succeeds, the result must be disposed.
            </summary>
            <param name="depthImageStream">The associated DepthImageStream.</param>
            <param name="frameNumber">The frameNumber to retrieve.</param>
            <param name="timestamp">The timestamp of the frame to retrieve.</param>
            <param name="frameFlags">The flags for the frame.</param>
            <returns>Null upon failure, a DepthImageStream upon success, which must be Disposed.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.GetRawPixelData">
            <summary>
            This method provides the DepthImagePixel array that contains the depth image's pixel data. 
            </summary>
            <returns>A DepthImagePixel array of the depth frame's pixel data.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.CopyPixelDataTo``1(``0[],System.Action{``0[],System.Int32})">
            <summary>
            Private helper function used by CopyPixelDataTo and Copy DepthImagePixelDataTo.
            </summary>
            <typeparam name="T">Type of elements to copy.</typeparam>
            <param name="pixelData">Destination array.</param>
            <param name="copyFunction">Function to perform the copy.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.CopyPixelDataTo``1(``0,System.Int32,System.Action{``0,System.Int32})">
            <summary>
            Private helper function used by CopyPixelDataTo and Copy DepthImagePixelDataTo.
            </summary>
            <typeparam name="T">Type of data to copy.</typeparam>
            <param name="pixelData">Destination array.</param>
            <param name="pixelDataLength">The length of the destination array.</param>
            <param name="copyFunction">Function to perform the copy.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.CopyPixelDataTo(System.Int16[])">
            <summary>
            This method copies the frame's pixel data to a pre-allocated pixel array.
            </summary>
            <param name="pixelData">The pixel array to receive the data.
            It must be exactly PixelDataLength in length.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.CopyDepthImagePixelDataTo(Microsoft.Kinect.DepthImagePixel[])">
            <summary>
            This method copies the frame's pixel data to a pre-allocated pixel array.
            </summary>
            <param name="pixelData">The pixel array to receive the data.
            It must be exactly PixelDataLength in length.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.CopyPixelDataTo(System.IntPtr,System.Int32)">
            <summary>
            This method copies the frame's pixel data to a pre-allocated byte array.
            </summary>
            <param name="pixelData">The IntPtr of the byte array.</param>
            <param name="pixelDataLength">The count of Int16s to copy to pixelData.  This must be equal to the frameâ€™s PixelDataLength.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.CopyDepthImagePixelDataTo(System.IntPtr,System.Int32)">
            <summary>
            This method copies the frame's DepthImagePixel data to a pre-allocated byte array.
            </summary>
            <param name="pixelData">The IntPtr of the byte array.</param>
            <param name="pixelDataLength">The count of DepthImagePixels to copy to pixelData.  This must be equal to the frameâ€™s PixelDataLength.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.MapToColorImagePoint(System.Int32,System.Int32,Microsoft.Kinect.ColorImageFormat)">
            <summary>
            This maps a depth coordinate to a color coordinate.
            </summary>
            <param name="depthX">The X coordinate of the depth frame.</param>
            <param name="depthY">The Y coordinate of the depth frame.</param>
            <param name="colorImageFormat">The color format being used.</param>
            <returns>An ImagePoint that contains the X, Y locations in the color frame.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.MapFromSkeletonPoint(Microsoft.Kinect.SkeletonPoint)">
            <summary>
            Looks up the depth frame coordinates for a given skeleton point.
            </summary>
            <param name="skeletonPoint">The supplied skeleton point.</param>
            <returns>The ImagePoint that contains the X, Y and depth value of the given skeleton point.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.MapToSkeletonPoint(System.Int32,System.Int32)">
            <summary>
            Looks up the skeleton point location of the given depth X, Y.
            </summary>
            <param name="depthX">The X coordinate of the depth frame.</param>
            <param name="depthY">The Y coordinate of the depth frame.</param>
            <returns>The skeleton point for the given X, Y.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrame.Dispose(System.Boolean)">
            <summary>
            Disposes the frame object.
            </summary>
            <param name="disposing">Specify true to indicate that the class should clean up all resources.</param>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageFrame.Format">
            <summary>
            Gets this frame's Framerate and Resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageFrame.Range">
            <summary>
            Gets the depth sensor range with which this frame was captured.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageFrame.MaxDepth">
            <summary>
            Gets the maximum reliable Depth value in mm for the depth sensor range setting used to capture this frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageFrame.MinDepth">
            <summary>
            Gets the minimum reliable Depth value in mm for the depth sensor range setting used to capture this frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageFrame.PixelDataLength">
            <summary>
            Total length of the pixel data buffer of this ImageFrame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageFrame.DepthFilter">
            <summary>
            Gets the depth filter that was applied to the frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageFrame.SourceStream">
            <summary>
            The frame's source stream.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DepthImagePoint">
            <summary>
            This struct represents a given X, Y, and depth value in a depth frame.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImagePoint._x">
            <summary>
            Backing field for X.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImagePoint._y">
            <summary>
            Backing field for Y.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImagePoint._depth">
            <summary>
            Backing field for Depth.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImagePoint._playerIndex">
            <summary>
            Padding for compat with unmanaged object.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePoint.GetHashCode">
            <summary>
            This gets the hash code for a given depth image point.
            </summary>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePoint.Equals(System.Object)">
            <summary>
            This method compares two depth image point objects.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePoint.Equals(Microsoft.Kinect.DepthImagePoint)">
            <summary>
            This method compares two depth image point objects.
            </summary>
            <param name="imagePoint">The DepthImagePoint to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePoint.op_Equality(Microsoft.Kinect.DepthImagePoint,Microsoft.Kinect.DepthImagePoint)">
            <summary>
            This method compares two depth image point objects.
            </summary>
            <param name="imagePoint1">The first DepthImagePoint to compare.</param>
            <param name="imagePoint2">The second DepthImagePoint to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImagePoint.op_Inequality(Microsoft.Kinect.DepthImagePoint,Microsoft.Kinect.DepthImagePoint)">
            <summary>
            This method compares two depth image point objects.
            </summary>
            <param name="imagePoint1">The first DepthImagePoint to compare.</param>
            <param name="imagePoint2">The second DepthImagePoint to compare.</param>
            <returns>It returns true if they are not equal and false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.DepthImagePoint.X">
            <summary>
            Gets or sets the X location.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImagePoint.Y">
            <summary>
            Gets or sets the Y location.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImagePoint.Depth">
            <summary>
            Gets or sets the depth value.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImagePoint.PlayerIndex">
            <summary>
            Gets a reserved value.  Do not use.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ColorImagePoint">
            <summary>
            This struct represents a given X, Y in a color frame.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ColorImagePoint.GetHashCode">
            <summary>
            This gets the hash code for a given color image point.
            </summary>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImagePoint.Equals(System.Object)">
            <summary>
            This method compares two color image point objects.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImagePoint.Equals(Microsoft.Kinect.ColorImagePoint)">
            <summary>
            This method compares two color image point objects.
            </summary>
            <param name="imagePoint">The ColorImagePoint to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImagePoint.op_Equality(Microsoft.Kinect.ColorImagePoint,Microsoft.Kinect.ColorImagePoint)">
            <summary>
            This method compares two color image point objects.
            </summary>
            <param name="imagePoint1">The first ColorImagePoint to compare.</param>
            <param name="imagePoint2">The second ColorImagePoint to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImagePoint.op_Inequality(Microsoft.Kinect.ColorImagePoint,Microsoft.Kinect.ColorImagePoint)">
            <summary>
            This method compares two color image point objects.
            </summary>
            <param name="imagePoint1">The first ColorImagePoint to compare.</param>
            <param name="imagePoint2">The second ColorImagePoint to compare.</param>
            <returns>It returns true if they are not equal and false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.ColorImagePoint.X">
            <summary>
            Gets or sets the X location.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImagePoint.Y">
            <summary>
            Gets or sets the Y location.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ContextEventHandler`1">
            <summary>
            Wrapper that holds a collection of event handlers for a specific type and associates
            a context with them.
            </summary>
            <typeparam name="T">EventArgs for the specific event.</typeparam>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.#ctor(Microsoft.Kinect.ContextEventHandler{`0}.ContextSynchronizationMethod)">
            <summary>
            Initializes a new instance of the ContextEventHandler class.
            </summary>
            <param name="method">Determines whether the context will use Post or Send. Default is Post.</param>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.AddHandler(System.EventHandler{`0})">
            <summary>
            Adds an event handler and associates it with the current context.
            </summary>
            <param name="originalHandler">The new event to add to the list of handlers.</param>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.RemoveHandler(System.EventHandler{`0})">
            <summary>
            Removes the event handler associated with the current context.
            </summary>
            <param name="originalHandler">The event to remove from the list of handlers.</param>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.Invoke(System.Object,`0)">
            <summary>
            Invokes all registered event handlers.
            </summary>
            <param name="sender">The sender of the message.</param>
            <param name="eventArgs">The event arguments to be passed to the handler.</param>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.Dispose">
            <summary>
            This method marks the object as disposed.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ContextEventHandler`1._actualHandlers">
            <summary>
            This holds the list of context to handler mappings.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ContextEventHandler`1._method">
            <summary>
            This is the method used process the message by the synchronization context.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ContextEventHandler`1._isDisposed">
            <summary>
            This keeps track of the disposed state of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.SendOrPostDelegate(System.Object)">
            <summary>
            Internal handler that matches the delegates for SynchronizationContext.Post/Send.
            </summary>
            <param name="state">State packed as ContextEventHandlerArgsWrapper ( handler + sender + args ).</param>
        </member>
        <member name="P:Microsoft.Kinect.ContextEventHandler`1.HasHandlers">
            <summary>
            Gets a value indicating whether this wrapper has any actual handlers registered.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ContextEventHandler`1.ContextSynchronizationMethod">
            <summary>
            The possible methods for sending data to the synchronization context.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ContextEventHandler`1.ContextSynchronizationMethod.Send">
            <summary>
            The send method is used to pass synchronous message to the context.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ContextEventHandler`1.ContextSynchronizationMethod.Post">
            <summary>
            The post method is used to pass an asynchronous message to the context.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ContextEventHandler`1.ContextEventHandlerArgsWrapper">
            <summary>
            Container class to hold event handler, sender and args so that it can be
            marshalled using the Synchronization context.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.ContextEventHandlerArgsWrapper.#ctor(System.EventHandler{`0},System.Object,`0)">
            <summary>
            Initializes a new instance of the ContextEventHandlerArgsWrapper class.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The sending object.</param>
            <param name="args">The argument object.</param>
        </member>
        <member name="P:Microsoft.Kinect.ContextEventHandler`1.ContextEventHandlerArgsWrapper.Handler">
            <summary>
            Gets the associated event handler.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ContextEventHandler`1.ContextEventHandlerArgsWrapper.Sender">
            <summary>
            Gets the sending object.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ContextEventHandler`1.ContextEventHandlerArgsWrapper.Args">
            <summary>
            Gets the event arguments object.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier">
            <summary>
            Identifies a SynchronizationContext taking the potential that it is a DispatcherSynchronizationContext
            into account.  In .NET 4.5, WPF made a breaking change to that class that affects stability of the
            actual value of a SynchronizationContext in WPF apps.  While the actual SynchronizationContext instance
            may change, the internal referenced Dispatcher will not, so we use this for determining identity when available.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.DispatcherFieldName">
            <summary>
            Name of the internal field in DispatcherSynchronizationContext to reflect on when
            comparing SynchronizationContextIdentifiers.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.DispatcherSynchronizationContextName">
            <summary>
            The unqualified name of the DispatcherSynchronizationContext type.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier._dispatcherObject">
            <summary>
            Storage for the Dispatcher object, if one exists.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Initializes a new instance of the SynchronizationContextIdentifier class.
            </summary>
            <param name="context">The SynchronizationContext to extract identity for.</param>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.GetHashCode">
            <summary>
            Gets the hashcode of the object.
            </summary>
            <returns>Hashcode of the SynchronizationContextIdentifier.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.Equals(System.Object)">
            <summary>
            Returns whether this SynchronizationContextIdentifier is equivalent to obj.
            </summary>
            <param name="obj">The object to compare for equivalence.</param>
            <returns>True if this SynchronizationContextIdentifier is equivalent to obj, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.Equals(Microsoft.Kinect.ContextEventHandler{`0}.SynchronizationContextIdentifier)">
            <summary>
            Returns whether this SynchronizationContextIdentifier is equivalent to obj.
            </summary>
            <param name="contextId">The object to compare for equivalence.</param>
            <returns>True if this SynchronizationContextIdentifier is equivalent to obj, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.op_Equality(Microsoft.Kinect.ContextEventHandler{`0}.SynchronizationContextIdentifier,Microsoft.Kinect.ContextEventHandler{`0}.SynchronizationContextIdentifier)">
            <summary>
            This method compares two SynchronizationContextIdentifiers.
            </summary>
            <param name="contextId1">The first SynchronizationContextIdentifier to compare.</param>
            <param name="contextId2">The second SynchronizationContextIdentifier to compare.</param>
            <returns>Returns true if they are equal, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.op_Inequality(Microsoft.Kinect.ContextEventHandler{`0}.SynchronizationContextIdentifier,Microsoft.Kinect.ContextEventHandler{`0}.SynchronizationContextIdentifier)">
            <summary>
            This method compares two SynchronizationContextIdentifiers.
            </summary>
            <param name="contextId1">The first SynchronizationContextIdentifier to compare.</param>
            <param name="contextId2">The second SynchronizationContextIdentifier to compare.</param>
            <returns>Returns false if they are equal, true otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.ContextEventHandler`1.SynchronizationContextIdentifier.Context">
            <summary>
            Gets the SynchronizationContext held by the SynchronizationContextIdentifier.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ContextEventHandler`1.ContextHandlerPair">
            <summary>
            Container class to associate an event handler with a context so that they
            act as a single key in a list.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ContextEventHandler`1.ContextHandlerPair.#ctor(System.EventHandler{`0},Microsoft.Kinect.ContextEventHandler{`0}.SynchronizationContextIdentifier)">
            <summary>
            Initializes a new instance of the ContextHandlerPair class.
            </summary>
            <param name="handler">The target handler.</param>
            <param name="contextId">The target context identifier.</param>
        </member>
        <member name="P:Microsoft.Kinect.ContextEventHandler`1.ContextHandlerPair.ContextId">
            <summary>
            Gets the associated synchronization context identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ContextEventHandler`1.ContextHandlerPair.Handler">
            <summary>
            Gets the associated event handler.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.IDepthFilter">
            <summary>
            The interface of a filter to be applied to depth frame data.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.IDepthFilter.ProcessFrame(System.Int64,System.Int32,System.Int32,Microsoft.Kinect.DepthImagePixel[])">
            <summary>
            Processes a frame of depth data.
            </summary>
            <param name="timestamp">Timestamp of the depth frame.</param>
            <param name="width">Width of the depth frame, in pixels.</param>
            <param name="height">Height of the depth frame, in pixels.</param>
            <param name="pixelData">Depth frame data.</param>
            <returns>true if the depth frame was modified; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.IDepthFilter.NativeObject">
            <summary>
            Gets or sets the native depth filter interface.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DepthImageFrameReadyEventArgs">
            <summary>
            Arguments for the DepthFrameReady events.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrameReadyEventArgs._depthImageStream">
            <summary>
            The related depth stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrameReadyEventArgs._frameNumber">
            <summary>
            The related frame number.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrameReadyEventArgs._timestamp">
            <summary>
            The related timestamp.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrameReadyEventArgs._frameFlags">
            <summary>
            The frame flags.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFrameReadyEventArgs._isInvalid">
            <summary>
            Indicates if the arguments are valid.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrameReadyEventArgs.#ctor(Microsoft.Kinect.DepthImageStream,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags,System.Boolean)">
            <summary>
            Initializes a new instance of the DepthImageFrameReadyEventArgs class with a reference to the source Stream
            and the frame number and timestamp, which allows us to retrieve instance of DepthImageFrames on demand.
            </summary>
            <param name="depthImageStream">The source DepthImageStream.</param>
            <param name="frameNumber">The frameNumber for this event.</param>
            <param name="timestamp">The timestamp for this event.</param>
            <param name="frameFlags">The frame flags for this event.</param>
            <param name="isInvalid">Whether this instance is known a priori to be invalid.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrameReadyEventArgs.Create(Microsoft.Kinect.DepthImageStream,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags)">
            <summary>
            Create an instance of DepthImageFrameReadyEventArgs.
            This must only be called by the owning DepthImageStream, and only after the stream has 
            attempted to retrieve the native frame, otherwise OpenDepthImageFrame will fail.
            </summary>
            <param name="depthImageStream">The depth image stream.</param>
            <param name="frameNumber">The frame number.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="frameFlags">The frame flags.</param>
            <returns>A new DepthImageFrameReadyEventArgs object.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrameReadyEventArgs.CreateInvalid">
            <summary>
            Create an instance of DepthImageFrameReadyEventArgs which is known to be invalid.
            OpenDepthImageFrame will return null.
            </summary>
            <returns>An invalid event arguments.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageFrameReadyEventArgs.OpenDepthImageFrame">
            <summary>
            Container for one frame's worth of depth sensor image data
            Can return null if the data is not available.
            Upon success, returns the DepthImageFrame corresponding to this event, which must be Disposed.
            </summary>
            <returns>An a new depth image frame.</returns>
        </member>
        <member name="T:Microsoft.Kinect.ColorImageFrameReadyEventArgs">
            <summary>
            Arguments for the ColorFrameReady events.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFrameReadyEventArgs._colorImageStream">
            <summary>
            The related color stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFrameReadyEventArgs._frameNumber">
            <summary>
            The related frame number.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFrameReadyEventArgs._timestamp">
            <summary>
            The related timestamp.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFrameReadyEventArgs._frameFlags">
            <summary>
            The frame flags.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFrameReadyEventArgs._isInvalid">
            <summary>
            Indicates if the arguments are valid.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrameReadyEventArgs.#ctor(Microsoft.Kinect.ColorImageStream,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags,System.Boolean)">
            <summary>
            Initializes a new instance of the ColorImageFrameReadyEventArgs class with a reference to the source Stream
            and the frame number and timestamp, which allows us to retrieve instance of ColorImageFrames on demand.
            </summary>
            <param name="colorImageStream">The source ColorImageStream.</param>
            <param name="frameNumber">The frameNumber for this event.</param>
            <param name="timestamp">The timestamp for this event.</param>
            <param name="frameFlags">The frame flags for this event.</param>
            <param name="isInvalid">Whether this instance is known a priori to be invalid.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrameReadyEventArgs.Create(Microsoft.Kinect.ColorImageStream,System.Int32,System.Int64,Microsoft.Kinect.ImageFrameFlags)">
            <summary>
            Create an instance of ColorImageFrameReadyEventArgs.
            This must only be called by the owning ColorImageStream, and only after the stream has 
            attempted to retrieve the native frame, otherwise OpenColorImageFrame will fail.
            </summary>
            <param name="colorImageStream">The color stream.</param>
            <param name="frameNumber">The frame number.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="frameFlags">The frame flags.</param>
            <returns>A new ColorImageFrameReadyEventArgs object.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrameReadyEventArgs.CreateInvalid">
            <summary>
            Create an instance of ColorImageFrameReadyEventArgs which is known to be invalid.
            OpenColorImageFrame will return null.
            </summary>
            <returns>An invalid ColorImageFrameReadyEventArgs.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageFrameReadyEventArgs.OpenColorImageFrame">
            <summary>
            Container for one frame's worth of color sensor image data
            Can return null if the data is not available.
            Upon success, returns the ColorImageFrame corresponding to this event, which must be Disposed.
            </summary>
            <returns>A new ColorImageFrame.</returns>
        </member>
        <member name="T:Microsoft.Kinect.SkeletonFrameReadyEventArgs">
            <summary>
            The event arguments used when a skeletion frame is ready.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrameReadyEventArgs._skeletonStream">
            <summary>
            The related skeleton stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrameReadyEventArgs._frameNumber">
            <summary>
            The related frame number.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrameReadyEventArgs._timestamp">
            <summary>
            The related timestamp.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrameReadyEventArgs._trackingMode">
            <summary>
            The tracking mode in which the frame was captured.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrameReadyEventArgs._isInvalid">
            <summary>
            Indicates if the arguments are valid.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrameReadyEventArgs.#ctor(Microsoft.Kinect.SkeletonStream,System.Int32,System.Int64,Microsoft.Kinect.SkeletonTrackingMode,System.Boolean)">
            <summary>
            Initializes a new instance of the SkeletonFrameReadyEventArgs class with a reference to the source Stream
            and the frame number and timestamp, which allows us to retrieve instance of SkeletonFrames on demand.
            </summary>
            <param name="skeletonStream">The source SkeletonStream.</param>
            <param name="frameNumber">The frameNumber for this event.</param>
            <param name="timestamp">The timestamp for this event.</param>
            <param name="trackingMode">The tracking mode in which the frame was captured.</param>
            <param name="isInvalid">Whether this instance is known a priori to be invalid.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrameReadyEventArgs.Create(Microsoft.Kinect.SkeletonStream,System.Int32,System.Int64,Microsoft.Kinect.SkeletonTrackingMode)">
            <summary>
            Create an instance of SkeletonFrameReadyEventArgs.
            This must only be called by the owning SkeletonStream, and only after the stream has 
            attempted to retrieve the native frame, otherwise OpenSkeletonFrame will fail.
            </summary>
            <param name="skeletonImageStream">The skeleton stream.</param>
            <param name="frameNumber">The frame number.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="trackingMode">The tracking mode in which the frame was captured.</param>
            <returns>A new SkeletonFrameReadyEventArgs object.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrameReadyEventArgs.CreateInvalid">
            <summary>
            Create an instance of SkeletonFrameReadyEventArgs which is known to be invalid.
            OpenSkeletonFrame will return null.
            </summary>
            <returns>An invalid SkeletonFrameReadyEventArgs object.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrameReadyEventArgs.OpenSkeletonFrame">
            <summary>
            Container for one frame's worth of skeleton sensor image data
            Can return null if the data is not available.
            Upon success, returns the SkeletonFrame corresponding to this event, which must be Disposed.
            </summary>
            <returns>A new SkeletonFrame.</returns>
        </member>
        <member name="T:Microsoft.Kinect.AllFramesReadyEventArgs">
            <summary>
            Arguments for the Kinect sensor's AllFramesReady event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AllFramesReadyEventArgs._colorArgs">
            <summary>
            The related color image frame event arguments.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AllFramesReadyEventArgs._depthArgs">
            <summary>
            The related depth image frame event arguments.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AllFramesReadyEventArgs._skeletonArgs">
            <summary>
            The related skeleton frame event arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.AllFramesReadyEventArgs.#ctor(Microsoft.Kinect.ColorImageFrameReadyEventArgs,Microsoft.Kinect.DepthImageFrameReadyEventArgs,Microsoft.Kinect.SkeletonFrameReadyEventArgs)">
            <summary>
            Initializes a new instance of the AllFramesReadyEventArgs class.
            </summary>
            <param name="colorArgs">The related color event arguments.</param>
            <param name="depthArgs">The related depth event arguments.</param>
            <param name="skeletonArgs">The related skeletion event arguments.</param>
        </member>
        <member name="M:Microsoft.Kinect.AllFramesReadyEventArgs.OpenColorImageFrame">
            <summary>
            The most recent frame from the Kinect sensor's color image stream.
            Can be null if the data is no longer available.  
            Upon success, the value must be Disposed.
            </summary>
            <returns>A new ColorImageFrame.</returns>
        </member>
        <member name="M:Microsoft.Kinect.AllFramesReadyEventArgs.OpenDepthImageFrame">
            <summary>
            The most recent frame from the Kinect sensor's depth image stream.
            Can be null if the data is no longer available.  
            Upon success, the value must be Disposed.
            </summary>
            <returns>A new DepthImageFrame.</returns>
        </member>
        <member name="M:Microsoft.Kinect.AllFramesReadyEventArgs.OpenSkeletonFrame">
            <summary>
            The most recent frame from the Kinect sensor's skeleton stream.
            Can be null if the data is no longer available.  
            Upon success, the value must be Disposed.
            </summary>
            <returns>A new SkeletonFrame.</returns>
        </member>
        <member name="T:Microsoft.Kinect.DmoAudioWrapper">
            <summary>
            Default facade will create a DMO object using registered COM server, and will call native layer directly.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.INativeAudioWrapper">
            <summary>
            Wrapper interface used to abstract DMO object creation, destruction and other native calls, to allow for mocking.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.INativeAudioWrapper.CreateDmoInstance">
            <summary>
            Creates an instance of Kinect DMO object.
            </summary>
            <returns>
            DMO object created. Can never be <code>null</code>.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.INativeAudioWrapper.DestroyDmoInstance(System.Object)">
            <summary>
            Destroy DMO object previously created via <see cref="M:Microsoft.Kinect.INativeAudioWrapper.CreateDmoInstance"/>.
            </summary>
            <param name="dmo">DMO object which should be destroyed.</param>
        </member>
        <member name="M:Microsoft.Kinect.INativeAudioWrapper.GetMicrophoneArrayDevices(Microsoft.Kinect.MicrophoneArrayDevice[],System.Int32@)">
            <summary>
            Get metadata about the available microphone array devices.
            </summary>
            <param name="deviceBuffer">
            Array to hold audio device metadata. If <code>null</code>, only <paramref name="count"/> is populated.
            </param>
            <param name="count">
            Number of available microphone array devices.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.INativeAudioWrapper.GetSpeakerDevices(Microsoft.Kinect.SpeakerDevice[],System.Int32@)">
            <summary>
            Get metadata about the available speaker devices.
            </summary>
            <param name="deviceBuffer">
            Array to hold audio device metadata. If <code>null</code>, only <paramref name="count"/> is populated.
            </param>
            <param name="count">
            Number of available speaker devices.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.INativeAudioWrapper.MatchAudioDeviceToSensor(Microsoft.Kinect.MicrophoneArrayDevice)">
            <summary>
            Determines if the specified microphone device corresponds to the Kinectâ„¢ sensor
            associated with this <see cref="T:Microsoft.Kinect.INativeAudioWrapper"/>.
            </summary>
            <param name="device">
            Microphone array device to match against this sensor.
            </param>
            <returns>
            <code>true</code> if microphone array device matches the associated Kinectâ„¢ sensor.
            <code>false</code> otherwise.
            </returns>
            <remarks>
            <code>false</code> is always returned for <code>null</code> device IDs.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.INativeAudioWrapper.CreateStreamStopEvent">
            <summary>
            Create an event used to signal the <see cref="T:Microsoft.Kinect.KinectAudioSource"/> to stop streaming.
            </summary>
            <returns>
            A new <see cref="T:System.Threading.ManualResetEvent"/>.
            </returns>
        </member>
        <member name="F:Microsoft.Kinect.DmoAudioWrapper._sensor">
            <summary>
            <see cref="T:Microsoft.Kinect.KinectSensor"/> used to get audio microphone device and audio DMO information.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DmoAudioWrapper.#ctor(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initializes a new instance of the DmoAudioWrapper class.
            </summary>
            <param name="sensor">
            <see cref="T:Microsoft.Kinect.KinectSensor"/> used to get audio microphone device and audio DMO information.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.DmoAudioWrapper.CreateDmoInstance">
            <summary>
            Creates an instance of Kinect DMO object.
            </summary>
            <returns>
            DMO object created. Can never be <code>null</code>.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.DmoAudioWrapper.DestroyDmoInstance(System.Object)">
            <summary>
            Destroy DMO object previously created via <see cref="M:Microsoft.Kinect.DmoAudioWrapper.CreateDmoInstance"/>.
            </summary>
            <param name="dmo">DMO object which should be destroyed.</param>
            <remarks>
            Implementation does nothing, since DMO object is managed by
            underlying <see cref="T:Microsoft.Kinect.KinectSensor"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.DmoAudioWrapper.GetMicrophoneArrayDevices(Microsoft.Kinect.MicrophoneArrayDevice[],System.Int32@)">
            <summary>
            Get metadata about the available microphone array devices.
            </summary>
            <param name="deviceBuffer">
            Array to hold audio device metadata. If <code>null</code>, only <paramref name="count"/> is populated.
            </param>
            <param name="count">
            Number of available microphone array devices.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.DmoAudioWrapper.GetSpeakerDevices(Microsoft.Kinect.SpeakerDevice[],System.Int32@)">
            <summary>
            Get metadata about the available speaker devices.
            </summary>
            <param name="deviceBuffer">
            Array to hold audio device metadata. If <code>null</code>, only <paramref name="count"/> is populated.
            </param>
            <param name="count">
            Number of available speaker devices.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.DmoAudioWrapper.MatchAudioDeviceToSensor(Microsoft.Kinect.MicrophoneArrayDevice)">
            <summary>
            Determines if the specified microphone device corresponds to the Kinectâ„¢ sensor
            associated with this <see cref="T:Microsoft.Kinect.INativeAudioWrapper"/>.
            </summary>
            <param name="device">
            Microphone array device to match against this sensor.
            </param>
            <returns>
            <code>true</code> if microphone array device matches the associated Kinectâ„¢ sensor.
            <code>false</code> otherwise.
            </returns>
            <remarks>
            <code>false</code> is always returned for <code>null</code> device IDs.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.DmoAudioWrapper.CreateStreamStopEvent">
            <summary>
            Create an event used to signal the <see cref="T:Microsoft.Kinect.KinectAudioSource"/> to stop streaming.
            </summary>
            <returns>
            A new <see cref="T:System.Threading.ManualResetEvent"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Kinect.Identifiers">
            <summary>
            Class used to group native identifier definitions needed to interop with
            a DMO.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Identifiers.IID_IMediaBuffer">
            <summary>
            Interface identifier for <see cref="T:Microsoft.Kinect.IMediaBuffer"/> interface.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Identifiers.IID_IMediaObject">
            <summary>
            Interface identifier for <see cref="T:Microsoft.Kinect.IMediaObject"/> interface.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.IMediaObject">
            <summary>
            This interface provides methods for manipulating a Microsoft DirectX Media
            Object (DMO).
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetStreamCount(System.Int32@,System.Int32@)">
            <summary>
            This method retrieves the number of input and output streams.
            </summary>
            <param name="pcInputStreams">
            Receives the number of input streams.
            </param>
            <param name="pcOutputStreams">
            Receives the number of output streams.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetInputStreamInfo(System.Int32,System.Int32@)">
            <summary>
            This method retrieves information about an input stream, such as any
            restrictions on the number of samples per buffer, and whether the
            stream performs a lookahead on the input data. This information never
            changes.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO. 
            </param>
            <param name="pdwFlags">
            Receives a bitwise combination of zero or more
            DMO_INPUT_STREAM_INFO_FLAGS flags. 
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetOutputStreamInfo(System.Int32,System.Int32@)">
            <summary>
            This method retrieves information about an output stream; for example,
            whether the stream is discardable and whether it uses a fixed sample
            size. This information never changes.
            </summary>
            <param name="dwOutputStreamIndex">
            Zero-based index of an output stream on the DMO.
            </param>
            <param name="pdwFlags">
            Receives a bitwise combination of zero or more
            DMO_OUTPUT_STREAM_INFO_FLAGS flags. 
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetInputType(System.Int32,System.Int32,Microsoft.Kinect.DMO_MEDIA_TYPE@)">
            <summary>
            This method retrieves a preferred media type for a specified input
            stream.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO. 
            </param>
            <param name="dwTypeIndex">
            Zero-based index on the set of acceptable media types. 
            </param>
            <param name="pmt">
            Reference to a DMO_MEDIA_TYPE structure. The method fills the structure
            with the media type information. The format block might be null, in
            which case the format type GUID is GUID_NULL.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetOutputType(System.Int32,System.Int32,Microsoft.Kinect.DMO_MEDIA_TYPE@)">
            <summary>
            This method retrieves a preferred media type for a specified output
            stream.
            </summary>
            <param name="dwOutputStreamIndex">
            Zero-based index of an output stream on the DMO. 
            </param>
            <param name="dwTypeIndex">
            Zero-based index on the set of acceptable media types. 
            </param>
            <param name="pmt">
            Reference to a DMO_MEDIA_TYPE structure. The method fills the structure
            with the media type information. The format block might be null, in
            which case the format type GUID is GUID_NULL.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.SetInputType(System.Int32,Microsoft.Kinect.DMO_MEDIA_TYPE,System.Int32)">
            <summary>
            This method sets the media type on an input stream or tests whether a
            media type is acceptable.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO. 
            </param>
            <param name="pmt">
            DMO_MEDIA_TYPE structure that specifies the media type.
            </param>
            <param name="dwFlags">
            Bitwise combination of zero or more flags from the DMO_SET_TYPE_FLAGS
            enumeration. 
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.SetOutputType(System.Int32,Microsoft.Kinect.DMO_MEDIA_TYPE,System.Int32)">
            <summary>
            This method sets the media type on an output stream or tests whether a
            media type is acceptable.
            </summary>
            <param name="dwOutputStreamIndex">
            Zero-based index of an output stream on the DMO. 
            </param>
            <param name="pmt">
            DMO_MEDIA_TYPE structure that specifies the media type.
            </param>
            <param name="dwFlags">
            Bitwise combination of zero or more flags from the DMO_SET_TYPE_FLAGS
            enumeration. 
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetInputCurrentType(System.Int32,Microsoft.Kinect.DMO_MEDIA_TYPE@)">
            <summary>
            This method retrieves the media type that was set for an input stream,
            if any.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO. 
            </param>
            <param name="pmt">
            Reference to a DMO_MEDIA_TYPE structure. The method fills the structure
            with the media type information.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetOutputCurrentType(System.Int32,Microsoft.Kinect.DMO_MEDIA_TYPE@)">
            <summary>
            This method retrieves the media type that was set for an output stream,
            if any.
            </summary>
            <param name="dwOutputStreamIndex">
            Zero-based index of an output stream on the DMO. 
            </param>
            <param name="pmt">
            Reference to a DMO_MEDIA_TYPE structure. The method fills the structure
            with the media type information.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetInputSizeInfo(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            This method retrieves the buffer requirements for a specified input
            stream.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO. 
            </param>
            <param name="pcbSize">
            Receives the minimum size of an input buffer for this stream, in bytes.
            </param>
            <param name="pcbMaxLookahead">
            Receives the maximum amount of data that the DMO will hold for a
            lookahead, in bytes. If the DMO does not perform a lookahead on the
            stream, the value is zero.
            </param>
            <param name="pcbAlignment">
            Receives the required buffer alignment, in bytes. If the input stream
            has no alignment requirement, the value is 1.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetOutputSizeInfo(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            This method retrieves the buffer requirements for a specified output
            stream.
            </summary>
            <param name="dwOutputStreamIndex">
            Zero-based index of an output stream on the DMO. 
            </param>
            <param name="pcbSize">
            Receives the minimum size of an output buffer for this stream, in bytes.
            </param>
            <param name="pcbAlignment">
            Receives the required buffer alignment, in bytes. If the output stream
            has no alignment requirement, the value is 1.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetInputMaxLatency(System.Int32,System.Int64@)">
            <summary>
            This method retrieves the maximum latency on a specified input stream.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO.
            </param>
            <param name="prtMaxLatency">
            Receives the maximum latency.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.SetInputMaxLatency(System.Int32,System.Int64)">
            <summary>
            This method sets the maximum latency on a specified input stream. For
            the definition of maximum latency, see
            <see cref="M:Microsoft.Kinect.IMediaObject.GetInputMaxLatency(System.Int32,System.Int64@)"/>.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO.
            </param>
            <param name="rtMaxLatency">
            Maximum latency.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.Flush">
            <summary>
            This method flushes all internally buffered data.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.Discontinuity(System.Int32)">
            <summary>
            This method signals a discontinuity on the specified input stream.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.AllocateStreamingResources">
            <summary>
            This method allocates any resources needed by the DMO. Calling this
            method is always optional.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.FreeStreamingResources">
            <summary>
            This method frees resources allocated by the DMO. Calling this method
            is always optional.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.GetInputStatus(System.Int32,System.Int32@)">
            <summary>
            This method queries whether an input stream can accept more input data.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO. 
            </param>
            <param name="dwFlags">
            Receives either zero or DMO_INPUT_STATUSF_ACCEPT_DATA.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.ProcessInput(System.Int32,Microsoft.Kinect.IMediaBuffer,System.Int32,System.Int64,System.Int64)">
            <summary>
            This method delivers a buffer to the specified input stream.
            </summary>
            <param name="dwInputStreamIndex">
            Zero-based index of an input stream on the DMO. 
            </param>
            <param name="pBuffer">
            <see cref="T:Microsoft.Kinect.IMediaBuffer"/> interface for buffer.
            </param>
            <param name="dwFlags">
            Bitwise combination of zero or more flags from the
            DMO_INPUT_DATA_BUFFER_FLAGS enumeration.
            </param>
            <param name="rtTimestamp">
            Time stamp that specifies the start time of the data in the buffer. If
             the buffer has a valid time stamp, set the DMO_INPUT_DATA_BUFFERF_TIME
            flag in the dwFlags parameter. Otherwise, the DMO ignores this value. 
            </param>
            <param name="rtTimelength">
            Reference time specifying the duration of the data in the buffer. If
            this value is valid, set the DMO_INPUT_DATA_BUFFERF_TIMELENGTH flag in
            the dwFlags parameter. Otherwise, the DMO ignores this value.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.ProcessOutput(System.Int32,System.Int32,Microsoft.Kinect.DMO_OUTPUT_DATA_BUFFER[],System.Int32@)">
            <summary>
            This method generates output from the current input data.
            </summary>
            <param name="dwFlags">
            Bitwise combination of zero or more flags from the
            DMO_PROCESS_OUTPUT_FLAGS enumeration. 
            </param>
            <param name="cOutputBufferCount">
            Number of output buffers. 
            </param>
            <param name="pOutputBuffers">
            Array of DMO_OUTPUT_DATA_BUFFER structures containing the output buffers.
            Specify the size of the array in the cOutputBufferCount parameter.
            </param>
            <param name="pdwStatus">
            Receives a reserved value (zero). The application should ignore this
            value.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaObject.Lock(System.Int64)">
            <summary>
            This method acquires or releases a lock on the DMO. Call this method
            to keep the DMO serialized when performing multiple operations.
            </summary>
            <param name="bLock">
            Value that specifies whether to acquire or release the lock. If the
            value is nonzero, a lock is acquired. If the value is zero, the lock
            is released. 
            </param>
        </member>
        <member name="T:Microsoft.Kinect.DMO_OUTPUT_DATA_BUFFER">
            <summary>
            This structure describes an output buffer used by a DirectX DMO.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_OUTPUT_DATA_BUFFER.Buffer">
            <summary>
            Value of pinned native pointer to the <see cref="T:Microsoft.Kinect.IMediaBuffer"/>
            interface of a buffer allocated by the application.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_OUTPUT_DATA_BUFFER.Status">
            <summary>
            Status flags. After processing output, the DMO sets this member to a
            bitwise combination of zero or more DMO_OUTPUT_DATA_BUFFER_FLAGS flags.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_OUTPUT_DATA_BUFFER.Timestamp">
            <summary>
            Time stamp that specifies the start time of the data in the buffer. If
            the buffer has a valid time stamp, the DMO sets this member and also
            sets the DMO_OUTPUT_DATA_BUFFERF_TIME flag in the dwStatus member.
            Otherwise, ignore this member.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_OUTPUT_DATA_BUFFER.Timelength">
            <summary>
            Reference time specifying the length of the data in the buffer. If the
            DMO sets this member to a valid value, it also sets the
            DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH flag in the dwStatus member.
            Otherwise, ignore this member. 
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.IMediaBuffer">
            <summary>
            This interface provides methods for manipulating a data buffer. Any buffer passed to a
            Microsoft DirectX Media Object (DMO) must implement this interface.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.IMediaBuffer.SetLength(System.UInt32)">
            <summary>
            This method specifies the length of the data currently in the buffer.
            </summary>
            <param name="ulLength">
            Size of the data, in bytes. The value must not exceed the buffer's maximum size.
            Call the <see cref="M:Microsoft.Kinect.IMediaBuffer.GetMaxLength(System.UInt32@)"/> method to obtain the maximum size. 
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaBuffer.GetMaxLength(System.UInt32@)">
            <summary>
            This method retrieves the maximum number of bytes this buffer can hold.
            </summary>
            <param name="pcbMaxLength">
            Pointer to a variable that receives the buffer's maximum size, in bytes.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IMediaBuffer.GetBufferAndLength(System.IntPtr,System.UInt32@)">
            <summary>
            This method retrieves the buffer and the size of the valid data in the buffer.
            </summary>
            <param name="pBuffer">
            <see cref="T:System.IntPtr"/> that receives the native memory address of the
            buffer array. The <paramref name="pBuffer"/> parameter can be IntPtr.Zero.
            </param>
            <param name="cbLength">
            Reference to a variable that receives the size of the valid data,
            in bytes.
            </param>
        </member>
        <member name="T:Microsoft.Kinect.WAVEFORMATEX">
            <summary>
            This structure defines the format of waveform-audio data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.WAVEFORMATEX.wFormatTag">
            <summary>
            Waveform-audio format type.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.WAVEFORMATEX.nChannels">
            <summary>
            Number of channels in the waveform-audio data. Monaural data uses one
            channel and stereo data uses two channels.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.WAVEFORMATEX.nSamplesPerSec">
            <summary>
            Sample rate, in samples per second (Hertz), that each channel should be
            played or recorded. If wFormatTag is WAVE_FORMAT_PCM, then common values
            for nSamplesPerSecare 8.0 kHz, 11.025 kHz, 22.05 kHz, and 44.1 kHz. For
            non-PCM formats, this member must be computed according to the
            manufacturer's specification of the format tag.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.WAVEFORMATEX.nAvgBytesPerSec">
            <summary>
            Required average data-transfer rate, in bytes per second, for the format
            tag. If wFormatTag is WAVE_FORMAT_PCM, nAvgBytesPerSec should be equal to
            the product of nSamplesPerSec and nBlockAlign. For non-PCM formats, this
            member must be computed according to the manufacturer's specification of
            the format tag.
            Playback and record software can estimate buffer sizes by using the
            nAvgBytesPerSec member. 
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.WAVEFORMATEX.nBlockAlign">
            <summary>
            Block alignment, in bytes. The block alignment is the minimum atomic unit
            of data for the wFormatTag format type. If wFormatTag is WAVE_FORMAT_PCM,
            nBlockAlign should be equal to the product of nChannels and wBitsPerSample
            divided by 8 (bits per byte). For non-PCM formats, this member must be
            computed according to the manufacturer's specification of the format tag.
            Playback and record software must process a multiple of nBlockAlign bytes
            of data at a time. Data written and read from a device must always start
            at the beginning of a block. For example, it is illegal to start playback
            of PCM data in the middle of a sample (that is, on a non-block-aligned
            boundary). 
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.WAVEFORMATEX.wBitsPerSample">
            <summary>
            Bits per sample for the wFormatTag format type. If wFormatTag is
            WAVE_FORMAT_PCM, then wBitsPerSample should be equal to 8 or 16. For
            non-PCM formats, this member must be set according to the manufacturer's
            specification of the format tag. Some compression schemes cannot define a
            value for wBitsPerSample, so this member can be zero.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.WAVEFORMATEX.cbSize">
            <summary>
            Size, in bytes, of extra format information appended to the end of the
            WAVEFORMATEX structure. This information can be used by non-PCM formats to
            store extra attributes for the wFormatTag. If no extra information is
            required by the wFormatTag, this member must be set to zero.
            For WAVE_FORMAT_PCM formats only, this member is ignored.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DMO_MEDIA_TYPE">
            <summary>
            This structure describes the format of the data used by a stream in a DirectX DMO.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.MEDIATYPE_Audio">
            <summary>
            Media major type GUID for audio types.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.MEDIASUBTYPE_PCM">
            <summary>
            Media subtype GUID for PCM audio signals.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.MEDIASUBTYPE_WAVE">
            <summary>
            Media subtype GUID for wave audio signals.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.FORMAT_WaveFormatEx">
            <summary>
            Media format type GUID for WAVEFORMATEX formats.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.majortype">
            <summary>
            A GUID identifying the stream's major media type.
            This must be one of the DMO Media Types.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.subtype">
            <summary>
            Subtype GUID of the stream. 
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.bFixedSizeSamples">
            <summary>
            If TRUE, samples are of a fixed size. This field is informational only.
            For audio, it is generally set to TRUE. For video, it is usually TRUE
            for uncompressed video and FALSE for compressed video. 
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.bTemporalCompression">
            <summary>
            If TRUE, samples are compressed using temporal (interframe) compression.
            A value of TRUE indicates that not all frames are key frames.
            This field is informational only. 
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.lSampleSize">
            <summary>
            Size of the sample, in bytes. For compressed data, the value can be zero. 
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.formattype">
            <summary>
            GUID specifying the format type. The pbFormat member points to the
            corresponding format structure.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.pUnk">
            <summary>
            This field is not used.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.cbFormat">
            <summary>
            Size of the format block of the media type. 
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DMO_MEDIA_TYPE.pbFormat">
            <summary>
            Pointer to the format structure. The structure type is specified by the
            formattype member. The format structure must be present,
            unless formattype is GUID_NULL or FORMAT_None. 
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DMO_MEDIA_TYPE.#ctor">
            <summary>
            Initializes a new instance of the DMO_MEDIA_TYPE class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DMO_MEDIA_TYPE.SetFormat(Microsoft.Kinect.WAVEFORMATEX)">
            <summary>
            Associates this instance with the specified audio format, allocating
            native memory as appropriate.
            </summary>
            <param name="fmt">
            Audio format to associate with this instance.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.DMO_MEDIA_TYPE.Finalize">
            <summary>
            Finalizes an instance of the DMO_MEDIA_TYPE class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DMO_MEDIA_TYPE.Dispose">
            <summary>
            Frees native resources associated with this object, such as the memory
            used to hold the format structure.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DMO_MEDIA_TYPE.Dispose(System.Boolean)">
            <summary>
            Frees native resources associated with this object, such as the memory
            used to hold the format structure.
            </summary>
            <param name="disposing">
            If <code>false</code>, the method has been called by the runtime from
            inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="T:Microsoft.Kinect.StaticMediaBuffer">
            <summary>
            This class represents a pre-allocated buffer, managed by the StaticMediaBuffer client.
            Its main purpose is to present somebody else's buffer as a <see cref="T:Microsoft.Kinect.IMediaObject"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.StaticMediaBuffer._pData">
            <summary>
            Native pointer to buffer data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.StaticMediaBuffer._ulSize">
            <summary>
            Maximum number of bytes that can be stored in buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.StaticMediaBuffer._ulData">
            <summary>
            Number of bytes currently stored in buffer that are ready to be consumed.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.StaticMediaBuffer.#ctor">
            <summary>
            Prevents a default instance of the StaticMediaBuffer class from being created.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.StaticMediaBuffer.Reset(System.UInt32)">
            <summary>
            Invalidates all buffer data, getting buffer ready to be written-to
            again from the beginning.
            </summary>
            <param name="size">
            New maximum size of buffer.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.StaticMediaBuffer.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            Initializes a new instance of the StaticMediaBuffer class from the
            specified buffer data and size.
            </summary>
            <param name="pData">
            Native pointer to buffer data.
            </param>
            <param name="size">
            Number of bytes allocated for <paramref name="pData"/> pointer.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.StaticMediaBuffer.SetLength(System.UInt32)">
            <summary>
            This method specifies the length of the data currently in the buffer.
            </summary>
            <param name="ulLength">
            Size of the data, in bytes. The value must not exceed the buffer's maximum size.
            Call the <see cref="M:Microsoft.Kinect.IMediaBuffer.GetMaxLength(System.UInt32@)"/> method to obtain the maximum size. 
            </param>
        </member>
        <member name="M:Microsoft.Kinect.StaticMediaBuffer.GetMaxLength(System.UInt32@)">
            <summary>
            This method retrieves the maximum number of bytes this buffer can hold.
            </summary>
            <param name="pcbMaxLength">
            Pointer to a variable that receives the buffer's maximum size, in bytes.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.StaticMediaBuffer.GetBufferAndLength(System.IntPtr,System.UInt32@)">
            <summary>
            This method retrieves the buffer and the size of the valid data in the buffer.
            </summary>
            <param name="ppBuffer">
            <see cref="T:System.IntPtr"/> that receives the native memory address of the
            buffer array. The <paramref name="ppBuffer"/> parameter can be IntPtr.Zero.
            </param>
            <param name="cbLength">
            Reference to a variable that receives the size of the valid data,
            in bytes.
            </param>
        </member>
        <member name="T:Microsoft.Kinect.IPropertyStore">
            <summary>
            Exposes methods for enumerating, getting, and setting property values.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.IPropertyStore.GetCount(System.UInt32@)">
            <summary>
            Gets the number of properties attached to the file.
            </summary>
            <param name="cProps">
            Receives the number of properties in store.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IPropertyStore.GetAt(System.UInt32,Microsoft.Kinect.PROPERTYKEY@)">
            <summary>
            Gets a property key from the store's array of properties.
            </summary>
            <param name="iProp">
            The index of the property key in the array of <see cref="T:Microsoft.Kinect.PROPERTYKEY"/>
            structures. This is a zero-based index.
            </param>
            <param name="pkey">
            Receives a <see cref="T:Microsoft.Kinect.PROPERTYKEY"/> structure that contains the unique
            identifier for a property.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IPropertyStore.GetValue(Microsoft.Kinect.PROPERTYKEY@,System.Object@)">
            <summary>
            Gets data for a specific property.
            </summary>
            <param name="key">
            <see cref="T:Microsoft.Kinect.PROPERTYKEY"/> structure that contains a unique identifier
            for the property in question.
            </param>
            <param name="pv">
            Receives an object that contains the property data.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IPropertyStore.SetValue(Microsoft.Kinect.PROPERTYKEY@,System.Object@)">
            <summary>
            Sets a new property value, or replaces or removes an existing value.
            </summary>
            <param name="key">
            <see cref="T:Microsoft.Kinect.PROPERTYKEY"/> structure that contains a unique identifier
            for the property in question.
            </param>
            <param name="pv">
            Reference to an object that contains the new property data.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.IPropertyStore.Commit">
            <summary>
            Saves a property change.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.PROPERTYKEY">
            <summary>
            Specifies the FMTID/PID identifier that programmatically identifies a
            property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.PROPERTYKEY.fmtid">
            <summary>
            A unique GUID for the property.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.PROPERTYKEY.pid">
            <summary>
            A property identifier (PID). It is recommended that you set this value
            to PID_FIRST_USABLE. Any value greater than or equal to 2 is
            acceptable.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.INuiAudioBeam">
            <summary>
              Provides ability to get/set audio beam direction for Kinect&#x2122;
              sensor, as well as the ability to get the position of current sound
              source relative to sensor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.INuiAudioBeam.GetBeam(System.Double@)">
            <summary>
              Gets the currently selected beam direction (i.e., angle that
              Kinect&#x2122; audio sensor gives relative preference over other
              angles).
            </summary>
            <param name="angle">
              Receives the horizontal angle (in degrees) of the currently selected
              beam in camera coordinates, where the x-z axes define the horizontal
              plane. The angle is relative to the z-axis, which is perpendicular to
              the Kinect sensor. 
            </param>
        </member>
        <member name="M:Microsoft.Kinect.INuiAudioBeam.SetBeam(System.Double)">
            <summary>
              Sets the currently selected beam direction (i.e., angle that
              Kinect&#x2122; audio sensor gives relative preference over other
              angles).
            </summary>
            <param name="angle">
              The horizontal angle (in degrees) to set as the new beam angle, in
              camera coordinates, where the x-z axes define the horizontal plane.
              The angle is relative to the z-axis, which is perpendicular to the
              Kinect&#x2122; sensor.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.INuiAudioBeam.GetPosition(System.Double@,System.Double@)">
            <summary>
            Provides the best estimate of the sound source location relative to
            the Kinect&#x2122; sensor.
            </summary>
            <param name="angle">
            Receives the estimated horizontal angle (in degrees) to the sound
            source, in camera coordinates, where the x-z axes define the horizontal
            plane. The angle is relative to the z-axis, which is perpendicular to
            the Kinect&#x2122; sensor. 
            </param>
            <param name="confidence">
            Receives a measure of the confidence (in [0.0,1.0] interval) in the
            estimated value for <paramref name="angle"/>.
            </param>
        </member>
        <member name="T:Microsoft.Kinect.EchoCancellationMode">
            <summary>
            Type of audio echo cancellation.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.EchoCancellationMode.None">
            <summary>
            No echo cancellation or suppression.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.EchoCancellationMode.CancellationOnly">
            <summary>
            Echo cancellation only.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.EchoCancellationMode.CancellationAndSuppression">
            <summary>
            Echo cancellation and echo suppression.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.BeamAngleMode">
            <summary>
            Type of beam angle determination.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BeamAngleMode.Automatic">
            <summary>
            Automatic Beam determination based on fixed coefficients.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BeamAngleMode.Adaptive">
            <summary>
            Automatic Beam determination based on dynamic coefficients.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BeamAngleMode.Manual">
            <summary>
            User set beam angle.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.BeamAngleChangedEventArgs">
            <summary>
            Argument for the BeamAngleChanged event.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.BeamAngleChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the BeamAngleChangedEventArgs class.
            </summary>
            <remarks>
            This constructor is internal to prevent external creation.
            </remarks>
        </member>
        <member name="P:Microsoft.Kinect.BeamAngleChangedEventArgs.Angle">
            <summary>
            Gets the angle (in degrees) of the direction towards which the audio beam
            is pointing, i.e.: the direction towards which the kinect sensor is listening. 
            When facing the Kinect:
            0: center
            positive angles: right
            negative angles: left
            Range is -50 to +50 degrees.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SoundSourceAngleChangedEventArgs">
            <summary>
            Argument for the SoundSourceAngleChanged event.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SoundSourceAngleChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the SoundSourceAngleChangedEventArgs class.
            </summary>
            <remarks>
            This constructor is internal to prevent external creation.
            </remarks>
        </member>
        <member name="P:Microsoft.Kinect.SoundSourceAngleChangedEventArgs.Angle">
            <summary>
            Gets the angle (in degrees) from kinect sensor towards the current sound source. 
            When facing the Kinect:
            0: center
            positive angles: right
            negative angles: left
            Range is -50 to +50 degrees.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SoundSourceAngleChangedEventArgs.ConfidenceLevel">
            <summary>
            Gets a measure of our confidence in the sound source angle.
            This value is in the range [0,1], 1 being the highest possible confidence.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectAudioSource">
            <summary>
            Main class for capturing audio from Kinect and get access to sound source localization.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.PID_FIRST_USABLE">
            <summary>
            Value of first valid DMO property ID.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_SYSTEM_MODE">
            <summary>
            ID of DMO property used to turn Acoustic Echo Cancellation mode on and off.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_DMO_SOURCE_MODE">
            <summary>
            ID of DMO property used to toggle between source mode and filter mode.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_DEVICE_INDEXES">
            <summary>
            ID of DMO property used to specify the indexes of microphone and speaker devices
            that are bound to DMO.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_FEATURE_MODE">
            <summary>
            ID of DMO property used to turn Feature mode on and off.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_FEATR_NS">
            <summary>
            ID of DMO property used to turn Noise Suppression on and off.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_FEATR_AGC">
            <summary>
            ID of DMO property used to turn Automatic Gain Control on and off.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_FEATR_AES">
            <summary>
            ID of DMO property used to configure how many times acoustic echo suppression algorithm is run.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_FEATR_MICARR_MODE">
            <summary>
            ID of DMO property used to configure beamforming mode.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.s_minBeamAngle">
            <summary>
            Gets the smallest possible value for <see cref="P:Microsoft.Kinect.KinectAudioSource.BeamAngle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.s_maxBeamAngle">
            <summary>
            Gets the largest possible value for <see cref="P:Microsoft.Kinect.KinectAudioSource.BeamAngle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.s_minSoundSourceAngle">
            <summary>
            Gets the smallest possible value for <see cref="P:Microsoft.Kinect.KinectAudioSource.SoundSourceAngle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.s_maxSoundSourceAngle">
            <summary>
            Gets the largest possible value for <see cref="P:Microsoft.Kinect.KinectAudioSource.SoundSourceAngle"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.AUDIO_CAPTURE_THREAD_NAME">
            <summary>
            Name of audio capture thread.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.MFPKEY_WMAAECMA_KEY_BASE">
            <summary>
            Format GUID used to identify DMO property keys.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.PropertyKeyFromId(System.Int32)">
            <summary>
            Returns a <see cref="T:Microsoft.Kinect.PROPERTYKEY"/> that corresponds to the specified property id.
            </summary>
            <param name="pid">
            ID of property for which corresponding <see cref="T:Microsoft.Kinect.PROPERTYKEY"/> will be returned.
            </param>
            <returns>
            <see cref="T:Microsoft.Kinect.PROPERTYKEY"/> corresponding to <paramref name="pid"/> property ID.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.SetProperty(System.Int32,System.Object)">
            <summary>
            Sets DMO property value in DMO property dictionary and flags properties
            as pending to be applied to DMO object.
            </summary>
            <param name="pid">ID of property to set.</param>
            <param name="value">Value of property to set.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.GetProperty(System.Int32)">
            <summary>
            Gets DMO property value from DMO property dictionary.
            </summary>
            <param name="pid">ID of property to get.</param>
            <returns>
            Value of requested property. Will be null before first time property is set, so internal code should
            handle this and also set appropriate defaults for all properties accessible to clients.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.ApplyPendingProperties(Microsoft.Kinect.IPropertyStore)">
            <summary>
            Method to be called in audio capture thread to apply DMO properties specified by client
            in main thread.
            </summary>
            <param name="propertyStore">
            Property store to which queued-up properties will be applied.
            </param>
            <remarks>
            Whenever a property is set, we flag that we have properties pending to be applied to DMO.
            Also, whenever a capture thread is started we also flag that we have properties pending
            to be applied to DMO.
            Then, whenever capture thread notices that this flag is set, it applies all property
            values in property bag to DMO, not merely the ones that have changed since last time.
            This won't result in a noticeable performance overhead, because there are only a handful
            of DMO properties that we care about, and doing things this way is simpler than having a
            mechanism to keep track of property diffs.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.VerifyFeatureMode">
            <summary>
            Throws an exception if feature mode is not turned on.
            Called by setters for properties that require feature mode
            to be turned on for proper functioning.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource.DefaultReadStaleThreshold">
            <summary>
            Default value for stale read threshold overridable in <see cref="M:Microsoft.Kinect.KinectAudioSource.Start"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._dmoProperties">
            <summary>
            Dictionary of DMO property keys to property values.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._applyProperties">
            <summary>
            <code>true</code> when there are properties set by client still pending to be applied to DMO.
            <code>false</code> otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._nativeAudioWrapper">
            <summary>
            Facade object used to call into native layer in an easily mockable way.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._propertyLock">
            <summary>
            Lock object used to protect DMO property get/set operations.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._initLock">
            <summary>
            Lock object used to protect audio capture initialization, uninitialization and resource disposal.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._stream">
            <summary>
            <see cref="T:Microsoft.Kinect.KinectAudioStream"/> actively capturing audio.
            If <code>null</code>, no stream is currently being captured.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._soundSourceAngle">
            <summary>
            Sound source angle detected by DMO during audio capture.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._soundSourceAngleConfidence">
            <summary>
            Confidence measured by DMO for sound source angle value, during audio capture.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._beamAngle">
            <summary>
            Beam angle detected by DMO during audio capture.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._manualBeamAngle">
            <summary>
            Manual beam angle specified by client.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._beamAngleSetValue">
            <summary>
            Beam angle to set on DMO in capture thread.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._sensor">
            <summary>
            The <see cref="T:Microsoft.Kinect.KinectSensor"/> object that owns this audio source.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._BeamAngleChangedContextHandler">
            <summary>
            Handler for event that fires when the sound source changes.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._SoundSourceAngleChangedContextHandler">
            <summary>
            Handler for event that fires when the sound source changes.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.#ctor(Microsoft.Kinect.KinectSensor,Microsoft.Kinect.INativeAudioWrapper)">
            <summary>
            Initializes a new instance of the KinectAudioSource class.
            </summary>
            <param name="sensor">
            <see cref="T:Microsoft.Kinect.KinectSensor"/> that owns this audio source.
            </param>
            <param name="audioWrapper">
            Facade to use for performing native call operations.
            </param>
            <remarks>
            This constructor is internal and is injectable with different <see cref="T:Microsoft.Kinect.INativeAudioWrapper"/>
            objects for testing purposes.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.#ctor(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initializes a new instance of the KinectAudioSource class, with default properties set.
            </summary>
            <param name="sensor">
            <see cref="T:Microsoft.Kinect.KinectSensor"/> that owns this audio source.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.Start(System.TimeSpan)">
            <summary>
            Starts capturing audio from the device. The data can be read using the returned stream.
            </summary>     
            <param name="readStaleThreshold">
            <para>
            If there are no reads to the stream for longer than this threshold the DMO discards
            any buffered audio. This prevents stale data from being returned in scenarios such as speech recognition and dialog
            systems, when the consumption of audio samples may stop for a while.
            </para>
            <para>
            Higher values for this threshold (e.g.: multiple seconds) are advisable if clients notice dropped audio packets,
            such as is more likely in high CPU-load scenarios.
            </para>
            <para>
            Pass TimeSpan.MaxValue to avoid hitting this threshold.
            </para>
            </param>   
            <returns>
            A stream of audio samples, in 16khz, 16-bit PCM format.
            </returns>
            <remarks>
            If the stream data is not read and the buffered audio exceeds the size specified in <paramref name="readStaleThreshold"/>,
            the oldest samples are discarded.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.Start">
            <summary>
            Starts capturing audio from the device. The data can be read using the returned stream.
            </summary>
            <returns>
            A stream of audio samples, in 16khz, 16-bit PCM format.
            </returns>
            <remarks>
            If the data is not read for more than 500ms, buffered data is discarded to prevent returning old audio.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.Stop">
            <summary>
            Stops the capturing and closes the stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._echoCancellationMode">
            <summary>
            The specified <see cref="P:Microsoft.Kinect.KinectAudioSource.EchoCancellationMode"/> value that determines how the DMO
            performs echo cancellation and suppression.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.SetEchoCancellationMode(System.Int32,Microsoft.Kinect.KinectAudioSource._AEC_SYSTEM_MODE)">
            <summary>
            Change the echo cancellation and echo suppression configuration according to the
            specified values.
            </summary>
            <param name="echoSuppression">
            Specifies how many times the DMO will perform acoustic echo suppression (AES) on
            the residual signal after echo cancellation has been applied.
            0 implies echo suppression is turned off, and 1 and 2 are acceptable values used
            to turn this on.
            </param>
            <param name="sysMode">
            Specifies which acoustic echo cancellation mode we should use.
            _AEC_SYSTEM_MODE.ArrayAndEchoCancellation turns AEC on and
            _AEC_SYSTEM_MODE.ArrayOnly turns AEC off.
            </param>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._beamAngleMode">
            <summary>
            The specified <see cref="P:Microsoft.Kinect.KinectAudioSource.BeamAngleMode"/> value that determines how the beam angle
            is controlled.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.SetBeamAngle(System.Double)">
            <summary>
            Updates the current beam angle and fires the event.
            </summary>
            <param name="angle">Beam angle, in radians.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.SetSoundSourceAngleAndConfidence(System.Double,System.Double)">
            <summary>
            Updates the current sound sounce angle and confidence values, 
            and fires the event if beyond a threshold.
            </summary>
            <param name="angle">Sound source angle, in radians.</param>
            <param name="confidence">ConfidenceLevel, in 0-1 range.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.FetchNextBeamAngle">
            <summary>
            Returns the angle last set by the client and then clears it (sets it to double.MinValue).
            </summary>
            <returns>
            The manual beam angle (in degrees) to be applied to DMO.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.FindCaptureDevices">
            <summary>
            Enumerates all sound capture (e.g.: microphone) devices in system.
            </summary>
            <returns>
            An enumeration of sound capture device metadata, where the metadata
            returned for each enumerated device is enough to uniquely identify
            capture device within system.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.GetDefaultSpeakerIndex">
            <summary>
            Returns the device index corresponding to the default speaker for the system.
            </summary>
            <returns>
            An integer in range [0,{number of speaker devices}-1] representing the device
            index for the default speaker device.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.FindMicrophoneIndex">
            <summary>
            Finds the microphone index that matches the sensor associated with this audio source.
            </summary>
            <returns>
            The index of the matching microphone array device, if a matching device was found.
            <code>null</code> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioSource.Dispose">
            <summary>
            Stops audio capture, if necessary, and disposes all resources used by the
            <see cref="T:Microsoft.Kinect.KinectAudioSource"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.NativeWrapper">
            <summary>
            Gets a reference to the DMO wrapper, used internally by the audio stream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.DeviceIndexes">
            <summary>
            Gets or sets microphone and speaker device indexes currently bound to DMO.
            Maps to the DMO property MFPKEY_WMAAECMA_DEVICE_INDEXES.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.MicrophoneIndex">
            <summary>
            Sets the index of microphone device associated with audio processing pipeline.
            </summary>
            <remarks>
            Internally used to match the sensor to its audio device.
            </remarks>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.FeatureMode">
            <summary>
            Gets or sets a value indicating whether feature mode is turned on.
            ON by default.
            Maps to the DMO property MFPKEY_WMAAECMA_FEATURE_MODE.
            </summary>
            <remarks>
            If feature mode is enabled, this in turn enables turning on DMO features
            such as noise suppression and acoustic gain control.
            </remarks>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.MicArrayMode">
            <summary>
            Sets the microphone array beam forming mode.
            Requires FeatureMode set.
            _MIC_ARRAY_MODE.SingleBeam by default.
            Maps to the DMO property MFPKEY_WMAAECMA_FEATR_MICARR_MODE.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.KinectAudioSource.BeamAngleChanged">
            <summary>
            Event that fires when the beam angle changes.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.KinectAudioSource.SoundSourceAngleChanged">
            <summary>
            Event that fires when the beam angle changes.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.MinBeamAngle">
            <summary>
            Gets the smallest possible value for <see cref="P:Microsoft.Kinect.KinectAudioSource.BeamAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.MaxBeamAngle">
            <summary>
            Gets the largest possible value for <see cref="P:Microsoft.Kinect.KinectAudioSource.BeamAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.MinSoundSourceAngle">
            <summary>
            Gets the smallest possible value for <see cref="P:Microsoft.Kinect.KinectAudioSource.SoundSourceAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.MaxSoundSourceAngle">
            <summary>
            Gets the largest possible value for <see cref="P:Microsoft.Kinect.KinectAudioSource.SoundSourceAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.EchoCancellationMode">
            <summary>
            Gets or sets the echo cancellation and suppression mode.
            Default is None (i.e.: echo cancellation and echo suppression are both turned off).
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.BeamAngleMode">
            <summary>
            Gets or sets the beam angle mode that determines how the beam angle is controlled.
            Default is Automatic.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.SoundSourceAngle">
            <summary>
            Gets the most recent sound source position observed, in degrees.
            </summary>
            <remarks>
            This property gets updated continuously after calling Start().
            </remarks>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.SoundSourceAngleConfidence">
            <summary>
            Gets the most recent measurement of our confidence in the sound source position.
            This value is in the range [0,1], 1 being the highest possible confidence.
            </summary>
            <remarks>
            This property gets updated continuously after calling Start().
            </remarks>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.EchoCancellationSpeakerIndex">
            <summary>
            Gets or sets index of speaker device used to identify the sound being
            produced by computer in order to perform echo cancellation.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.NoiseSuppression">
            <summary>
            Gets or sets a value indicating whether Noise Suppression is enabled.
            ON by default.
            Maps to the DMO property MFPKEY_WMAAECMA_FEATR_NS.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.AutomaticGainControlEnabled">
            <summary>
            Gets or sets a value indicating whether Automatic Gain Control is enabled.
            OFF by default. 
            Recommended for non-speech scenarios.
            Maps to the DMO property MFPKEY_WMAAECMA_FEATR_AGC.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.BeamAngle">
            <summary>
            Gets the sound source angle that the audio array is currently focusing on, in degrees.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioSource.ManualBeamAngle">
            <summary>
            Gets or sets manual Beam angle, in degrees.
            </summary>
            <remarks>
            Only valid when <see cref="P:Microsoft.Kinect.KinectAudioSource.BeamAngleMode"/> is set to Manual.
            </remarks>
        </member>
        <member name="T:Microsoft.Kinect.KinectAudioSource._MIC_ARRAY_MODE">
            <summary>
            Beamforming mode for the microphone array.
            Values map to the values of DMO property MFPKEY_WMAAECMA_FEATR_MICARR_MODE.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._MIC_ARRAY_MODE.SingleChannel">
            <summary>
            Single channel. Last 8 bits specify which channel to use - NOT USED.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._MIC_ARRAY_MODE.SimpleSum">
            <summary>
            Simply sum all channels - NOT USED.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._MIC_ARRAY_MODE.SingleBeam">
            <summary>
            Perform beamformer. Beam selected by internal source localizer.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._MIC_ARRAY_MODE.FixedBeam">
            <summary>
            Perform beamformer. Always select the center beam - NOT USED.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._MIC_ARRAY_MODE.ExternalBeam">
            <summary>
            Perform beamformer. Beam selected externally by applications.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._MIC_ARRAY_MODE.AdaptiveBeam">
            <summary>
            Perform adaptive beamformer. Beam selected by internal source localizer.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectAudioSource._AEC_SYSTEM_MODE">
            <summary>
            System mode for the microphone array echo cancellation pipeline.
            Values map to the values of DMO property MFPKEY_WMAAECMA_FEATR_SYSTEM_MODE.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._AEC_SYSTEM_MODE.ArrayOnly">
            <summary>
            Audio data from microphone array will be streamed with NO AEC processing applied to it.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioSource._AEC_SYSTEM_MODE.ArrayAndEchoCancellation">
            <summary>
            Audio data from microphone array will be streamed with AEC processing applied to it.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectAudioStream">
            <summary>
            A Stream implementation to read data from the DMO output in a .NET friendly way.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE">
            <summary>
            Status flag returned by IMediaObject::ProcessOutput.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.AUDCLNT_E_DEVICE_INVALIDATED">
            <summary>
            WASAPI error indicating that the specified capture device has become invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.BufferSizeMilliSeconds">
            <summary>
            Number of milliseconds' worth of data to allocate to each buffer in buffer pool.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.BufferSizeBytes">
            <summary>
            Number of bytes to allocate to each buffer in buffer pool.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.MinTotalBufferMilliseconds">
            <summary>
            Minimum number of milliseconds' worth of captured audio to keep in buffer pool.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.MaxTotalBufferMilliseconds">
            <summary>
            Maximum number of milliseconds' worth of captured audio to keep in buffer pool.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.AdditionalStaleDataToDiscard">
            <summary>
            Number of milliseconds' worth of additional data to be discarded when we hit the
            threshold for stale read data.
            </summary>
            <remarks>
            The DMO buffers 0.1 seconds of mic data on the input, but some of it may already
            be making its way down the pipeline. Experimentally 250ms works best.
            </remarks>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._stopEvent">
            <summary>
            Event used to let capture thread know when it should stop capturing audio data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._audioSource">
            <summary>
            <see cref="T:Microsoft.Kinect.KinectAudioSource"/> that owns this stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._writeBufferStack">
            <summary>
            Pool of data buffers waiting to be used for audio capture.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._readBufferQueue">
            <summary>
            Queue of buffers with data pending to be read by stream client.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._syncRoot">
            <summary>
            Object used to synchronize multithreaded access to data capture/read buffers.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._dataReady">
            <summary>
            Event used to wake up threads waiting to read from this stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._started">
            <summary>
            <code>true</code> if we've ever started to capture audio data through
            this stream instance.
            <code>false</code> otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._capturingThread">
            <summary>
            Audio capture thread.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._currentBuffer">
            <summary>
            Current audio data buffer from which client will read data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._currentBufferIndex">
            <summary>
            Next data index within current audio data buffer from which
            client will read data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._bytesRead">
            <summary>
            Number of bytes that have been read from this stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._capturing">
            <summary>
            <code>true</code> if we're actively capturing audio data.
            <code>false</code> otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._lastRead">
            <summary>
            Timestamp of last time that client stopped reading data.
            </summary>
            <remarks>
            Used in conjunction with _readStaleThreshold to
            detect if the reader stopped reading data. If so, we want to discard old data on
            the next read.
            </remarks>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._readStaleThreshold">
            <summary>
            If nothing is read for this amount of time, we assume that the client has
            purposefully stopped reading from stream, so we start with fresh data next time
            they request to read data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream._captureException">
            <summary>
            Exception, if any, encountered during capture thread execution.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.#ctor(Microsoft.Kinect.KinectAudioSource,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.KinectAudioStream"/> class.
            </summary>
            <param name="audioSource">
            <see cref="T:Microsoft.Kinect.KinectAudioSource"/> that owns the stream being created
            </param>
            <param name="readStaleThreshold">
            If there are no reads to the stream for longer than this threshold the DMO discards
            any buffered audio. This prevents stale data from being returned in scenarios such as speech recognition and dialog
            systems, when the consumption of audio samples may stop for a while. Pass TimeSpan.MaxValue to avoid hitting this threshold.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.Stop">
            <summary>
            Stops capture thread and truncates pending stream reads.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.Start">
            <summary>
            Starts capture thread and prepares stream for reading.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.ResetStaleTracking">
            <summary>
            Resets tracking of stale data as if data had just been read, so that no data
            will be discarded until {now + readStaleThreshold}.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.InitializeMediaObject(Microsoft.Kinect.IMediaObject)">
            <summary>
            Configure media type in media object and allocate streaming resources.
            </summary>
            <param name="mediaObject">
            <see cref="T:Microsoft.Kinect.IMediaObject"/> to initialize.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.GetNumBuffersInPool(System.UInt32)">
            <summary>
            Get number of buffers appropriate to use in a write buffer pool that
            keeps track of the specified number of milliseconds' worth of buffer.
            </summary>
            <param name="readStaleThresholdMilliseconds">
            Number of milliseconds in readStaleThreshold. See
            <see cref="M:Microsoft.Kinect.KinectAudioSource.#ctor(Microsoft.Kinect.KinectSensor)"/>.
            </param>
            <returns>
            Number of buffers in write buffer pool.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.RunCapture(System.Object)">
            <summary>
            Thread procedure for audio capture thread.
            </summary>
            <param name="notused">
            UNUSED - Thread Procedure default parameter.
            </param>
            <remarks>
            This thread creates a DMO and calls it in a loop to get captured audio.
            Properties set on KinectAudioSource are read during the capture loop and applied
            to DMO.
            Thread handles audio device invalidation errors and generates a stream of silent
            audio until device becomes valid again.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.QueueCapturedBuffer(Microsoft.Kinect.KinectAudioStream.Buffer)">
            <summary>
            Enqueues the captured stream buffer into the data queue from which client will read stream.
            </summary>
            <param name="capturedBuffer">
            Buffer that was produced by audio capture operation.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.GetWriteBuffer">
            <summary>
            Gets a buffer from the write buffer pool, if possible. Otherwise it
            gets the oldest buffer from the read buffer queue.
            </summary>
            <returns>
            A buffer ready to be written-to.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.SafeFree(System.Runtime.InteropServices.GCHandle)">
            <summary>
            Frees a <see cref="T:System.Runtime.InteropServices.GCHandle"/> if it has been initialized.
            </summary>
            <param name="handle">
            Handle to free.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream
            and causes any buffered data to be written to the underlying device.
            </summary>
            <remarks>
            Unsupported in this implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between <paramref name="offset"/> and
            (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by
            the bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin
            storing the data read from the current stream. 
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream. 
            </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number
            of bytes requested if that many bytes are not currently available, or zero (0)
            if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.ReleaseBuffer(Microsoft.Kinect.KinectAudioStream.Buffer)">
            <summary>
            Release an individual read buffer, returning it to the write buffer pool.
            </summary>
            <param name="buffer">
            Buffer to release.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.ReleaseAllBuffers">
            <summary>
            Release all read buffers, returning them to the write buffer pool.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            This implementation represents a live stream, so this method just returns
            the byte position relative to SeekOrigin.Current, without adjusting the
            actual stream position.
            </summary>
            <param name="offset">
            Byte offset relative to SeekOrigin.Current.
            </param>
            <param name="origin">
            A value of type SeekOrigin indicating the reference point used to obtain the new
            position.
            Parameter value is ignored in this implementation.
            </param>
            <returns>
            The new position within the current stream.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            Not supported in this implementation.
            </summary>
            <param name="value">
            The desired length of the current stream in bytes.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream
            and advances the current position within this stream by the number of bytes written.
            Not supported in this implementation.
            </summary>
            <param name="buffer">
            An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buffer"/> to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes
            to the current stream.
            </param>
            <param name="count">
            The number of bytes to be written to the current stream.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioStream.ReadBufferQueue">
            <summary>
            Gets the read buffer queue.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <remarks>
            Always returns -1 in this implementation.
            </remarks>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <remarks>
            Set is unsupported in this implementation.
            </remarks>
        </member>
        <member name="T:Microsoft.Kinect.KinectAudioStream.Buffer">
            <summary>
            Helper class that represents a data buffer used for capturing audio data
            and making it available for clients to read.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.Buffer.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Kinect.KinectAudioStream.Buffer"/> class.
            </summary>
            <param name="size">
            Maximum number of bytes buffer can hold.
            </param>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioStream.Buffer.DataLength">
            <summary>
            Gets or sets number of bytes of valid data contained in buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectAudioStream.Buffer.Data">
            <summary>
            Gets byte array containing buffer data.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectAudioStream.AudioAngleTracker">
            <summary>
            Helper class to keep track of audio beam and sound source angle changes during audio capture.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.AudioAngleTracker._lastAngle">
            <summary>
            Last observed value for beam angle.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.AudioAngleTracker._lastSoundSourceAngle">
            <summary>
            Last observed value for sound source angle.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.AudioAngleTracker._lastSoundSourceConfidence">
            <summary>
            Last observed value for sound source confidence.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.AudioAngleTracker._audioSource">
            <summary>
            <see cref="T:Microsoft.Kinect.KinectAudioStream"/> that owns this <see cref="T:Microsoft.Kinect.KinectAudioSource"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.AudioAngleTracker._audioBeam">
            <summary>
            <see cref="T:Microsoft.Kinect.INuiAudioBeam"/> object used to get and set the audio beam angle.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.AudioAngleTracker.#ctor(Microsoft.Kinect.KinectAudioSource,Microsoft.Kinect.INuiAudioBeam)">
            <summary>
            Initializes a new instance of the AudioAngleTracker class.
            </summary>
            <param name="audioSource">
             <see cref="T:Microsoft.Kinect.KinectAudioStream"/> that owns the new angle tracker.
            </param>
            <param name="audioBeam">
            <see cref="T:Microsoft.Kinect.INuiAudioBeam"/> object used to get and set the audio
            beam angle.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.AudioAngleTracker.TrackAngles">
            <summary>
            Track changes in beam angle and sound source position, triggering events for client as appropriate.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectAudioStream.BufferManager">
            <summary>
            Helper class to manage writing to the appropriate write buffer and queuing up
            data into the read queue when it's ready to be read by stream clients.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.BufferManager._writeBuf">
            <summary>
            Managed buffer that will receive data from native layer.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectAudioStream.BufferManager._stream">
            <summary>
            <see cref="T:Microsoft.Kinect.KinectAudioStream"/> that owns this <see cref="T:Microsoft.Kinect.KinectAudioStream.BufferManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.BufferManager.#ctor(Microsoft.Kinect.KinectAudioStream)">
            <summary>
            Initializes a new instance of the BufferManager class.
            </summary>
            <param name="stream">
            <see cref="T:Microsoft.Kinect.KinectAudioStream"/> that owns the new buffer manager.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.BufferManager.Write(System.Byte[],System.UInt32)">
            <summary>
            Write the specified data into the current write buffer, queuing
            write buffer into read queue if it gets full.
            </summary>
            <param name="data">
            Data to write into write buffer.
            </param>
            <param name="length">
            Number of bytes to write.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.BufferManager.WriteEmpty(System.UInt32)">
            <summary>
            Write empty data (zeroes) into the current write buffer, queuing
            write buffer into read queue if it gets full.
            </summary>
            <param name="length">
            Number of bytes to write.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.BufferManager.WriteHelper(System.UInt32,System.Action{System.UInt32})">
            <summary>
            Performs the specified write action, queuing write buffers into
            read queue as they get full.
            </summary>
            <param name="length">
            Number of bytes to write into current write buffer.
            </param>
            <param name="writeAction">
            Action to perform on current write buffer.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectAudioStream.BufferManager.Flush">
            <summary>
            Queues any data lingering in current write buffer into the read buffer
            queue, ready for client to read it.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectEtwProvider">
            <summary>
            Managed wrapper for ETW code.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.Provider">
            <summary>
            This is the core provider responsible for the reports.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.getSegmentationBegin">
            <summary>
            This is EventDescriptor for the GetSegmentationBegin event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.getSegmentationEnd">
            <summary>
            This is EventDescriptor for the GetSegmentationEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.processInputBufferBegin">
            <summary>
            This is EventDescriptor for the ProcessInputBufferBegin event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.processInputBufferEnd">
            <summary>
            This is EventDescriptor for the ProcessInputBufferEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.notifyFrameReadyStart">
            <summary>
            This is EventDescriptor for the NotifyFrameReadyStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.notifyFrameReadyEnd">
            <summary>
            This is EventDescriptor for the NotifyFrameReadyEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.processFrameStart">
            <summary>
            This is EventDescriptor for the ProcessFrameStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.processFrameEnd">
            <summary>
            This is EventDescriptor for the ProcessFrameEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.getSkeletonsBegin">
            <summary>
            This is EventDescriptor for the GetSkeletonsBegin event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.getSkeletonsEnd">
            <summary>
            This is EventDescriptor for the GetSkeletonsEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.unpackBayerStart">
            <summary>
            This is EventDescriptor for the UnpackBayerStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.unpackBayerEnd">
            <summary>
            This is EventDescriptor for the UnpackBayerEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.frameStart">
            <summary>
            This is EventDescriptor for the FrameStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.frameEnd">
            <summary>
            This is EventDescriptor for the FrameEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapDepthFrameToColorFrameStart">
            <summary>
            This is EventDescriptor for the MapDepthFrameToColorFrameStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapDepthFrameToColorFrameEnd">
            <summary>
            This is EventDescriptor for the MapDepthFrameToColorFrameEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapDepthToColorImagePointStart">
            <summary>
            This is EventDescriptor for the MapDepthToColorImagePointStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapDepthToColorImagePointEnd">
            <summary>
            This is EventDescriptor for the MapDepthToColorImagePointEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapSkeletonPointToColorStart">
            <summary>
            This is EventDescriptor for the MapSkeletonPointToColorStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapSkeletonPointToColorEnd">
            <summary>
            This is EventDescriptor for the MapSkeletonPointToColorEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapSkeletonPointToDepthStart">
            <summary>
            This is EventDescriptor for the MapSkeletonPointToDepthStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapSkeletonPointToDepthEnd">
            <summary>
            This is EventDescriptor for the MapSkeletonPointToDepthEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapDepthToSkeletonPointStart">
            <summary>
            This is EventDescriptor for the MapDepthToSkeletonPointStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapDepthToSkeletonPointEnd">
            <summary>
            This is EventDescriptor for the MapDepthToSkeletonPointEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedNuiTransformDepthImageToSkeletonStart">
            <summary>
            This is EventDescriptor for the ManagedNuiTransformDepthImageToSkeletonStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedNuiTransformDepthImageToSkeletonEnd">
            <summary>
            This is EventDescriptor for the ManagedNuiTransformDepthImageToSkeletonEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedNuiTransformSkeletonToDepthImageStart">
            <summary>
            This is EventDescriptor for the ManagedNuiTransformSkeletonToDepthImageStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedNuiTransformSkeletonToDepthImageEnd">
            <summary>
            This is EventDescriptor for the ManagedNuiTransformSkeletonToDepthImageEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageGetColorPixelCoordinatesFromDepthPixelAtResolutionStart">
            <summary>
            This is EventDescriptor for the NuiImageGetColorPixelCoordinatesFromDepthPixelAtResolutionStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageGetColorPixelCoordinatesFromDepthPixelAtResolutionEnd">
            <summary>
            This is EventDescriptor for the NuiImageGetColorPixelCoordinatesFromDepthPixelAtResolutionEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolutionStart">
            <summary>
            This is EventDescriptor for the NuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolutionStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolutionEnd">
            <summary>
            This is EventDescriptor for the NuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolutionEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamOpenStart">
            <summary>
            This is EventDescriptor for the NuiImageStreamOpenStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamOpenEnd">
            <summary>
            This is EventDescriptor for the NuiImageStreamOpenEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamGetNextFrameStart">
            <summary>
            This is EventDescriptor for the NuiImageStreamGetNextFrameStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamGetNextFrameEnd">
            <summary>
            This is EventDescriptor for the NuiImageStreamGetNextFrameEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamReleaseFrameStart">
            <summary>
            This is EventDescriptor for the NuiImageStreamReleaseFrameStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamReleaseFrameEnd">
            <summary>
            This is EventDescriptor for the NuiImageStreamReleaseFrameEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiInitializeStart">
            <summary>
            This is EventDescriptor for the NuiInitializeStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiInitializeEnd">
            <summary>
            This is EventDescriptor for the NuiInitializeEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.allFramesReady">
            <summary>
            This is EventDescriptor for the AllFramesReady event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.colorFrameReady">
            <summary>
            This is EventDescriptor for the ColorFrameReady event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.depthFrameReady">
            <summary>
            This is EventDescriptor for the DepthFrameReady event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonFrameReady">
            <summary>
            This is EventDescriptor for the SkeletonFrameReady event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.stopDeviceStart">
            <summary>
            This is EventDescriptor for the StopDeviceStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.stopDeviceEnd">
            <summary>
            This is EventDescriptor for the StopDeviceEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.singleStreamStopStart">
            <summary>
            This is EventDescriptor for the SingleStreamStopStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.singleStreamStopEnd">
            <summary>
            This is EventDescriptor for the SingleStreamStopEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.detectGenuineDeviceStart">
            <summary>
            This is EventDescriptor for the DetectGenuineDeviceStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.detectGenuineDeviceEnd">
            <summary>
            This is EventDescriptor for the DetectGenuineDeviceEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.createDeviceStart">
            <summary>
            This is EventDescriptor for the CreateDeviceStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.createDeviceEnd">
            <summary>
            This is EventDescriptor for the CreateDeviceEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.reEnumerateDevicesStart">
            <summary>
            This is EventDescriptor for the ReEnumerateDevicesStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.reEnumerateDevicesEnd">
            <summary>
            This is EventDescriptor for the ReEnumerateDevicesEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.outputStreamInitStart">
            <summary>
            This is EventDescriptor for the OutputStreamInitStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.outputStreamInitEnd">
            <summary>
            This is EventDescriptor for the OutputStreamInitEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.singleStreamStartStart">
            <summary>
            This is EventDescriptor for the SingleStreamStartStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.singleStreamStartEnd">
            <summary>
            This is EventDescriptor for the SingleStreamStartEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletalTrackerInitializeStart">
            <summary>
            This is EventDescriptor for the SkeletalTrackerInitializeStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletalTrackerInitializeEnd">
            <summary>
            This is EventDescriptor for the SkeletalTrackerInitializeEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.kinectSensorInitializeStart">
            <summary>
            This is EventDescriptor for the KinectSensorInitializeStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.kinectSensorInitializeEnd">
            <summary>
            This is EventDescriptor for the KinectSensorInitializeEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageBGRStart">
            <summary>
            This is EventDescriptor for the SkeletonStageBGRStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageBGREnd">
            <summary>
            This is EventDescriptor for the SkeletonStageBGREnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageCDRPStart">
            <summary>
            This is EventDescriptor for the SkeletonStageCDRPStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageCDRPEnd">
            <summary>
            This is EventDescriptor for the SkeletonStageCDRPEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageHeadDetectorStart">
            <summary>
            This is EventDescriptor for the SkeletonStageHeadDetectorStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageHeadDetectorEnd">
            <summary>
            This is EventDescriptor for the SkeletonStageHeadDetectorEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageExemplarStart">
            <summary>
            This is EventDescriptor for the SkeletonStageExemplarStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageExemplarEnd">
            <summary>
            This is EventDescriptor for the SkeletonStageExemplarEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageCentroidsStart">
            <summary>
            This is EventDescriptor for the SkeletonStageCentroidsStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageCentroidsEnd">
            <summary>
            This is EventDescriptor for the SkeletonStageCentroidsEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageModelFittingStart">
            <summary>
            This is EventDescriptor for the SkeletonStageModelFittingStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.skeletonStageModelFittingEnd">
            <summary>
            This is EventDescriptor for the SkeletonStageModelFittingEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.frameRequestDropped">
            <summary>
            This is EventDescriptor for the FrameRequestDropped event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.unexpectedFrameRequestError">
            <summary>
            This is EventDescriptor for the UnexpectedFrameRequestError event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.frameStateChanged">
            <summary>
            This is EventDescriptor for the FrameStateChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.frameDropped">
            <summary>
            This is EventDescriptor for the FrameDropped event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiInitializeInfo">
            <summary>
            This is EventDescriptor for the NuiInitializeInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamOpenInfo">
            <summary>
            This is EventDescriptor for the NuiImageStreamOpenInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiShutdownTrace">
            <summary>
            This is EventDescriptor for the NuiShutdownTrace event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.internalNuiShutdownTrace">
            <summary>
            This is EventDescriptor for the InternalNuiShutdownTrace event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiSkeletonTrackingEnableTrace">
            <summary>
            This is EventDescriptor for the NuiSkeletonTrackingEnableTrace event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiSkeletonTrackingDisableTrace">
            <summary>
            This is EventDescriptor for the NuiSkeletonTrackingDisableTrace event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiTransformSmoothInfo">
            <summary>
            This is EventDescriptor for the NuiTransformSmoothInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiSkeletonSetTrackedSkeletonsInfo">
            <summary>
            This is EventDescriptor for the NuiSkeletonSetTrackedSkeletonsInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiSetFrameEndEventInfo">
            <summary>
            This is EventDescriptor for the NuiSetFrameEndEventInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamGetNextFrameInfo">
            <summary>
            This is EventDescriptor for the NuiImageStreamGetNextFrameInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiSkeletonGetNextFrameInfo">
            <summary>
            This is EventDescriptor for the NuiSkeletonGetNextFrameInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiDeviceConnectionIdInfo">
            <summary>
            This is EventDescriptor for the NuiDeviceConnectionIdInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiUniqueIdInfo">
            <summary>
            This is EventDescriptor for the NuiUniqueIdInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiCreateSensorByIndexInfo">
            <summary>
            This is EventDescriptor for the NuiCreateSensorByIndexInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiCreateSensorByIdInfo">
            <summary>
            This is EventDescriptor for the NuiCreateSensorByIdInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiImageStreamSetImageFrameFlagsInfo">
            <summary>
            This is EventDescriptor for the NuiImageStreamSetImageFrameFlagsInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiAudioBeamGetBeamInfo">
            <summary>
            This is EventDescriptor for the NuiAudioBeamGetBeamInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiAudioBeamGetPositionInfo">
            <summary>
            This is EventDescriptor for the NuiAudioBeamGetPositionInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiAudioBeamSetBeamInfo">
            <summary>
            This is EventDescriptor for the NuiAudioBeamSetBeamInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.nuiGetAudioSourceInfo">
            <summary>
            This is EventDescriptor for the NuiGetAudioSourceInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.audioDmoSetPropertyInfo">
            <summary>
            This is EventDescriptor for the AudioDmoSetPropertyInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedKinectSensorStartInfo">
            <summary>
            This is EventDescriptor for the ManagedKinectSensorStartInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedImageStreamDisabledInfo">
            <summary>
            This is EventDescriptor for the ManagedImageStreamDisabledInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedFrameReadyEventAddedInfo">
            <summary>
            This is EventDescriptor for the ManagedFrameReadyEventAddedInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedFrameReadyEventRemovedInfo">
            <summary>
            This is EventDescriptor for the ManagedFrameReadyEventRemovedInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedOpenNextFrameInfo">
            <summary>
            This is EventDescriptor for the ManagedOpenNextFrameInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedOpenFrameFromEventInfo">
            <summary>
            This is EventDescriptor for the ManagedOpenFrameFromEventInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedOpenFrameFromAllFramesEventInfo">
            <summary>
            This is EventDescriptor for the ManagedOpenFrameFromAllFramesEventInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedAllFramesReadyEventAddedInfo">
            <summary>
            This is EventDescriptor for the ManagedAllFramesReadyEventAddedInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.managedAllFramesReadyEventRemovedInfo">
            <summary>
            This is EventDescriptor for the ManagedAllFramesReadyEventRemovedInfo event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapColorFrameToDepthFrameStart">
            <summary>
            This is EventDescriptor for the MapColorFrameToDepthFrameStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapColorFrameToDepthFrameEnd">
            <summary>
            This is EventDescriptor for the MapColorFrameToDepthFrameEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapColorFrameToDepthFrame_InterpolateGapsStart">
            <summary>
            This is EventDescriptor for the MapColorFrameToDepthFrame_InterpolateGapsStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapColorFrameToDepthFrame_InterpolateGapsEnd">
            <summary>
            This is EventDescriptor for the MapColorFrameToDepthFrame_InterpolateGapsEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapColorFrameToSkeletonFrameStart">
            <summary>
            This is EventDescriptor for the MapColorFrameToSkeletonFrameStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapColorFrameToSkeletonFrameEnd">
            <summary>
            This is EventDescriptor for the MapColorFrameToSkeletonFrameEnd event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapDepthFrameToSkeletonFrameStart">
            <summary>
            This is EventDescriptor for the MapDepthFrameToSkeletonFrameStart event.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectEtwProvider.mapDepthFrameToSkeletonFrameEnd">
            <summary>
            This is EventDescriptor for the MapDepthFrameToSkeletonFrameEnd event.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.#cctor">
            <summary>
            Initializes static members of the KinectEtwProvider class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteGetSegmentationBegin(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for GetSegmentationBegin.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteGetSegmentationEnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for GetSegmentationEnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteProcessInputBufferBegin">
            <summary>
            This is the event method for ProcessInputBufferBegin.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteProcessInputBufferEnd">
            <summary>
            This is the event method for ProcessInputBufferEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNotifyFrameReadyStart(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for NotifyFrameReadyStart.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNotifyFrameReadyEnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for NotifyFrameReadyEnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteProcessFrameStart(System.IntPtr,System.UInt32)">
            <summary>
            This is the event method for ProcessFrameStart.
            </summary>
            <param name="frameOverlapId">The frameOverlapId parameter.</param>
            <param name="streamId">The streamId parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteProcessFrameEnd(System.IntPtr,System.UInt32)">
            <summary>
            This is the event method for ProcessFrameEnd.
            </summary>
            <param name="frameOverlapId">The frameOverlapId parameter.</param>
            <param name="streamId">The streamId parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteGetSkeletonsBegin(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for GetSkeletonsBegin.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteGetSkeletonsEnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for GetSkeletonsEnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteUnpackBayerStart">
            <summary>
            This is the event method for UnpackBayerStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteUnpackBayerEnd">
            <summary>
            This is the event method for UnpackBayerEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteFrameStart(System.UInt32,System.Int32,System.Int32)">
            <summary>
            This is the event method for FrameStart.
            </summary>
            <param name="streamType">The streamType parameter.</param>
            <param name="bufferIndex">The bufferIndex parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteFrameEnd(System.UInt32,System.Int32,System.Int32)">
            <summary>
            This is the event method for FrameEnd.
            </summary>
            <param name="streamType">The streamType parameter.</param>
            <param name="bufferIndex">The bufferIndex parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapDepthFrameToColorFrameStart">
            <summary>
            This is the event method for MapDepthFrameToColorFrameStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapDepthFrameToColorFrameEnd">
            <summary>
            This is the event method for MapDepthFrameToColorFrameEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapDepthToColorImagePointStart">
            <summary>
            This is the event method for MapDepthToColorImagePointStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapDepthToColorImagePointEnd">
            <summary>
            This is the event method for MapDepthToColorImagePointEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapSkeletonPointToColorStart">
            <summary>
            This is the event method for MapSkeletonPointToColorStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapSkeletonPointToColorEnd">
            <summary>
            This is the event method for MapSkeletonPointToColorEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapSkeletonPointToDepthStart">
            <summary>
            This is the event method for MapSkeletonPointToDepthStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapSkeletonPointToDepthEnd">
            <summary>
            This is the event method for MapSkeletonPointToDepthEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapDepthToSkeletonPointStart">
            <summary>
            This is the event method for MapDepthToSkeletonPointStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapDepthToSkeletonPointEnd">
            <summary>
            This is the event method for MapDepthToSkeletonPointEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedNuiTransformDepthImageToSkeletonStart">
            <summary>
            This is the event method for ManagedNuiTransformDepthImageToSkeletonStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedNuiTransformDepthImageToSkeletonEnd">
            <summary>
            This is the event method for ManagedNuiTransformDepthImageToSkeletonEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedNuiTransformSkeletonToDepthImageStart">
            <summary>
            This is the event method for ManagedNuiTransformSkeletonToDepthImageStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedNuiTransformSkeletonToDepthImageEnd">
            <summary>
            This is the event method for ManagedNuiTransformSkeletonToDepthImageEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageGetColorPixelCoordinatesFromDepthPixelAtResolutionStart">
            <summary>
            This is the event method for NuiImageGetColorPixelCoordinatesFromDepthPixelAtResolutionStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageGetColorPixelCoordinatesFromDepthPixelAtResolutionEnd">
            <summary>
            This is the event method for NuiImageGetColorPixelCoordinatesFromDepthPixelAtResolutionEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolutionStart">
            <summary>
            This is the event method for NuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolutionStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolutionEnd">
            <summary>
            This is the event method for NuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolutionEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamOpenStart">
            <summary>
            This is the event method for NuiImageStreamOpenStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamOpenEnd">
            <summary>
            This is the event method for NuiImageStreamOpenEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamGetNextFrameStart">
            <summary>
            This is the event method for NuiImageStreamGetNextFrameStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamGetNextFrameEnd">
            <summary>
            This is the event method for NuiImageStreamGetNextFrameEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamReleaseFrameStart">
            <summary>
            This is the event method for NuiImageStreamReleaseFrameStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamReleaseFrameEnd">
            <summary>
            This is the event method for NuiImageStreamReleaseFrameEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiInitializeStart">
            <summary>
            This is the event method for NuiInitializeStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiInitializeEnd">
            <summary>
            This is the event method for NuiInitializeEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteAllFramesReady(System.Int64,System.Int64,System.Int64)">
            <summary>
            This is the event method for AllFramesReady.
            </summary>
            <param name="colorFrameTimestamp">The colorFrameTimestamp parameter.</param>
            <param name="depthFrameTimestamp">The depthFrameTimestamp parameter.</param>
            <param name="skeletonFrameTimestamp">The skeletonFrameTimestamp parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteColorFrameReady(System.Int64)">
            <summary>
            This is the event method for ColorFrameReady.
            </summary>
            <param name="timestamp">The timestamp parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteDepthFrameReady(System.Int64)">
            <summary>
            This is the event method for DepthFrameReady.
            </summary>
            <param name="timestamp">The timestamp parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonFrameReady(System.Int64)">
            <summary>
            This is the event method for SkeletonFrameReady.
            </summary>
            <param name="timestamp">The timestamp parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteStopDeviceStart">
            <summary>
            This is the event method for StopDeviceStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteStopDeviceEnd">
            <summary>
            This is the event method for StopDeviceEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSingleStreamStopStart(System.UInt32)">
            <summary>
            This is the event method for SingleStreamStopStart.
            </summary>
            <param name="streamType">The streamType parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSingleStreamStopEnd">
            <summary>
            This is the event method for SingleStreamStopEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteDetectGenuineDeviceStart">
            <summary>
            This is the event method for DetectGenuineDeviceStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteDetectGenuineDeviceEnd">
            <summary>
            This is the event method for DetectGenuineDeviceEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteCreateDeviceStart">
            <summary>
            This is the event method for CreateDeviceStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteCreateDeviceEnd">
            <summary>
            This is the event method for CreateDeviceEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteReEnumerateDevicesStart">
            <summary>
            This is the event method for ReEnumerateDevicesStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteReEnumerateDevicesEnd">
            <summary>
            This is the event method for ReEnumerateDevicesEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteOutputStreamInitStart">
            <summary>
            This is the event method for OutputStreamInitStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteOutputStreamInitEnd">
            <summary>
            This is the event method for OutputStreamInitEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSingleStreamStartStart(System.UInt32)">
            <summary>
            This is the event method for SingleStreamStartStart.
            </summary>
            <param name="streamType">The streamType parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSingleStreamStartEnd">
            <summary>
            This is the event method for SingleStreamStartEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletalTrackerInitializeStart">
            <summary>
            This is the event method for SkeletalTrackerInitializeStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletalTrackerInitializeEnd">
            <summary>
            This is the event method for SkeletalTrackerInitializeEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteKinectSensorInitializeStart">
            <summary>
            This is the event method for KinectSensorInitializeStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteKinectSensorInitializeEnd">
            <summary>
            This is the event method for KinectSensorInitializeEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageBGRStart(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageBGRStart.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageBGREnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageBGREnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageCDRPStart(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageCDRPStart.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageCDRPEnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageCDRPEnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageHeadDetectorStart(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageHeadDetectorStart.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageHeadDetectorEnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageHeadDetectorEnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageExemplarStart(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageExemplarStart.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageExemplarEnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageExemplarEnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageCentroidsStart(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageCentroidsStart.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageCentroidsEnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageCentroidsEnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageModelFittingStart(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageModelFittingStart.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteSkeletonStageModelFittingEnd(System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This is the event method for SkeletonStageModelFittingEnd.
            </summary>
            <param name="streamId">The streamId parameter.</param>
            <param name="width">The width parameter.</param>
            <param name="height">The height parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteFrameRequestDropped">
            <summary>
            This is the event method for FrameRequestDropped.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteUnexpectedFrameRequestError">
            <summary>
            This is the event method for UnexpectedFrameRequestError.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteFrameStateChanged(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            This is the event method for FrameStateChanged.
            </summary>
            <param name="streamType">The streamType parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <param name="state">The state parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteFrameDropped(System.UInt32,System.Int32)">
            <summary>
            This is the event method for FrameDropped.
            </summary>
            <param name="streamType">The streamType parameter.</param>
            <param name="frameNumber">The frameNumber parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiInitializeInfo(System.String,System.String,System.UInt32)">
            <summary>
            This is the event method for NuiInitializeInfo.
            </summary>
            <param name="deviceId">The deviceId parameter.</param>
            <param name="processName">The processName parameter.</param>
            <param name="flags">The flags parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamOpenInfo(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            This is the event method for NuiImageStreamOpenInfo.
            </summary>
            <param name="hStream">The hStream parameter.</param>
            <param name="imageType">The imageType parameter.</param>
            <param name="imageResolution">The imageResolution parameter.</param>
            <param name="imageFrameFlags">The imageFrameFlags parameter.</param>
            <param name="hNextFrameEvent">The hNextFrameEvent parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiShutdownTrace">
            <summary>
            This is the event method for NuiShutdownTrace.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteInternalNuiShutdownTrace">
            <summary>
            This is the event method for InternalNuiShutdownTrace.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiSkeletonTrackingEnableTrace(System.IntPtr,System.UInt32)">
            <summary>
            This is the event method for NuiSkeletonTrackingEnableTrace.
            </summary>
            <param name="hNextFrameEvent">The hNextFrameEvent parameter.</param>
            <param name="dwFlags">The dwFlags parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiSkeletonTrackingDisableTrace">
            <summary>
            This is the event method for NuiSkeletonTrackingDisableTrace.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiTransformSmoothInfo(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This is the event method for NuiTransformSmoothInfo.
            </summary>
            <param name="smoothing">The smoothing parameter.</param>
            <param name="correction">The correction parameter.</param>
            <param name="prediction">The prediction parameter.</param>
            <param name="jitterRadius">The jitterRadius parameter.</param>
            <param name="maxDeviationRadius">The maxDeviationRadius parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiSkeletonSetTrackedSkeletonsInfo(System.UInt32,System.UInt32)">
            <summary>
            This is the event method for NuiSkeletonSetTrackedSkeletonsInfo.
            </summary>
            <param name="skeleton1">The skeleton1 parameter.</param>
            <param name="skeleton2">The skeleton2 parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiSetFrameEndEventInfo(System.IntPtr,System.UInt32)">
            <summary>
            This is the event method for NuiSetFrameEndEventInfo.
            </summary>
            <param name="hEvent">The hEvent parameter.</param>
            <param name="dwFrameEventFlag">The dwFrameEventFlag parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamGetNextFrameInfo(System.IntPtr,System.UInt32)">
            <summary>
            This is the event method for NuiImageStreamGetNextFrameInfo.
            </summary>
            <param name="hStream">The hStream parameter.</param>
            <param name="dwMillisecondsToWait">The dwMillisecondsToWait parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiSkeletonGetNextFrameInfo(System.UInt32)">
            <summary>
            This is the event method for NuiSkeletonGetNextFrameInfo.
            </summary>
            <param name="dwMillisecondsToWait">The dwMillisecondsToWait parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiDeviceConnectionIdInfo(System.String)">
            <summary>
            This is the event method for NuiDeviceConnectionIdInfo.
            </summary>
            <param name="kinectId">The kinectId parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiUniqueIdInfo(System.String)">
            <summary>
            This is the event method for NuiUniqueIdInfo.
            </summary>
            <param name="kinectId">The kinectId parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiCreateSensorByIndexInfo(System.Int32)">
            <summary>
            This is the event method for NuiCreateSensorByIndexInfo.
            </summary>
            <param name="index">The index parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiCreateSensorByIdInfo(System.String)">
            <summary>
            This is the event method for NuiCreateSensorByIdInfo.
            </summary>
            <param name="strInstanceId">The strInstanceId parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiImageStreamSetImageFrameFlagsInfo(System.IntPtr,System.UInt32)">
            <summary>
            This is the event method for NuiImageStreamSetImageFrameFlagsInfo.
            </summary>
            <param name="hStream">The hStream parameter.</param>
            <param name="dwImageFrameFlags">The dwImageFrameFlags parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiAudioBeamGetBeamInfo(System.Double)">
            <summary>
            This is the event method for NuiAudioBeamGetBeamInfo.
            </summary>
            <param name="dAngle">The dAngle parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiAudioBeamGetPositionInfo(System.Double)">
            <summary>
            This is the event method for NuiAudioBeamGetPositionInfo.
            </summary>
            <param name="dAngle">The dAngle parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiAudioBeamSetBeamInfo(System.Double)">
            <summary>
            This is the event method for NuiAudioBeamSetBeamInfo.
            </summary>
            <param name="dAngle">The dAngle parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteNuiGetAudioSourceInfo">
            <summary>
            This is the event method for NuiGetAudioSourceInfo.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteAudioDmoSetPropertyInfo(System.UInt32,System.UInt32)">
            <summary>
            This is the event method for AudioDmoSetPropertyInfo.
            </summary>
            <param name="pid">The pid parameter.</param>
            <param name="value">The value parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedKinectSensorStartInfo(System.String)">
            <summary>
            This is the event method for ManagedKinectSensorStartInfo.
            </summary>
            <param name="deviceID">The deviceID parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedImageStreamDisabledInfo(System.Int32)">
            <summary>
            This is the event method for ManagedImageStreamDisabledInfo.
            </summary>
            <param name="type">The type parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedFrameReadyEventAddedInfo(System.Int32)">
            <summary>
            This is the event method for ManagedFrameReadyEventAddedInfo.
            </summary>
            <param name="type">The type parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedFrameReadyEventRemovedInfo(System.Int32)">
            <summary>
            This is the event method for ManagedFrameReadyEventRemovedInfo.
            </summary>
            <param name="type">The type parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedOpenNextFrameInfo(System.Int32,System.Int32)">
            <summary>
            This is the event method for ManagedOpenNextFrameInfo.
            </summary>
            <param name="streamType">The streamType parameter.</param>
            <param name="millisecondsWait">The millisecondsWait parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedOpenFrameFromEventInfo(System.Int32)">
            <summary>
            This is the event method for ManagedOpenFrameFromEventInfo.
            </summary>
            <param name="type">The type parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedOpenFrameFromAllFramesEventInfo(System.Int32)">
            <summary>
            This is the event method for ManagedOpenFrameFromAllFramesEventInfo.
            </summary>
            <param name="type">The type parameter.</param>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedAllFramesReadyEventAddedInfo">
            <summary>
            This is the event method for ManagedAllFramesReadyEventAddedInfo.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteManagedAllFramesReadyEventRemovedInfo">
            <summary>
            This is the event method for ManagedAllFramesReadyEventRemovedInfo.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapColorFrameToDepthFrameStart">
            <summary>
            This is the event method for MapColorFrameToDepthFrameStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapColorFrameToDepthFrameEnd">
            <summary>
            This is the event method for MapColorFrameToDepthFrameEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapColorFrameToDepthFrame_InterpolateGapsStart">
            <summary>
            This is the event method for MapColorFrameToDepthFrame_InterpolateGapsStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapColorFrameToDepthFrame_InterpolateGapsEnd">
            <summary>
            This is the event method for MapColorFrameToDepthFrame_InterpolateGapsEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapColorFrameToSkeletonFrameStart">
            <summary>
            This is the event method for MapColorFrameToSkeletonFrameStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapColorFrameToSkeletonFrameEnd">
            <summary>
            This is the event method for MapColorFrameToSkeletonFrameEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapDepthFrameToSkeletonFrameStart">
            <summary>
            This is the event method for MapDepthFrameToSkeletonFrameStart.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectEtwProvider.EventWriteMapDepthFrameToSkeletonFrameEnd">
            <summary>
            This is the event method for MapDepthFrameToSkeletonFrameEnd.
            </summary>
            <returns>This method returns true if succeeded, and false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Kinect.EventProviderVersionTwo">
            <summary>
            This is a local wrapper for the EventProvider.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the EventProviderVersionTwo class.
            </summary>
            <param name="id">The guid of the provider.</param>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateEventDescriptor(System.Diagnostics.Eventing.EventDescriptor@)">
            <summary>
            This method determines if it needs to write the event.
            </summary>
            <param name="eventDescriptor">The event description to write.</param>
            <returns>This returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateFrameData(System.Diagnostics.Eventing.EventDescriptor@,System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the FrameData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="streamId">The value for the streamId parameter.</param>
            <param name="width">The value for the width parameter.</param>
            <param name="height">The value for the height parameter.</param>
            <param name="frameNumber">The value for the frameNumber parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateProcessFrameData(System.Diagnostics.Eventing.EventDescriptor@,System.IntPtr,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the ProcessFrameData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="frameOverlapId">The value for the frameOverlapId parameter.</param>
            <param name="streamId">The value for the streamId parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateFrameLifecycleData(System.Diagnostics.Eventing.EventDescriptor@,System.UInt32,System.Int32,System.Int32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the FrameLifecycleData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="streamType">The value for the streamType parameter.</param>
            <param name="bufferIndex">The value for the bufferIndex parameter.</param>
            <param name="frameNumber">The value for the frameNumber parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateAllFramesReadyData(System.Diagnostics.Eventing.EventDescriptor@,System.Int64,System.Int64,System.Int64)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the AllFramesReadyData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="colorFrameTimestamp">The value for the colorFrameTimestamp parameter.</param>
            <param name="depthFrameTimestamp">The value for the depthFrameTimestamp parameter.</param>
            <param name="skeletonFrameTimestamp">The value for the skeletonFrameTimestamp parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateFrameReadyData(System.Diagnostics.Eventing.EventDescriptor@,System.Int64)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the FrameReadyData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="timestamp">The value for the timestamp parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateStreamTypeOnly(System.Diagnostics.Eventing.EventDescriptor@,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the StreamTypeOnly template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="streamType">The value for the streamType parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateFrameStateData(System.Diagnostics.Eventing.EventDescriptor@,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the FrameStateData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="streamType">The value for the streamType parameter.</param>
            <param name="frameNumber">The value for the frameNumber parameter.</param>
            <param name="state">The value for the state parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateFrameDroppedData(System.Diagnostics.Eventing.EventDescriptor@,System.UInt32,System.Int32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the FrameDroppedData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="streamType">The value for the streamType parameter.</param>
            <param name="frameNumber">The value for the frameNumber parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiImageStreamOpenData(System.Diagnostics.Eventing.EventDescriptor@,System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiImageStreamOpenData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="hStream">The value for the hStream parameter.</param>
            <param name="imageType">The value for the imageType parameter.</param>
            <param name="imageResolution">The value for the imageResolution parameter.</param>
            <param name="imageFrameFlags">The value for the imageFrameFlags parameter.</param>
            <param name="hNextFrameEvent">The value for the hNextFrameEvent parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiInitializeData(System.Diagnostics.Eventing.EventDescriptor@,System.String,System.String,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiInitializeData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="deviceId">The value for the deviceId parameter.</param>
            <param name="processName">The value for the processName parameter.</param>
            <param name="flags">The value for the flags parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiSkeletonTrackingData(System.Diagnostics.Eventing.EventDescriptor@,System.IntPtr,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiSkeletonTrackingData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="hNextFrameEvent">The value for the hNextFrameEvent parameter.</param>
            <param name="dwFlags">The value for the dwFlags parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiTransformSmoothParams(System.Diagnostics.Eventing.EventDescriptor@,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiTransformSmoothParams template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="smoothing">The value for the smoothing parameter.</param>
            <param name="correction">The value for the correction parameter.</param>
            <param name="prediction">The value for the prediction parameter.</param>
            <param name="jitterRadius">The value for the jitterRadius parameter.</param>
            <param name="maxDeviationRadius">The value for the maxDeviationRadius parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiSkeletonSetTrackedSkeletonsData(System.Diagnostics.Eventing.EventDescriptor@,System.UInt32,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiSkeletonSetTrackedSkeletonsData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="skeleton1">The value for the skeleton1 parameter.</param>
            <param name="skeleton2">The value for the skeleton2 parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiSetFrameEndEventData(System.Diagnostics.Eventing.EventDescriptor@,System.IntPtr,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiSetFrameEndEventData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="hEvent">The value for the hEvent parameter.</param>
            <param name="dwFrameEventFlag">The value for the dwFrameEventFlag parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiImageStreamGetNextFrameData(System.Diagnostics.Eventing.EventDescriptor@,System.IntPtr,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiImageStreamGetNextFrameData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="hStream">The value for the hStream parameter.</param>
            <param name="dwMillisecondsToWait">The value for the dwMillisecondsToWait parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiSkeletonGetNextFrameData(System.Diagnostics.Eventing.EventDescriptor@,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiSkeletonGetNextFrameData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="dwMillisecondsToWait">The value for the dwMillisecondsToWait parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateKinectIdStringData(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the KinectIdStringData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="kinectId">The value for the kinectId parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiCreateSensorByIndexData(System.Diagnostics.Eventing.EventDescriptor@,System.Int32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiCreateSensorByIndexData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="index">The value for the index parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiCreateSensorByIdData(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiCreateSensorByIdData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="strInstanceId">The value for the strInstanceId parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateNuiImageStreamSetImageFrameFlagsData(System.Diagnostics.Eventing.EventDescriptor@,System.IntPtr,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the NuiImageStreamSetImageFrameFlagsData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="hStream">The value for the hStream parameter.</param>
            <param name="dwImageFrameFlags">The value for the dwImageFrameFlags parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateAudioAngleData(System.Diagnostics.Eventing.EventDescriptor@,System.Double)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the AudioAngleData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="dAngle">The value for the dAngle parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateAudioPropertyData(System.Diagnostics.Eventing.EventDescriptor@,System.UInt32,System.UInt32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the AudioPropertyData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="pid">The value for the pid parameter.</param>
            <param name="value">The value for the value parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateManagedFramesReadyRegistrationData(System.Diagnostics.Eventing.EventDescriptor@,System.Int32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the ManagedFramesReadyRegistrationData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="type">The value for the type parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateManagedImageStreamData(System.Diagnostics.Eventing.EventDescriptor@,System.Int32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the ManagedImageStreamData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="type">The value for the type parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateManagedOpenNextFrameData(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.Int32)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the ManagedOpenNextFrameData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="streamType">The value for the streamType parameter.</param>
            <param name="millisecondsWait">The value for the millisecondsWait parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.EventProviderVersionTwo.TemplateKinectSensorStartData(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
            <summary>
            This method is a wrapper to marshal the data into the event
            for the KinectSensorStartData template.
            </summary>
            <param name="eventDescriptor">The event description.</param>
            <param name="deviceID">The value for the deviceID parameter.</param>
            <returns>This method returns true if successful, and false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Kinect.EventProviderVersionTwo.EventData">
            <summary>
            This struct is used to marshal data into the native ETW service.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.EventProviderVersionTwo.EventData.DataPointer">
            <summary>
            The event data's data pointer.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.EventProviderVersionTwo.EventData.Size">
            <summary>
            The event data size.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.EventProviderVersionTwo.EventData.Reserved">
            <summary>
            This field is reserverd.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.NuiDepthFilter">
            <summary>
            Wrapper of a native filter to be applied to depth frame data.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiDepthFilter.ProcessFrame(System.Int64,System.Int32,System.Int32,Microsoft.Kinect.DepthImagePixel[])">
            <summary>
            Processes a frame of depth data.
            </summary>
            <param name="timestamp">Timestamp of the depth frame.</param>
            <param name="width">Width of the depth frame, in pixels.</param>
            <param name="height">Height of the depth frame, in pixels.</param>
            <param name="pixelData">Depth frame data.</param>
            <returns>true if the depth frame was modified; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.NuiDepthFilter.NativeObject">
            <summary>
            Gets or sets the native depth filter interface.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.BadIndex">
            <summary>
              Looks up a localized string similar to A bad index or id was used when referencing a Kinect sensor..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.CannotPollAndUseEvents">
            <summary>
              Looks up a localized string similar to This API cannot be called when an event listener has been set..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.CaptureAlreadyStarted">
            <summary>
              Looks up a localized string similar to The capture has already been started.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.CaptureNotStarted">
            <summary>
              Looks up a localized string similar to The capture has not been started.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.ColorStreamMustBeEnabled">
            <summary>
              Looks up a localized string similar to The Color Stream must be Enabled to get next Color image frame. Call KinectSensor.ColorStream.Enable().
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.DepthFilterMustImplementNativeInterface">
            <summary>
              Looks up a localized string similar to Depth filter must implement the native INuiDepthFilter interface.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.DepthStreamMustBeEnabled">
            <summary>
              Looks up a localized string similar to This Depth Stream must be Enabled to get next Depth image frame. Call KinectSensor.DepthStream.Enable().
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.DeviceNotGenuine">
            <summary>
              Looks up a localized string similar to The attached Kinect device is not genuine..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.DeviceNotSupported">
            <summary>
              Looks up a localized string similar to The attached Kinect device is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.ElevationIncorrect">
            <summary>
              Looks up a localized string similar to Elevation angle must be between Elevation Minimum/Maximum.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.FailedToGetDeviceName">
            <summary>
              Looks up a localized string similar to Native DLL failed in get device name.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.GenericException">
            <summary>
              Looks up a localized string similar to This API has returned an exception from an HRESULT: 0x{0:X}.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.HardwareFeatureUnavailable">
            <summary>
              Looks up a localized string similar to The feature is not supported by this version of the hardware.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.ImageFormatNotSupported">
            <summary>
              Looks up a localized string similar to The specified Image Format is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.ImageFrameNotDisposed">
            <summary>
              Looks up a localized string similar to Warning: An ImageFrame instance was not Disposed..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.IncorrectJointType">
            <summary>
              Looks up a localized string similar to JointType index value must match Joint.JointType.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.InvalidBeamAngleMode">
            <summary>
              Looks up a localized string similar to Unexpected value for BeamAngleMode.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.InvalidEchoCancellationMode">
            <summary>
              Looks up a localized string similar to Unexpected value for EchoCancellationMode.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.KinectInUse">
            <summary>
              Looks up a localized string similar to Kinect is already in use in another process..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.KinectMustBeRunning">
            <summary>
              Looks up a localized string similar to Kinect must be running to control the motor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.KinectNotReady">
            <summary>
              Looks up a localized string similar to Kinect is not ready.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.KinectNotSupportedDeveloper">
             <summary>
               Looks up a localized string similar to The Kinect sensor plugged into your computer is for use on the Xbox 360.
            You may continue using your Xbox 360 Kinect sensor on your computer for development purposes.
            Microsoft does not guarantee full compatibility for Kinect for Windows applications and the Xbox 360 Kinect Sensor..
             </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.KinectNotSupportedNonDeveloper">
             <summary>
               Looks up a localized string similar to The Kinect sensor plugged into your computer is for use on the Xbox 360.
            To run a Kinect for Windows application, you must plug in a Kinect for Windows sensor..
             </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.NativeStreamCantBeZero">
            <summary>
              Looks up a localized string similar to NativeStreamHandle can&apos;t be Zero.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.NeedFeatureMode">
            <summary>
              Looks up a localized string similar to Feature mode needs to be set to True before setting this property.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.NoDevicesFound">
            <summary>
              Looks up a localized string similar to Could not find a Kinect audio device.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.NotSupported">
            <summary>
              Looks up a localized string similar to The operation is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.PixelBufferIncorrectLength">
            <summary>
              Looks up a localized string similar to The data buffer length must match the length required by the associated ImageFormat..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.SensorMustBeRunning">
            <summary>
              Looks up a localized string similar to KinectSensor must be running to get next frame. Call KinectSensor.Start().
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.SensorMustBeRunningForAudio">
            <summary>
              Looks up a localized string similar to KinectSensor must be running in order to start audio stream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.SkeletonBufferIncorrectLength">
            <summary>
              Looks up a localized string similar to The data buffer must have length equal to SkeletonArrayLength..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.SkeletonEngineMustBeEnabled">
            <summary>
              Looks up a localized string similar to SkeletonEngine must be Enabled to get next skeleton frame. Call KinectSensor.SkeletonEngine.Enable().
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.SkeletonFrameNotDisposed">
            <summary>
              Looks up a localized string similar to Warning: A SkeletonFrame instance was not Disposed..
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.UnauthorizedAccess">
            <summary>
              Looks up a localized string similar to Could not access the hardware.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.UnexpectedDepthRange">
            <summary>
              Looks up a localized string similar to Unexpected depth range.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Resources.UnexpectedUniqueDeviceName">
            <summary>
              Looks up a localized string similar to Unexpected UniqueDeviceName format.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.StatusChangedEventArgs">
            <summary>
            Event data for the StatusChanged event.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.StatusChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the StatusChangedEventArgs class.
            <remarks>Internal ctor to prevent external creation.</remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.StatusChangedEventArgs.Status">
            <summary>
            Gets the reported status for the sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.StatusChangedEventArgs.Sensor">
            <summary>
            Gets the sensor that has changed status.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.InternalStatusChangedEventArgs">
            <summary>
            Internal class for arguments passed from NuiSensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.InternalStatusChangedEventArgs.DeviceConnectionId">
            <summary>
            Gets or sets the device instance id for the sensor hub.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.InternalStatusChangedEventArgs.UniqueKinectId">
            <summary>
            Gets or sets the device instance id for the sensor camera.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.InternalStatusChangedEventArgs.KinectStatus">
            <summary>
            Gets or sets the mapped status for the sensor.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectSensorCollection">
            <summary>
            Represents the collection of all Kinect&#x2122; sensors on the host.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensorCollection.s_sensorsLock">
            <summary>
            Lock for the sensor collection.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensorCollection.s_activeSensors">
            <summary>
            List of acitve sensors.
            <remarks>
            This must be a ThreadSafeList because the base class (ReadOnlyCollection) may want to access it while s_sensorsLock is locked.
            </remarks>
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensorCollection.s_instance">
            <summary>
            Static instance of this collection.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensorCollection._sensors">
            <summary>
            List of all sensors.  Not all are active.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensorCollection._nuiCallBackDelegate">
            <summary>
            Caches native callback delegate to ensure it does not get garbage collected.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensorCollection._statusChangedContextHandler">
            <summary>
            Called whenever a kinect changes status.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensorCollection.#ctor">
            <summary>
            Prevents a default instance of the KinectSensorCollection class from being created.
            Initializes a new instance of this collection.  
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensorCollection.Initialize">
            <summary>
            Singleton accessor or KinectSensorCollection.  Creates KinectSensor objects for all native INuiSensors.
            </summary>
            <returns>The singleton instance of this class.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensorCollection.OnNuiStatusCallback(System.Int32,System.String,System.String,System.IntPtr)">
            <summary>
            Callback function for getting status notifications from native.
            </summary>
            <param name="status">HRESULT status from the sensor.</param>
            <param name="instanceName">Sensor hub device instance id.</param>
            <param name="uniqueDeviceName">Sensor camera device instance id.  May be null.</param>
            <param name="pUserData">User data for the callback.  Always null for this callback.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensorCollection.NotifyUserKinectsStatusChanged(System.Object)">
            <summary>
            Fires the StatusChanged event.
            </summary>
            <param name="state">InternalStatusChangedEventArgs object.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensorCollection.UpdateActiveSensors">
            <summary>
            Updates the list of active sensors to contain all sensors that are connected.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensorCollection.RemakeSensor(Microsoft.Kinect.KinectSensor,System.String)">
            <summary>
            Removes a sensor from the list, allowing the sensor object to be recreated.
            </summary>
            <param name="sensor">KinectSensor to be removed.</param>
            <param name="name">Name of sensor to recreate.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensorCollection.Dispose">
            <summary>
            IDisposable.Dispose implementation.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensorCollection.Instance">
            <summary>
            Gets the static instance of this collection.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.KinectSensorCollection.StatusChanged">
            <summary>
            Called whenever a kinect changes status.  Sent from KinectSensorCollection.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensorCollection.Item(System.String)">
            <summary>
            Returns a sensor based on the DeviceConnectionId or UniqueKinectId.
            </summary>
            <param name="instanceId">Can pass in either the value from KinectSensor.DeviceConnectionId or KinectSensor.UniqueKinectId.</param>
            <returns>The sensor associated with the given id.</returns>
        </member>
        <member name="T:Microsoft.Kinect.ImageType">
            <summary>
            Keep in sync with _NUI_IMAGE_TYPE.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageType.DepthAndPlayerIndex">
            <summary>
            Depth and Player.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageType.Color">
            <summary>
            Color only.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageType.ColorYuv">
            <summary>
            Color in YUV format.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageType.ColorYuvRaw">
            <summary>
            Color in YUV RAW format.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageType.Depth">
            <summary>
            Depth only.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageType.ColorInfrared">
            <summary>
            Infrared only.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageType.ColorBayer">
            <summary>
            Color in 8-bit Bayer format.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ImageResolution">
            <summary>
            Keep in sync with _NUI_IMAGE_RESOLUTION.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageResolution.Invalid">
            <summary>
            Default or invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageResolution.Resolution80x60">
            <summary>
            80x60 resolution.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageResolution.Resolution320x240">
            <summary>
            320x240 resolution.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageResolution.Resolution640x480">
            <summary>
            640x480 resolution.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageResolution.Resolution1280x960">
            <summary>
            1280x960 resolution.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ImageFrameFlags">
            <summary>
            This MUST match the values defined in NUIImageCamera.h.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageFrameFlags.NUI_IMAGE_FRAME_FLAG_NONE">
            <summary>
            Empty value.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageFrameFlags.NUI_IMAGE_FRAME_FLAG_NEAR_MODE_ENABLED">
            <summary>
            Depth frame was captured in near mode.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ImageStreamFlags">
            <summary>
            This MUST match the values defined in NUIImageCamera.h.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageStreamFlags.NUI_IMAGE_STREAM_FLAG_NONE">
            <summary>
            Empty value.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageStreamFlags.NUI_IMAGE_STREAM_FLAG_SUPPRESS_NO_FRAME_DATA">
            <summary>
            Return S_FALSE instead of E_NUI_FRAME_NO_DATA if NuiImageStreamGetNextFrame( ) doesn't have a frame ready and a timeout != INFINITE is used.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageStreamFlags.NUI_IMAGE_STREAM_FLAG_ENABLE_NEAR_MODE">
            <summary>
            Set the depth stream to near mode.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageStreamFlags.NUI_IMAGE_STREAM_FLAG_DISTINCT_OVERFLOW_DEPTH_VALUES">
            <summary>
            Use distinct values for depth values that are either too close, too far or unknown.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ImageStream">
            <summary>
            The abstract ImageStream class.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.#ctor(Microsoft.Kinect.KinectSensor,Microsoft.Kinect.ImageStreamFlags)">
            <summary>
            Initializes a new instance of the ImageStream class.
            </summary>
            <param name="sensor">The related sensor.</param>
            <param name="imageStreamFlags">The ImageStreamFlags.</param>
        </member>
        <member name="F:Microsoft.Kinect.ImageStream.NextFrameEvent">
            <summary>
            Used to indicate of a new frame is ready.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageStream._capturing">
            <summary>
            Indicates of the stream is capturing.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageStream._nativeStreamHandle">
            <summary>
            The native stream handle.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageStream._imageStreamFlags">
            <summary>
            The current ImageStreamFlags.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ImageStream._nativeStreamInitLock">
            <summary>
            The lock object used for synchronizing access to the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.InternalEnable">
            <summary>
            Enable the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.Disable">
            <summary>
            Disable the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.Start">
            <summary>
            Starts the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.Stop">
            <summary>
            Stops the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.FillHeightWidth">
            <summary>
            Populates the FrameWidth and FrameHeight values.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.ResolutionToHeightWidth(Microsoft.Kinect.ImageResolution,System.Int32@,System.Int32@)">
            <summary>
            Sets the width and height based on the given resolution.
            </summary>
            <param name="resolution">The resolution.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.ImageTypeToBytesPerPixel(Microsoft.Kinect.ImageType)">
            <summary>
            Looks up the number of bytes per pixel.
            </summary>
            <param name="imageType">The image type.</param>
            <returns>The number of bytes per pixel.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.Open">
            <summary>
            Opens the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.StorePixels(System.Int32,Microsoft.Kinect.Interop._NUI_LOCKED_RECT,Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution,System.IntPtr,Microsoft.Kinect.Interop._NUI_IMAGE_FRAME@)">
            <summary>
            Override in base classes to store the pixel data during the window when it's available from 
            native code.  
            </summary>
            <param name="frameNumber">The frameNumber of the pixel data.</param>
            <param name="lockedRect">The native description of the pixel data.</param>
            <param name="imageType">The ImageType of the pixels.</param>
            <param name="resolution">The Resolution of the pixels.</param>
            <param name="nativeStreamHandle">The native stream handle.</param>
            <param name="pNativeFrame">The native image frame.</param>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.TryGetNextFrameInternal(System.Int32,System.Int32@,System.Int64@,Microsoft.Kinect.ImageFrameFlags@)">
            <summary>
            Retrieves the next frame from the sensor, and calls the abstract method "StorePixels" with the data, if present.
            This allows the derived ImageStream classes to store the data.
            </summary>
            <param name="millisecondsWait">Time to wait for a new frame from the sensor, in milliseconds.</param>
            <param name="frameNumber">The frameNumber of the new frame.</param>
            <param name="timestamp">The timestamp of the new frame.</param>
            <param name="frameFlags">The frame flags of the new frame.</param>
            <returns>Returns true if the new frame was available, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ImageStream.Dispose">
            <summary>
            Disposes the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.FrameWidth">
            <summary>
            Gets the width in pixels of each ImageFrame from this ImageStream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.FrameHeight">
            <summary>
            Gets the height in pixels of each ImageFrame from this ImageStream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.FrameBytesPerPixel">
            <summary>
            Gets or sets the bytes per pixel of each ImageFrame from this ImageStream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.FramePixelDataLength">
            <summary>
            Gets or sets the total length of the pixel data buffer of each ImageFrame from this ImageStream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.Sensor">
            <summary>
            Gets the associated sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.BufferCount">
            <summary>
            Gets the buffer count.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.Resolution">
            <summary>
            Gets or sets the image resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.ImageType">
            <summary>
            Gets the image type.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.IsEnabled">
            <summary>
            Gets a value indicating whether the ImageStream is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ImageStream.ImageStreamFlags">
            <summary>
            Gets or sets the ImageStreamFlags.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.NativeMethods">
            <summary>
            Native API declarations from Kinect10.dll and KinectAudio10.dll.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.NativeMethods.S_OK">
            <summary>
            Success HRESULT code.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.NuiSetDeviceStatusCallback(Microsoft.Kinect.NativeMethods.NuiStatusCallback,System.IntPtr)">
            <summary>
            Sets a callback function that gets notified when the sensor connection status changes. 
            Use this method to handle the case of a user connecting or disconnecting a Kinect sensor. 
            </summary>
            <param name="pCallback">Function pointer to the callback function.</param>
            <param name="pUserData">Pointer to optional context data that will be passed to the callback.</param>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.NuiGetMicrophoneArrayDevices(Microsoft.Kinect.MicrophoneArrayDevice[],System.Int32,System.Int32@)">
            <summary>
            Gets device information for the connected Kinect sensors. 
            </summary>
            <param name="deviceBuffer">Pointer to an array of NUI_MICROPHONE_ARRAY_DEVICE structures, 
            allocated by the caller, each of which receives the device information for a single connected 
            Kinect sensor. If you set this parameter to NULL, the piDeviceCount parameter will still 
            receive the number of connected Kinect sensors.</param>
            <param name="size">Size of the array pointed to by the pDeviceInfo parameter.</param>
            <param name="count">Receives the number of connected Kinect sensors. When this function returns, 
            this parameter is set to the number of structures in the array pointed to by the pDeviceInfo 
            parameter that contain valid information.</param>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.NuiGetSpeakerDevices(Microsoft.Kinect.SpeakerDevice[],System.Int32,System.Int32@)">
            <summary>
            Gets the active speaker devices found on the system. 
            </summary>
            <param name="deviceBuffer">Pointer to an array of NUI_SPEAKER_DEVICE structures, 
            allocated by the caller, each of which receives the device information for a single 
            connected speaker device. If you set this parameter to NULL, the piDeviceCount parameter 
            will still receive the number of connected speaker devices.</param>
            <param name="size">Size of the array pointed to by the pDeviceInfo parameter.</param>
            <param name="count">Receives the number of connected speaker devices. When this function returns, 
            this parameter is set to the number of structures in the array pointed to by the pDeviceInfo 
            parameter that contain valid information. </param>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.NuiGetSensorCount(System.Int32@)">
            <summary>
            Gets the number of kinects on the machine, including disconnected ones.
            </summary>
            <param name="pCount">Pointer to an integer in which to return the number of Kinect sensors.</param>
            <returns>Returns S_OK if successful; otherwise, returns a failure code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.NuiCreateSensorByIndex(System.Int32,Microsoft.Kinect.Interop.INuiSensor@)">
            <summary>
            Creates an instance of the Kinect sensor with the specified index so that an application can open and use it.
            </summary>
            <remarks>
            Applications that support more than one Kinect sensor call NuiCreateSensorByIndex to access the 
            second and subsequent devices. This function returns a pointer to an INuiSensor interface, 
            which provides functions that are identical to those in NuiApi.h, NuiImageCamera.h, and NuiSkeleton.h., 
            but operate on a particular device instance. 
            </remarks>
            <param name="index">The zero-based index of the Kinect sensor to open. Valid values range from zero to one less than the value returned by the NuiGetSensorCount function.</param>
            <param name="pNuiSensor">A pointer that receives a reference to the created INuiSensor interface.</param>
            <returns>Returns S_OK if successful; otherwise, returns one of the failure codes in the following table.
            E_OUTOFMEMORY - The maximum number of Kinect sensors are already open.  
            E_POINTER - The ppNuiSensor parameter does not represent a valid address. 
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.NuiCreateSensorById(System.String,Microsoft.Kinect.Interop.INuiSensor@)">
            <summary>
            Creates an instance of the Kinect sensor with the specified ID so that an application can open and use it. 
            </summary>
            <remarks>Applications that support more than one Kinect sensor call NuiCreateSensorById to access the 
            second and subsequent devices. This function returns a pointer to an INuiSensor interface, which provides 
            functions that are identical to those in NuiApi.h, NuiImageCamera.h, and NuiSkeleton.h., but operate on a 
            particular device instance. 
            </remarks>
            <param name="instanceName">A pointer to the ID of the Kinect sensor to open.</param>
            <param name="pNuiSensor">A pointer that receives a reference to the created INuiSensor interface.</param>
            <returns>Returns S_OK if successful; otherwise, returns one of the failure codes in the following table. 
            E_OUTOFMEMORY - The maximum number of Kinect sensors are already open.  
            E_POINTER - The ppNuiSensor parameter does not represent a valid address. 
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.AvSetMmThreadCharacteristics(System.String,System.Int32@)">
            <summary>
            Associates the calling thread with the specified task.
            </summary>
            <param name="taskName">
            The name of the task to be performed. This name must match the name of one of the subkeys of the following
            key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks.
            </param>
            <param name="taskIndex">
            The unique task identifier. The first time this function is called, this value must be 0 on input. The
            index value is returned on output and can be used as input in subsequent calls.
            </param>
            <returns>
            If the function succeeds, it returns a handle to the task. 
            If the function fails, it returns 0. To retrieve extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.AvRevertMmThreadCharacteristics(System.Int32)">
            <summary>
            Indicates that a thread is no longer performing work associated with the specified task.
            </summary>
            <param name="avrtHandle">
            A handle to the task. This handle is returned by the AvSetMmThreadCharacteristics or
            AvSetMmMaxThreadCharacteristics function.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            This function must be called from the same thread that called the AvSetMmThreadCharacteristics or
            AvSetMmMaxThreadCharacteristics function to create the handle. Otherwise, the function will fail.
            </remarks>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.NuiDebugGetFailureStack">
            <summary>
            Utility to retrieve the address of gFailureStack in Kinect10.dll to allow inspection of the 
            failure "flight recorder".
            </summary>
            <returns>
            The address of Kinect10!gFailureStack as a UInt64.  
            In 32 bit, only the lower 4 bytes are used.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.NativeMethods.NuiSkeletonCalculateBoneOrientations(Microsoft.Kinect.Interop._NUI_SKELETON_DATA@,Microsoft.Kinect.Interop._NUI_SKELETON_BONE_ORIENTATION[])">
            <summary>
            Calculate Bone Orientations.
            </summary>
            <param name="pSkeletonData">Pointer to the skeleton data to calculate joint angles for.</param>
            <param name="pBoneOrientations">
            Pointer to an array of _NUI_SKELETON_BONE_ORIENTATION of dimension NUI_SKELETON_POSITION_COUNT (20).
            This array must be allocated by the user before calling this function.
            </param>
            <returns>
            Returns S_OK if successful; otherwise, returns one of the failure codes in the following table. 
            E_INVALIDARG - The <paramref name="pSkeletonData"/> parameter is NULL.
            E_POINTER - The <paramref name="pBoneOrientations"/> parameter is NULL.
            S_FALSE - The joints required to calculate the skeleton root are not visible. Hierarchical bone rotations are set to Identity.
            </returns>
        </member>
        <member name="T:Microsoft.Kinect.NativeMethods.NuiStatusCallback">
            <summary>
            Declaration of native NuiStatusCallback typedef.
            </summary>
            <param name="status">HRESULT status from the sensor.</param>
            <param name="instanceName">Sensor hub device instance id.</param>
            <param name="uniqueDeviceName">Sensor camera device instance id.  May be null.</param>
            <param name="pUserData">User data registered with NuiSetDeviceStatusCallback.</param>
        </member>
        <member name="T:Microsoft.Kinect.MicrophoneArrayDevice">
            <summary>
            A structure used by NuiGetMicrophoneArrayDevices to return the Kinect sensors found on the system.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.MicrophoneArrayDevice.MaxStrLen">
            <summary>
            Maximum length for device friendly name.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.MicrophoneArrayDevice.DeviceName">
            <summary>
            The device friendly name.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.MicrophoneArrayDevice.DeviceID">
            <summary>
            Device unique identifier.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.MicrophoneArrayDevice.DeviceIndex">
            <summary>
            This device index can be passed to KinectAudioSource.MicrophoneIndex.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SpeakerDevice">
            <summary>
            A structure used by NuiGetSpeakerDevices to get the number of speaker devices.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SpeakerDevice.MaxStrLen">
            <summary>
            String length for speaker device name.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SpeakerDevice.DeviceName">
            <summary>
            The device friendly name.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SpeakerDevice.DeviceIndex">
            <summary>
            This device index can be passed to KinectAudioSource.SpeakerIndex.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SpeakerDevice.IsDefault">
            <summary>
            A Boolean value that indicates whether the speaker device is the default. 
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectStatus">
            <summary>
            Status of the KinectSensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.Undefined">
            <summary>
            The status is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.Disconnected">
            <summary>
            USB unplugged or device not found.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.Connected">
            <summary>
            Kinect is fully connected and ready to use.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.Initializing">
            <summary>
            The device has been attached and is initializing.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.Error">
            <summary>
            The device returned an unexpected error.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.NotPowered">
            <summary>
            Audio not found.  Device likely unpowered.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.NotReady">
            <summary>
            Some part of the devices is not connected.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.DeviceNotGenuine">
            <summary>
            This device is not a genuine Kinect.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.DeviceNotSupported">
            <summary>
            This device is not supported.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectStatus.InsufficientBandwidth">
            <summary>
            There is not enough bandwidth on the USB hub.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.AutoLock">
            <summary>
            A Disposable wrapper for a ReaderWriterLockSlim, which provides for easy 
            scoped locking via a using block.  Also provides Write Upgrade functionality.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AutoLock._lock">
            <summary>
            Lockable object to lock and unlock.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AutoLock._lockMode">
            <summary>
            Desired lock mode.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.AutoLock.#ctor(System.Threading.ReaderWriterLockSlim,Microsoft.Kinect.AutoLock.AutoLockMode)">
            <summary>
            Initializes a new instance of the AutoLock struct.  Enters the desired lock mode on the given lock.
            </summary>
            <param name="readerWriterLock">Lock the given lock.</param>
            <param name="initialAutoLockMode">Lock mode to start with.  If mode is upgradable, this may change.</param>
        </member>
        <member name="M:Microsoft.Kinect.AutoLock.UpgradeToWrite">
            <summary>
            Upgrades the lock from UpgradableRead to Write.
            </summary>
            <returns>New AutoLock object with write lock.</returns>
        </member>
        <member name="M:Microsoft.Kinect.AutoLock.Dispose">
            <summary>
            Unlocks the given lock and sets the LockMode to none.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.AutoLock.AutoLockMode">
            <summary>
            Kind of lock you need.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AutoLock.AutoLockMode.None">
            <summary>
            No lock is desired.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AutoLock.AutoLockMode.Read">
            <summary>
            A Read lock is desired.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AutoLock.AutoLockMode.UpgradeableRead">
            <summary>
            A Read lock that may be upgraded to Write lock is desired.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.AutoLock.AutoLockMode.Write">
            <summary>
            A Write lock is desired.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ReaderWriterLockSlimExtensionMethods">
            <summary>
            AutoLock extensions for ReaderWriterLockSlim.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ReaderWriterLockSlimExtensionMethods.EnterReadLockAuto(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Returns a read AutoLock on the given lock.
            </summary>
            <param name="readerWriterLock">Slim to act upon.</param>
            <returns>New AutoLock object.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ReaderWriterLockSlimExtensionMethods.EnterUpgradeableReadLockAuto(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Returns an upgradable AutoLock for the given lock.
            </summary>
            <param name="readerWriterLock">Slim to act upon.</param>
            <returns>New AutoLock object.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ReaderWriterLockSlimExtensionMethods.EnterWriteLockAuto(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Returns an write AutoLock for the given lock.
            </summary>
            <param name="readerWriterLock">Slim to act upon.</param>
            <returns>New AutoLock object.</returns>
        </member>
        <member name="T:Microsoft.Kinect.KinectSensor">
            <summary>
            A Microsoft Kinect&#x2122; sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.ColorHelperIndex">
            <summary>
            Index of color FrameStateHelper in the _frameHelpers array.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.DepthHelperIndex">
            <summary>
            Index of depth FrameStateHelper in the _frameHelpers array.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.SkeletonHelperIndex">
            <summary>
            Index of skeletal FrameStateHelper in the _frameHelpers array.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.failureStackPointer">
            <summary>
            This is an pointer to the internal debug stack that is used for diagnosing
            failures within the Kinect runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._initLock">
            <summary>
            We would like to use the _initLock for multi-reader/single writer access to this class.
            Unfortunately, ReaderWriterLockSlim must itself be Disposed, meaning that we need a thread-safe
            means to detect Disposal.  So, we use a normal lock to check the IsDisposed state and acquire
            the _initLock, which allows us to spend most of the time under the R/W lock rather than the full lock.
            To ensure safe use of these locks, _initLock must always be acquired under a held _disposeLock, and 
            _disposeLock must never be acquired under _initLock.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._disposeLock">
            <summary>
            Lock for disposing the sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._audioSource">
            <summary>
            The KinectAudioSource object.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._unsupportedMessageShown">
            <summary>
            True if the unsupported message has been written to the debug stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.#ctor(Microsoft.Kinect.Interop.INuiSensor)">
            <summary>
            Initializes a new instance of the KinectSensor class with the given INuiSensor. 
            Note that there should be ONLY one KinectSensor object per INuiSensor.
            </summary>
            <param name="nuiSensor">INuiSensor to wrap.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.UpdateNuiSensor(Microsoft.Kinect.Interop.INuiSensor)">
            <summary>
            Replace the NuiSensor with another one.  Used when a user plugs a sensor into a
            different USB port.
            </summary>
            <param name="nuiSensor">New nuiSensor to wrap.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.CreateStreamObjects">
            <summary>
             Creates the stream objects for this sensor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.GetUniqueKinectId">
            <summary>
            Non-locking version of UniqueKinectId.
            </summary>
            <returns>The camera device instance id.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.GetDeviceConnectionId">
            <summary>
            Provides the USB hub device instance id.  Non-locking.
            </summary>
            <returns>USB hub device instance id.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.GetStatus">
            <summary>
            Non-locking version of Status property.
            </summary>
            <returns>The status of the sensor.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.MapStatus(System.UInt32)">
            <summary>
            Maps the NuiStatus HRESULT to a KinectStatus.
            </summary>
            <param name="code">The HRESULT to map.</param>
            <returns>Mapped KinectStatus.</returns>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._lastStatus">
            <summary>
            The last status found for this sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._depthFrameReadyContextHandler">
            <summary>
            Event that fires when a new depth frame is available from this Kinect sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._colorFrameReadyContextHandler">
            <summary>
            Event that fires when a new color frame is available from this Kinect sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._skeletonFrameReadyContextHandler">
            <summary>
            Event that fires when a new skeleton frame is available from this Kinect sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._allFramesReadyContextHandler">
            <summary>
            Event that fires when new frames are available from each of this Kinect sensor's active streams.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._coordinateMapper">
            <summary>
            Privately cached reference to the associated CoordinateMapper object for the sensor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.IsKnownPoint(Microsoft.Kinect.DepthImagePixel)">
            <summary>
            Tests whether the DepthImagePixel has a known value.
            </summary>
            <param name="depthImagePixel">The DepthImagePixel to test.</param>
            <returns>Returns true if the DepthImagePixel has a known value, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.IsKnownPoint(Microsoft.Kinect.ColorImagePoint)">
            <summary>
            Tests whether the ColorImagePoint has a known value.
            </summary>
            <param name="colorImagePoint">The ColorImagePoint to test.</param>
            <returns>Returns true if the ColorImagePoint has a known value, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.IsKnownPoint(Microsoft.Kinect.DepthImagePoint)">
            <summary>
            Tests whether the DepthImagePoint has a known value.
            </summary>
            <param name="depthImagePoint">The DepthImagePoint to test.</param>
            <returns>Rreturns false if depth value == 0.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.IsKnownPoint(Microsoft.Kinect.SkeletonPoint)">
            <summary>
            Tests whether the SkeletonPoint has a known value.
            </summary>
            <param name="skeletonPoint">The SkeletonPoint to test.</param>
            <returns>Returns true if the Skeleton point has a known value, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.AccelerometerGetCurrentReading">
            <summary>
            Gets the current accelerometer reading of the Kinect sensor.
            </summary>
            <returns>
            A Vector4 pointing in the directon of gravity.
            </returns>
            <remarks>
            <para>The accelerometer reading is returned as a 3d vector pointing in the direction of 
            gravity (i.e. floor (gravity) on a non-accelerating sensor).  The unit of the vector
            is in gravity units (g), 9.81m/s^2.  The coordinate system is centered on the sensor, 
            right-handed coordinate system with positive-Z in the direction the sensor is pointing at.  
            In the default sensor rotation (horizontal, level placement), this will return the vector 
            (0, -1.0, 0, 0).  The w value of the Vector4 is always set to 0.0.</para>
            </remarks>        
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.MapDepthToColorImagePoint(Microsoft.Kinect.DepthImageFormat,System.Int32,System.Int32,System.Int16,Microsoft.Kinect.ColorImageFormat)">
            <summary>
            Maps from a depth coordinate with depth value to color coordinates.
            </summary>
            <param name="depthImageFormat">The depth format of the source.</param>
            <param name="depthX">The X coordinate of the depth frame.</param>
            <param name="depthY">The Y coordinate of the depth frame.</param>
            <param name="depthPixelValue">The value from the depth frame's pixel data at the given coordinates (depthX, depthY).</param>
            <param name="colorImageFormat">The desired target image format.</param>
            <returns>The ColorImagePoint corresponding to the point in DepthImage space.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.MapDepthFrameToColorFrame(Microsoft.Kinect.DepthImageFormat,System.Int16[],Microsoft.Kinect.ColorImageFormat,Microsoft.Kinect.ColorImagePoint[])">
            <summary>
            Maps every point in a depth frame to the corresponding location in a ColorImageFormat coordinate space.
            </summary>
            <param name="depthImageFormat">The depth format of the source.</param>
            <param name="depthPixelData">
            The depth frame pixel data, as retrieved from DepthImageFrame.CopyPixelDataTo.
            Must be equal in length to Width*Height of the depth format specified by depthImageFormat.
            </param>
            <param name="colorImageFormat">The desired target image format.</param>
            <param name="colorCoordinates">
            The ColorImagePoint array to receive the data.  Each element will be be the result of mapping the 
            corresponding depthPixelDatum to the specified ColorImageFormat coordinate space.
            Must be equal in length to depthPixelData.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.MapSkeletonPointToColor(Microsoft.Kinect.SkeletonPoint,Microsoft.Kinect.ColorImageFormat)">
            <summary>
            Looks up the color frame coordinates for a given skeleton point.
            </summary>
            <param name="skeletonPoint">The supplied skeleton point.</param>
            <param name="colorImageFormat">The color format to convert to.</param>
            <returns>The ColorImagePoint corresponding to the given skeleton point.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.MapSkeletonPointToDepth(Microsoft.Kinect.SkeletonPoint,Microsoft.Kinect.DepthImageFormat)">
            <summary>
            Looks up the depth frame coordinates for a given skeleton point.
            </summary>
            <param name="skeletonPoint">The supplied skeleton point.</param>
            <param name="depthImageFormat">The depth format to convert to.</param>
            <returns>The DepthImagePoint that contains the X, Y and depth value of the given skeleton point.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.MapDepthToSkeletonPoint(Microsoft.Kinect.DepthImageFormat,System.Int32,System.Int32,System.Int16)">
            <summary>
            Looks up the skeleton point location of the given depth X, Y.
            </summary>
            <param name="depthImageFormat">The format to use in the conversion.</param>
            <param name="depthX">The X coordinate of the depth frame.</param>
            <param name="depthY">The Y coordinate of the depth frame.</param>
            <param name="depthPixelValue">The value from the depth frame's pixel data at the given coordinates (depthX, depthY).</param>
            <returns>The skeleton point for the given X, Y, depth and format.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.ManagedNuiTransformDepthImageToSkeleton(System.Single,System.Single,System.Int16)">
            <summary>
            Based off the function NuiTransformDepthImageToSkeleton from NuiSkeleton.h, which is inline
            so it is neither directly possible nor is it performant to p-invoke it from managed.
            </summary>
            <param name="fDepthX">X coordinate from the depth image.</param>
            <param name="fDepthY">Y coordinate from the depth image.</param>
            <param name="depthPixelDatum">Depth value from the depth image.</param>
            <returns>A Vector indicating the point on the skeleton corresponding to the depth pixel.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.ManagedNuiTransformSkeletonToDepthImage(Microsoft.Kinect.Interop._Vector4,System.Single@,System.Single@,System.Single@)">
            <summary>
            Based off the function NuiTransformSkeletonToDepthImage from NuiSkeleton.h, which is inline
            so it is neither directly possible nor is it performant to p-invoke it from managed.
            </summary>
            <param name="vPoint">Vector from skeleton to transform.</param>
            <param name="pfDepthX">Resulting X coordinate for skeleton point.</param>
            <param name="pfDepthY">Resulting Y coordinate for skeleton point.</param>
            <param name="pfDepthValue">Resulting depth value for skeleton point.</param>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._hKillThread">
            <summary>
            Event indiating that the thread should exit.
            NOTE: moved from constructor to inside Initialize so that we can reuse this object after unInitialize.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._frameHelpers">
            <summary>
            Array of FrameStateHelpers for all frames.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._requestedOptions">
            <summary>
            Options desired for the sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._currentOptions">
            <summary>
            Options requested from the sensor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.Start">
            <summary>
            Start streaming data from this Kinect. This needs to be called whether polling or registering for the events. It also needs to be called to get control of the Camera.
            This API may throw System.IO.IOException if the KinectSensor is already in use by another process.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.Stop">
            <summary>
            Stop streaming data from this Kinect.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.RequestSkeletonEngine(System.Boolean)">
            <summary>
            This method is used by the SkeletonStream to inform the sensor that it wants the skeleton engine running.
            This will re-call Initialize to fire up or shut down the skeleton engine if needed.
            </summary>
            <param name="enable">Indicates if the skeletal engine is should be turned on or off.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.Initialize(Microsoft.Kinect.KinectSensor.SensorOptions)">
            <summary>
            Calls NuiInitialize with the desired options.
            <remarks>
            Must be called under a _initLock in Write mode.
            Must not be called if IsRunningInternal is true.
            </remarks>
            </summary>
            <param name="options">The desired optoins.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.Uninitialize">
            <summary>
            Must be called under a _initLock in Write mode.
            Must not be called if IsRunningInternal is false.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor._thread">
            <summary>
            The frame processing background thread.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.MainBackgroundThreadProc(System.Object)">
            <summary>
            Frame processing thread procedure.
            </summary>
            <param name="data">ManualResetEvent tripped when the thread should exit.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.GetDepthFrame">
            <summary>
            Pulls a depth frame out of the NUI pipeline, if available.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.GetColorFrame">
            <summary>
            Pulls a color frame out of the NUI pipeline, if available.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.GetSkeletonFrame">
            <summary>
            Pulls a skeletal frame out of the NUI pipeline, if available.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.Dispose">
            <summary>
            Frees all memory associated with the sensor.  Terminates all streaming.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.EnterReadLock">
            <summary>
            Throws an ObjectDisposedException if this instance is diposed.
            If this instance is not disposed, will return an AutoLock entered for Read.
            </summary>
            <returns>The read lock.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.EnterUpgradeableReadLock">
            <summary>
            Throws an ObjectDisposedException if this instance is diposed.
            If this instance is not disposed, will return an AutoLock entered for UpgradeableRead.
            </summary>
            <returns>The upgradable lock.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object is disposed.</exception>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.EnterWriteLock">
            <summary>
            Throws an ObjectDisposedException if this instance is diposed.
            If this instance is not disposed, will return an AutoLock entered for Write.
            </summary>
            <returns>The write lock.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.CheckNotRunning">
            <summary>
            Throws an InvalidOperationEception is this instance is not disposed and is not running.
            Must be called under _initLock for thread safety.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the sensor is not running.</exception>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.InstanceIndex">
            <summary>
            Gets the index of the nui device.  Do not expose this to the end user.
            NOTE: Clients of this method expect it to be non-locking.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.KinectSensors">
            <summary>
            Gets the collection of all Kinect&#x2122; sensors.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.NuiSensor">
            <summary>
            Gets the internal wrapper for INuiSensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.UniqueKinectId">
            <summary>
            Gets the unique device connection name for the sensor.  This is the camera device instance id.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.DeviceConnectionId">
            <summary>
            Gets the USB HUB device instance id.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.Status">
            <summary>
            Gets the reported status of the sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.LastStatus">
            <summary>
            Gets or sets the last status for this sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.WasRunning">
            <summary>
            Gets or sets a value indicating whether the sensor was running.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.KinectSensor.DepthFrameReady">
            <summary>
            Event that fires when a new depth frame is available from this Kinect sensor.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.KinectSensor.ColorFrameReady">
            <summary>
            Event that fires when a new color frame is available from this Kinect sensor.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.KinectSensor.SkeletonFrameReady">
            <summary>
            Event that fires when a new skeleton frame is available from this Kinect sensor.
            </summary>
        </member>
        <member name="E:Microsoft.Kinect.KinectSensor.AllFramesReady">
            <summary>
            Event that fires when new frames are available from each of this Kinect sensor's active streams.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.HasDepthInvocations">
            <summary>
            Gets a value indicating whether the depth frame handler has subscriptions.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.HasColorInvocations">
            <summary>
            Gets a value indicating whether the color frame handler has subscriptions.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.HasSkeletonInvocations">
            <summary>
            Gets a value indicating whether the skeleton frame handler has subscriptions.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.HasAllFramesInvocations">
            <summary>
            Gets a value indicating whether the AllFrames handler has subscriptions.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.CoordinateMapper">
            <summary>
            Gets the CoordinateMapper object for the sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.DepthStream">
            <summary>
            Gets the depth stream for the sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.ColorStream">
            <summary>
            Gets the color stream for the sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.SkeletonStream">
            <summary>
            Gets the skeleton stream for the sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.AudioSource">
            <summary>
            Gets the audio source for the sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.MaxElevationAngle">
            <summary>
            Gets the maximum camera elevation angle in degrees.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.MinElevationAngle">
            <summary>
            Gets the minimum camera elevation angle in degrees.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.ElevationAngle">
            <summary>
            Gets or sets the desired camera elevation angle. See the documentation about 
            the limits of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.ForceInfraredEmitterOff">
            <summary>
            Gets or sets a value indicating whether the infrared emitter is disabled.
            Default value of false.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.DepthFilter">
            <summary>
            Gets or sets a filter to be applied to each depth frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.IsRunning">
            <summary>
            Gets a value indicating whether the Kinect is currently streaming data. To set it, call Start() or Stop().
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.IsRunningInternal">
            <summary>
            Gets a value indicating whether the Kinect is currently streaming data. 
            Non-locking version of IsRunning.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.IsDisposed">
            <summary>
            Gets a value indicating whether this KinectSensor has been disposed.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectSensor.FrameStateHelper">
            <summary>
            This class and its more strongly typed subclass is a very specific utility for handling the multiple
            frame types that KinectSensor managed, sorts and dispatches.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.FrameStateHelper.SetArgs(System.EventArgs,System.Int64,System.Int32)">
            <summary>
            Set new args at the specified timestamp.  HaveDispatchedEvent will become false.
            </summary>
            <param name="args">The new args.  Must match the correct type for this instance.</param>
            <param name="timestamp">The timestamp of this args.</param>
            <param name="framenumber">The framenumber of this args.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.FrameStateHelper.Invoke(Microsoft.Kinect.KinectSensor)">
            <summary>
            Invoke the current args with the handler supplied at construction time, if there are
            listeners.
            HaveDispatchedEvent will become true after this call even if there weren't any listeners.
            </summary>
            <param name="sender">The sender of the event.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.FrameStateHelper.ResetAndReturnArgs">
            <summary>
            Reset the instance to no args and no timestamp, returning the args (if present)
            for the caller to use if desired.
            </summary>
            <returns>The Args (if any) that were set in this instance.</returns>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.FrameStateHelper.IsCandidateForInvoke(System.Int64,System.Int32)">
            <summary>
            Determine whether this FrameStateHelper is a candidate for invocation.
            This happens if:
            There are Args to dispatch and
            We have not already dispatched the event and
            The timestamp is earlier than the timestamp the caller provides.
            Note that this does *not* imply that HasListeners is true - just that this instance
            is the next candidate (based on timestamp and frame number).
            </summary>
            <param name="earliestTimestampSoFar">
            The earliest timestamp being considered by the caller.  
            The timestamp must be &lt; earliest, or == and framenumber &lt; earliestframenumber.
            </param>
            <param name="earliestFramenumberSoFar">
            The earliest framenumber being considered by the caller.  
            The timestamp must be &lt; earliest, or == and framenumber &lt; earliestframenumber.
            </param>
            <returns>Whether or not this FrameStateHelper is a candiate for invocation.</returns>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.FrameStateHelper.MostRecentTimestamp">
            <summary>
            Gets or sets the most recent timestamp for this frame type.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.FrameStateHelper.MostRecentFramenumber">
            <summary>
            Gets or sets the most recent framenumber for this frame type.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.FrameStateHelper.IsReadyForSetArgs">
            <summary>
            Gets a value indicating whether this instance is ready for updated args.
            This can happen if the args are null or have already been dispatched, or if there are no type
            specific listeners.
            If this is false, we should not call SetArgs because we have data that needs to be dispatched.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.FrameStateHelper.HasArgs">
            <summary>
            Gets a value indicating whether there are currently args stored in this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.FrameStateHelper.HaveDispatchedEvent">
            <summary>
            Gets or sets a value indicating whether the args currently held by this class have been dispatched.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.FrameStateHelper.HasListeners">
            <summary>
            Gets a value indicating whether the wrapped even handler has listeners.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectSensor.FrameStateType">
            <summary>
            This is used to help the FrameStateHelper determine which stream it belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.FrameStateType.Color">
            <summary>
            The color stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.FrameStateType.Depth">
            <summary>
            The depth stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.FrameStateType.Skeleton">
            <summary>
            The skeleton stream.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectSensor.FrameStateHelper`1">
            <summary>
            The concrete, strongly typed version of FrameStateHelper, typed to the Args type.
            </summary>
            <typeparam name="TArgs">The type of EventArgs handled by this instance.</typeparam>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.FrameStateHelper`1._handler">
            <summary>
            Wrapped handler object.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.FrameStateHelper`1._type">
            <summary>
            Used for logging to tell which stream this frame belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.FrameStateHelper`1._args">
            <summary>
            Arguments for the wrapped handler.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.FrameStateHelper`1.#ctor(Microsoft.Kinect.KinectSensor.FrameStateType,Microsoft.Kinect.ContextEventHandler{`0})">
            <summary>
            Initializes a new instance of the FrameStateHelper class with a wrapped handler.
            </summary>
            <param name="type">The frame type this helper is associated with.</param>
            <param name="contextHandler">The wrapped handler.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.FrameStateHelper`1.SetArgs(System.EventArgs,System.Int64,System.Int32)">
            <summary>
            Set new args at the specified timestamp.  HaveDispatchedEvent will become false.
            </summary>
            <param name="args">The new args.  Must match the correct type for this instance.</param>
            <param name="timestamp">The timestamp of this args.</param>
            <param name="framenumber">The framenumber of this args.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.FrameStateHelper`1.Invoke(Microsoft.Kinect.KinectSensor)">
            <summary>
            Invoke the current args with the handler supplied at construction time, if there are
            listeners.
            HaveDispatchedEvent will become true after this call even if there weren't any listeners.
            </summary>
            <param name="sender">The sender of the event.</param>
        </member>
        <member name="M:Microsoft.Kinect.KinectSensor.FrameStateHelper`1.ResetAndReturnArgs">
            <summary>
            Reset the instance to no args and no timestamp, returning the args (if present)
            for the caller to use if desired.
            </summary>
            <returns>The Args (if any) that were set in this instance.</returns>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.FrameStateHelper`1.HasArgs">
            <summary>
            Gets a value indicating whether there are currently args stored in this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.KinectSensor.FrameStateHelper`1.HasListeners">
            <summary>
            Gets a value indicating whether the wrapped even handler has listeners.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectSensor.SensorOptions">
            <summary>
            Options for initializing an INuiSensor.  Must be in sync with NuiApi.h.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.SensorOptions.None">
            <summary>
            No options chosen.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.SensorOptions.UseDepthAndPlayerIndex">
            <summary>
            Both depth and player index desired.  Note that this uses the skeletal engine.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.SensorOptions.UseColor">
            <summary>
            Color frames desired.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.SensorOptions.UseSkeletalTracking">
            <summary>
            Skeletal frames desired.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.SensorOptions.UseDepth">
            <summary>
            Depth frames desired.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectSensor.SensorOptions.UseAudio">
            <summary>
            Audio capture (Microphone array) desired.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SkeletonTrackingState">
            <summary>
            These are the possible states for a tracked skeleton.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonTrackingState.NotTracked">
            <summary>
            This means the skeleton is not being tracked.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonTrackingState.PositionOnly">
            <summary>
            The skeleton is being tracked, but we only know the 
            general position, and we do not know the specific
            joint locations.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonTrackingState.Tracked">
            <summary>
            The skeleton is being tracked and the joint data is
            available for consumption.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.FrameEdges">
            <summary>
            These flags are used to indicate of a skeleton is passing outside of the frame.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.FrameEdges.None">
            <summary>
            All of the player's body is in frame.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.FrameEdges.Right">
            <summary>
            Part of the player's body is out of frame to the camera's right.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.FrameEdges.Left">
            <summary>
            Part of the player's body is out of frame to the camera's left.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.FrameEdges.Top">
            <summary>
            Part of the player's body is out of frame above the camera's field of view.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.FrameEdges.Bottom">
            <summary>
            Part of the player's body is out of frame below the camera's field of view.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.TransformSmoothParameters">
            <summary>
            This struct is used to setup the skeleton smoothing values.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.TransformSmoothParameters.GetHashCode">
            <summary>
            Calculates the hash code of the TransformSmoothParameters.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.TransformSmoothParameters.Equals(System.Object)">
            <summary>
            Determines if the two objects are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>This method returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.TransformSmoothParameters.Equals(Microsoft.Kinect.TransformSmoothParameters)">
            <summary>
            Determines if the two objects are equal.
            </summary>
            <param name="smoothParameters">The TransformSmoothParameters to compare to.</param>
            <returns>This method returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.TransformSmoothParameters.op_Equality(Microsoft.Kinect.TransformSmoothParameters,Microsoft.Kinect.TransformSmoothParameters)">
            <summary>
            Determines if the two objects are equal.
            </summary>
            <param name="smoothParameters1">The first TransformSmoothParamters to compare.</param>
            <param name="smoothParameters2">The second TransformSmoothParamters to compare.</param>
            <returns>This method returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.TransformSmoothParameters.op_Inequality(Microsoft.Kinect.TransformSmoothParameters,Microsoft.Kinect.TransformSmoothParameters)">
            <summary>
            Determines if the two objects are not equal.
            </summary>
            <param name="smoothParameters1">The first TransformSmoothParamters to compare.</param>
            <param name="smoothParameters2">The second TransformSmoothParamters to compare.</param>
            <returns>This method returns true if they are not equal and false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.TransformSmoothParameters.Smoothing">
            <summary>
            Gets or sets the smoothing value.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.TransformSmoothParameters.Correction">
            <summary>
            Gets or sets the correction value.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.TransformSmoothParameters.Prediction">
            <summary>
            Gets or sets the prediction value.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.TransformSmoothParameters.JitterRadius">
            <summary>
            Gets or sets the jitter radius value.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.TransformSmoothParameters.MaxDeviationRadius">
            <summary>
            Gets or sets the maximum deviation radius value.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SkeletonFrame">
            <summary>
            This class contains the skeleton frame returned by the Kinect API.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrame._skeletonStream">
            <summary>
            The associated skeleton stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrame._skeletonData">
            <summary>
            The associated skeleton data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrame._dataAccessLock">
            <summary>
            The data access lock.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonFrame._isDisposed">
            <summary>
            Tracks whether this instance is disposed.  0 == false, 1 == true.
            We need to use int (vs. bool) for Interlocked.Exchange.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrame.#ctor(Microsoft.Kinect.SkeletonStream,System.Int32,System.Int64,Microsoft.Kinect.SkeletonTrackingMode,Microsoft.Kinect.DataPool{System.Int32,System.Tuple{System.Single,System.Single,System.Single,System.Single},System.Object,Microsoft.Kinect.Skeleton[],System.Nullable{System.Boolean}}.Entry)">
            <summary>
            Initializes a new instance of the SkeletonFrame class.
            </summary>
            <param name="skeletonStream">The associated SkeletonStream object.</param>
            <param name="frameNumber">The current frames number.</param>
            <param name="timestamp">The timestamp on the frame.</param>
            <param name="trackingMode">The tracking mode in which the frame was captured.</param>
            <param name="skeletonData">The related SkeletonData.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrame.Create(Microsoft.Kinect.SkeletonStream,System.Int32,System.Int64,Microsoft.Kinect.SkeletonTrackingMode)">
            <summary>
            Creates a new skeleton frame object.
            </summary>
            <param name="skeletonStream">The associated SkeletonStream.</param>
            <param name="frameNumber">The new frame number.</param>
            <param name="timestamp">The frames timestamp.</param>
            <param name="trackingMode">The tracking mode in which the frame was captured.</param>
            <returns>The new SkeletonFrame object.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrame.CopySkeletonDataTo(Microsoft.Kinect.Skeleton[])">
            <summary>
            This method copies the skeleton data to an array of skeleton data.
            </summary>
            <param name="skeletonData">The target array to receive the data.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrame.Dispose">
            <summary>
            This method disposes the skeleton frame.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrame.Finalize">
            <summary>
            Finalizes an instance of the SkeletonFrame class.
            This destructor is used to notify the developer if they have forgotten to
            dispose of the frame correctly.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonFrame.Dispose(System.Boolean)">
            <summary>
            To be used to return data to free lists.  If SkeletonFrame is ever unsealed, 
            this must change to protected virtual.
            </summary>
            <param name="disposing">Specify true to indicate that the class should dispose clean up all resources.</param>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonFrame.Timestamp">
            <summary>
            Gets or sets the timestamp for the frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonFrame.FrameNumber">
            <summary>
            Gets or sets the frame number for the frame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonFrame.TrackingMode">
            <summary>
            Gets the tracking mode in which this frame was captured.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonFrame.FloorClipPlane">
            <summary>
            Gets or sets the floor's clip plane.
            The floats should be in this order from the native type: x, y, z, w.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonFrame.SkeletonArrayLength">
            <summary>
            Gets the total length of the skeleton data buffer of this SkeletonFrame.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonFrame.DepthFilter">
            <summary>
            Gets the depth filter that was applied to the frame.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Skeleton">
            <summary>
            This class is used to track all of the known data about a skeleton
            returned from the skeleton stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Skeleton.JointTypeValues">
            <summary>
            An array of all possible JointType values.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Skeleton.#ctor(Microsoft.Kinect.Interop._NUI_SKELETON_DATA)">
            <summary>
            Initializes a new instance of the Skeleton class.
            </summary>
            <param name="nativeSkeleton">The native skeleton data.</param>
        </member>
        <member name="M:Microsoft.Kinect.Skeleton.#ctor(Microsoft.Kinect.Skeleton)">
            <summary>
            Initializes a new instance of the Skeleton class.
            </summary>
            <param name="sourceData">The source skeleton to copy the data from.</param>
        </member>
        <member name="M:Microsoft.Kinect.Skeleton.#ctor">
            <summary>
            Initializes a new instance of the Skeleton class with a default JointCollection.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.Skeleton._boneOrientations">
            <summary>
            Backing store for the BoneOrientations property.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Skeleton.CopyFrom(Microsoft.Kinect.Interop._NUI_SKELETON_DATA)">
            <summary>
            This method copies the data from the native data.
            </summary>
            <param name="nativeSkeleton">The native skeleton data.</param>
        </member>
        <member name="M:Microsoft.Kinect.Skeleton.CopyFrom(Microsoft.Kinect.Skeleton)">
            <summary>
            This method copies the data from another skeleton.
            </summary>
            <param name="sourceData">The source skeleton.</param>
        </member>
        <member name="M:Microsoft.Kinect.Skeleton.InvalidateBoneOrientations">
            <summary>
            Invalidates the bone orientations, forcing them to be recalculated the next time they are requested.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Skeleton.CalculateBoneOrientations(Microsoft.Kinect.BoneOrientation[])">
            <summary>
            This method calculates the hierarchical and absolute bone rotations for each joint in the skeleton.
            </summary>
            <param name="boneOrientations">The array of bone orientations to be updated.</param>
            <returns>Returns true if joint calculation successful, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.Skeleton.TrackingState">
            <summary>
            Gets or sets the skeleton's current tracking state.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Skeleton.TrackingId">
            <summary>
            Gets or sets the skeleton's tracking ID.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Skeleton.Position">
            <summary>
            Gets or sets the skeleton's position.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Skeleton.Joints">
            <summary>
            Gets or sets the skeleton's joints.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Skeleton.BoneOrientations">
            <summary>
            Gets or sets the skeleton's bone orientations.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Skeleton.ClippedEdges">
            <summary>
            Gets or sets the edges that this skeleton is clipped on.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Joint">
            <summary>
            This struct is used to describe a skeleton's joint.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Joint.GetHashCode">
            <summary>
            This method calculates the hash code for a joint.
            </summary>
            <returns>The joint's hash code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Joint.Equals(System.Object)">
            <summary>
            This method compares two joint objects.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Joint.Equals(Microsoft.Kinect.Joint)">
            <summary>
            This method compares two joint objects.
            </summary>
            <param name="joint">The joint to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Joint.op_Equality(Microsoft.Kinect.Joint,Microsoft.Kinect.Joint)">
            <summary>
            This method compares two joint objects.
            </summary>
            <param name="joint1">The first joint to compare.</param>
            <param name="joint2">The second joint to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Joint.op_Inequality(Microsoft.Kinect.Joint,Microsoft.Kinect.Joint)">
            <summary>
            This method compares two joint objects.
            </summary>
            <param name="joint1">The first joint to compare.</param>
            <param name="joint2">The second joint to compare.</param>
            <returns>It returns true if they are not equal and false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.Joint.Position">
            <summary>
            Gets or sets the joint's position.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Joint.JointType">
            <summary>
            Gets the joint's type.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Joint.TrackingState">
            <summary>
            Gets or sets the tracking state of this joint.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.JointType">
            <summary>
            This contains all of the possible joint types.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.HipCenter">
            <summary>
            The center of the hip.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.Spine">
            <summary>
            The bottom of the spine.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.ShoulderCenter">
            <summary>
            The center of the shoulders.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.Head">
            <summary>
            The players head.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.ShoulderLeft">
            <summary>
            The left shoulder.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.ElbowLeft">
            <summary>
            The left elbow.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.WristLeft">
            <summary>
            The left wrist.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.HandLeft">
            <summary>
            The left hand.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.ShoulderRight">
            <summary>
            The right shoulder.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.ElbowRight">
            <summary>
            The right elbow.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.WristRight">
            <summary>
            The right wrist.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.HandRight">
            <summary>
            The right hand.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.HipLeft">
            <summary>
            The left hip.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.KneeLeft">
            <summary>
            The left knee.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.AnkleLeft">
            <summary>
            The left ankle.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.FootLeft">
            <summary>
            The left foot.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.HipRight">
            <summary>
            The right hip.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.KneeRight">
            <summary>
            The right knee.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.AnkleRight">
            <summary>
            The right ankle.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointType.FootRight">
            <summary>
            The right foot.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.JointTrackingState">
            <summary>
            The tracking state of a specific joint.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointTrackingState.NotTracked">
            <summary>
            The joint is not tracked and no data is known about this joint.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointTrackingState.Inferred">
            <summary>
            The joint location is inferred. The data should be used with the
            understanding that the confidence level of the location is very low.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointTrackingState.Tracked">
            <summary>
            The joint is tracked and the data can be trusted.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Matrix4">
            <summary>
            Matrix4 is a row-major matrix containing the joint rotation information
            in the top left 3x3 and zero for translation.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Matrix4.Equals(System.Object)">
            <summary>
            Compares two Matrix4 objects for equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>Returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Matrix4.Equals(Microsoft.Kinect.Matrix4)">
            <summary>
            Compares two Matrix4 objects for equality.
            </summary>
            <param name="mat">The Matrix4 to compare.</param>
            <returns>Returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Matrix4.GetHashCode">
            <summary>
            Gets the hash code for a given Matrix4.
            </summary>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Matrix4.op_Equality(Microsoft.Kinect.Matrix4,Microsoft.Kinect.Matrix4)">
            <summary>
            Compares two Matrix4 objects for equality.
            </summary>
            <param name="mat1">The first Matrix4 to compare.</param>
            <param name="mat2">The second Matrix4 to compare.</param>
            <returns>Returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Matrix4.op_Inequality(Microsoft.Kinect.Matrix4,Microsoft.Kinect.Matrix4)">
            <summary>
            Compares two Matrix4 objects for inequality.
            </summary>
            <param name="mat1">The first Matrix4 to compare.</param>
            <param name="mat2">The second Matrix4 to compare.</param>
            <returns>Returns true if they are not equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Matrix4.CopyFrom(Microsoft.Kinect.Interop._Matrix4@)">
            <summary>
            Returns a Matrix4 that is a copy of a native _Matrix4 structure.
            </summary>
            <param name="mat">The native structure.</param>
            <returns>The managed structure.</returns>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M11">
            <summary>
            Gets or sets Row 1, Column 1.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M12">
            <summary>
            Gets or sets Row 1, Column 2.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M13">
            <summary>
            Gets or sets Row 1, Column 3.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M14">
            <summary>
            Gets or sets Row 1, Column 4.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M21">
            <summary>
            Gets or sets Row 2, Column 1.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M22">
            <summary>
            Gets or sets Row 2, Column 2.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M23">
            <summary>
            Gets or sets Row 2, Column 3.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M24">
            <summary>
            Gets or sets Row 2, Column 4.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M31">
            <summary>
            Gets or sets Row 3, Column 1.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M32">
            <summary>
            Gets or sets Row 3, Column 2.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M33">
            <summary>
            Gets or sets Row 3, Column 3.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M34">
            <summary>
            Gets or sets Row 3, Column 4.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M41">
            <summary>
            Gets or sets Row 4, Column 1.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M42">
            <summary>
            Gets or sets Row 4, Column 2.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M43">
            <summary>
            Gets or sets Row 4, Column 3.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.M44">
            <summary>
            Gets or sets Row 4, Column 4.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Matrix4.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.Vector4">
            <summary>
            Vector4 is a 4-element vector.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.Vector4.Equals(System.Object)">
            <summary>
            Compares two Vector4 objects for equality.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>Returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Vector4.Equals(Microsoft.Kinect.Vector4)">
            <summary>
            Compares two Vector4 objects for equality.
            </summary>
            <param name="vector">The Vector4 to compare.</param>
            <returns>Returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Vector4.GetHashCode">
            <summary>
            Gets the hash code for a given Vector4.
            </summary>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Vector4.op_Equality(Microsoft.Kinect.Vector4,Microsoft.Kinect.Vector4)">
            <summary>
            Compares two Vector4 objects for equality.
            </summary>
            <param name="vector1">The first Vector4 to compare.</param>
            <param name="vector2">The second Vector4 to compare.</param>
            <returns>Returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Vector4.op_Inequality(Microsoft.Kinect.Vector4,Microsoft.Kinect.Vector4)">
            <summary>
            Compares two Vector4 objects for inequality.
            </summary>
            <param name="vector1">The first Vector4 to compare.</param>
            <param name="vector2">The second Vector4 to compare.</param>
            <returns>Returns true if they are not equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.Vector4.CopyFrom(Microsoft.Kinect.Interop._Vector4@)">
            <summary>
            Returns a Vector4 that is a copy of a native _Vector4 structure.
            </summary>
            <param name="vector">The native structure.</param>
            <returns>The managed structure.</returns>
        </member>
        <member name="P:Microsoft.Kinect.Vector4.X">
            <summary>
            Gets or sets the X element.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Vector4.Y">
            <summary>
            Gets or sets the Y element.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Vector4.Z">
            <summary>
            Gets or sets the Z element.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.Vector4.W">
            <summary>
            Gets or sets the W element.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.JointCollection">
            <summary>
            This class contains a collection of joints returned for a given skeleton.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.JointCollection._skeletonData">
            <summary>
            The array of joint data.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.JointCollection.#ctor(Microsoft.Kinect.Skeleton)">
            <summary>
            Initializes a new instance of the JointCollection class.
            </summary>
            <param name="backReference">Back reference to Skeleton class.</param>
        </member>
        <member name="M:Microsoft.Kinect.JointCollection.GetEnumerator">
            <summary>
            This method is used to enumerate the list of joints.
            </summary>
            <returns>The related enumerator.</returns>
        </member>
        <member name="M:Microsoft.Kinect.JointCollection.System#Collections#Generic#IEnumerable{Microsoft#Kinect#Joint}#GetEnumerator">
            <summary>
            This method is used to enumerate the list of joints.
            </summary>
            <returns>The related enumerator.</returns>
        </member>
        <member name="F:Microsoft.Kinect.JointCollection._skeletonBackReference">
            <summary>
            Back reference to Skeleton class to enable us to flag writes to joints and re-calculate joint angles.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.JointCollection.Count">
            <summary>
            Gets the number of joints available.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.JointCollection.Item(Microsoft.Kinect.JointType)">
            <summary>
            Accesses the requested joint.
            </summary>
            <param name="jointType">The JointType being requested.</param>
            <returns>The requested joint.</returns>
        </member>
        <member name="T:Microsoft.Kinect.BoneOrientation">
            <summary>
            Orientation information for an individual bone in a skeleton.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientation.#ctor(Microsoft.Kinect.JointType)">
            <summary>
            Initializes a new instance of the BoneOrientation class.
            </summary>
            <param name="jointType">The joint corresponding to the endpoint of the bone.</param>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientation.SetDefaults">
            <summary>
            Sets the confidence and rotations of the BoneOrientation to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientation.CopyFrom(Microsoft.Kinect.Interop._NUI_SKELETON_BONE_ORIENTATION@)">
            <summary>
            Copies data from a native _NUI_SKELETON_BONE_ORIENTATION structure.
            </summary>
            <param name="nativeBoneOrientation">The native structure.</param>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientation.CopyFrom(Microsoft.Kinect.BoneOrientation)">
            <summary>
            Copies data from another Bone Orientation class.
            </summary>
            <param name="sourceBoneOrientation">The bone orientation to copy.</param>
        </member>
        <member name="F:Microsoft.Kinect.BoneOrientation.c_parents">
            <summary>
            Joint types representing the starting joint for each bone (the parent of the bone's endpoint joint).
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneOrientation.EndJoint">
            <summary>
            Gets the skeleton joint at which the bone ends.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneOrientation.StartJoint">
            <summary>
            Gets the skeleton joint at which the bone starts.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneOrientation.HierarchicalRotation">
            <summary>
            Gets or sets the rotation of the bone relative to its "parent" bone in the skeleton.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneOrientation.AbsoluteRotation">
            <summary>
            Gets or sets the rotation of the bone relative to the camera coordinate system.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.BoneRotation">
            <summary>
            Rotation of an individual bone.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneRotation.Matrix">
            <summary>
            Gets or sets a matrix representation of the bone rotation.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneRotation.Quaternion">
            <summary>
            Gets or sets a quaternion representation of the bone rotation.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.BoneOrientationCollection">
            <summary>
            This class contains a collection of bone orientations returned for a given skeleton.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BoneOrientationCollection._boneOrientations">
            <summary>
            The array of joint data.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BoneOrientationCollection._isValid">
            <summary>
            Indicates whether the bone orientation data is valid (has been recalculated since the joint positions last changed).
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientationCollection.#ctor(Microsoft.Kinect.Skeleton)">
            <summary>
            Initializes a new instance of the BoneOrientationCollection class.
            </summary>
            <param name="backReference">Back reference to Skeleton class.</param>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientationCollection.GetEnumerator">
            <summary>
            This method is used to enumerate the list of bone orientations.
            </summary>
            <returns>The related enumerator.</returns>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientationCollection.System#Collections#Generic#IEnumerable{Microsoft#Kinect#BoneOrientation}#GetEnumerator">
            <summary>
            This method is used to enumerate the list of bone orientations.
            </summary>
            <returns>The related enumerator.</returns>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientationCollection.Recalculate">
            <summary>
            Recalculates the bone orientations.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.BoneOrientationCollection.Invalidate">
            <summary>
            Invalidates the bone orientations, forcing them to be recalculated the next time they are requested.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.BoneOrientationCollection._skeletonBackReference">
            <summary>
            Back reference to Skeleton class to enable us to re-calculate joint angles.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneOrientationCollection.Count">
            <summary>
            Gets the number of bone orientations available.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneOrientationCollection.IsValid">
            <summary>
            Gets or sets a value indicating whether the joint orientations are valid.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.BoneOrientationCollection.Item(Microsoft.Kinect.JointType)">
            <summary>
            Accesses the requested bone orientation.
            </summary>
            <param name="jointType">The JointType for the bone being requested.</param>
            <returns>The requested bone orientation.</returns>
        </member>
        <member name="T:Microsoft.Kinect.SkeletonTrackingMode">
            <summary>
            Available skeleton tracking modes.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonTrackingMode.Default">
            <summary>
            Default skeleton tracking (tracks all 20 joints).
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonTrackingMode.Seated">
            <summary>
            Seated skeleton tracking (tracks only the upper 10 joints).
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.SkeletonStream">
            <summary>
            This class maintains the stream of data related to the skeleton.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream.NUI_SKELETON_FRAME_FLAG_SEATED_SUPPORT_ENABLED">
            <summary>
            This flag is returned in dwFlags of a skeleton frame that was captured while in seated mode.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream.NUI_SKELETON_TRACKING_FLAG_SUPPRESS_NO_FRAME_DATA">
            <summary>
            This value prevents the INuiSensor::NuiSkeletonGetNextFrame method from returning E_NUI_FRAME_NO_DATA errors. 
            Instead, calls to NuiSkeletonGetNextFrame block execution until data is available or the timeout period passes.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream.NUI_SKELETON_TRACKING_FLAG_TITLE_SETS_TRACKED_SKELETONS">
            <summary>
            This value disables the default player selection mode and enables the title to choose which detected skeletons are tracked.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream.NUI_SKELETON_TRACKING_FLAG_ENABLE_SEATED_SUPPORT">
            <summary>
            This value is used to enable seated skeleton tracking support.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream.NUI_SKELETON_TRACKING_FLAG_ENABLE_IN_NEAR_RANGE">
            <summary>
            This value is used to enable skeleton tracking while the depth camera is in near mode.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream.s_skeletonCount">
            <summary>
            This constant is the maximum number of trackable skeletons.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream._nuiSensor">
            <summary>
            This is the associated KinectSensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream._skeletonDataPool">
            <summary>
            This is the stream's pool for SkeletonData.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.#ctor(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initializes a new instance of the SkeletonStream class.
            </summary>
            <param name="mainNui">The associated KinectSensor.</param>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream.NextSkeletonEvent">
            <summary>
            This event is used to indicate the availability of a new skeleton frame.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream._isEnabled">
            <summary>
            This field indicates of the stream is enabled or not.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream._appChoosesSkeletons">
            <summary>
            This field indicates if the app is choosing skeletons or not.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream._trackingMode">
            <summary>
            Indicates whether the pipeline is running in seated or default tracking mode.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream._enableTrackingInNearRange">
            <summary>
            Indicates whether skeleton tracking is enabled when the depth
            camera is in near mode.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.Enable">
            <summary>
            This method is called to enable the skeleton stream with the default smoothing values.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.Enable(Microsoft.Kinect.TransformSmoothParameters)">
            <summary>
            This method is called to enable the skeleton stream.
            </summary>
            <param name="smoothParameters">The desired smoothing parameters.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.Disable">
            <summary>
            This method is called to disable the skeleton stream.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.SetEnabledState(System.Boolean)">
            <summary>
            This private method sets the enable state.
            </summary>
            <param name="enable">The value to set it to.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.SetSmoothingState(System.Boolean,Microsoft.Kinect.TransformSmoothParameters)">
            <summary>
            This method sets the smoothing state.
            </summary>
            <param name="enable">The value to set it to.</param>
            <param name="smoothParameters">The related smoothing parameters to use.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.ChooseSkeletons">
            <summary>
            This method chooses the default skeletons.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.ChooseSkeletons(System.Int32)">
            <summary>
            This method chooses a skeleton to track.
            </summary>
            <param name="trackingId1">The skeleton ID the application wishes to track.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.ChooseSkeletons(System.Int32,System.Int32)">
            <summary>
            This method chooses a skeleton to track.
            </summary>
            <param name="trackingId1">The first skeleton ID the application wishes to track.</param>
            <param name="trackingId2">The second skeleton ID the application wishes to track.</param>
        </member>
        <member name="F:Microsoft.Kinect.SkeletonStream._isTracking">
            <summary>
            This field indicates of the stream is tracking skeletons or not.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.StartTracking">
            <summary>
            This private method begins tracking skeletons.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.StopTracking">
            <summary>
            This private method stops tracking skeletons.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.Start">
            <summary>
            This internal method starts tracking.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.Stop">
            <summary>
            This internal method stops tracking.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.OpenNextFrame(System.Int32)">
            <summary>
            Retrieves the next SkeletonFrame from the sensor.  The SkeletonFrame must be disposed.
            </summary>
            <param name="millisecondsWait">The time to wait for a new frame from the sensor, in milliseconds.</param>
            <returns>The next ColorImageFrame, or null if the timeout has expired.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.StoreSkeletonData(System.Int32,Microsoft.Kinect.Interop._NUI_SKELETON_FRAME,System.Tuple{System.Single,System.Single,System.Single,System.Single})">
            <summary>
            Used to store the skeleton data during the window when it's available from native code.  
            </summary>
            <param name="frameNumber">The frameNumber of the skeleton data.</param>
            <param name="skeletonData">The native description of the skeleton data.</param>
            <param name="floorClipPlane">The floorClipPlane of the new frame.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.TryGetNextFrameInternal(System.Int32,System.Int32@,System.Int64@,Microsoft.Kinect.SkeletonTrackingMode@)">
            <summary>
            Retrieves the next frame from the sensor, and calls "StoreSkeletonData" with the data, if present.
            </summary>
            <param name="millisecondsWait">The time to wait for a new frame from the sensor, in milliseconds.</param>
            <param name="frameNumber">The frameNumber of the new frame.</param>
            <param name="timestamp">The timestamp of the new frame.</param>
            <param name="trackingMode">The tracking mode in which the frame was captured.</param>
            <returns>This method returns true if the method succeeded and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.LockSkeletonData(System.Int32)">
            <summary>
            This method locks the associated skeleton frame.
            </summary>
            <param name="frameNumber">The frame number to lock.</param>
            <returns>The available frame.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.UnlockSkeletonData(Microsoft.Kinect.DataPool{System.Int32,System.Tuple{System.Single,System.Single,System.Single,System.Single},System.Object,Microsoft.Kinect.Skeleton[],System.Nullable{System.Boolean}}.Entry)">
            <summary>
            This method unlocks the frame data.
            </summary>
            <param name="entry">The skeleton frame to unlock.</param>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonStream.Dispose">
            <summary>
            This method disposes the SkeletonStream.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonStream.Sensor">
            <summary>
            Gets the associated KinectSensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonStream.IsEnabled">
            <summary>
            Gets a value indicating whether the skeleton stream is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonStream.AppChoosesSkeletons">
            <summary>
            Gets or sets a value indicating whether the application will be responsible for choosing skeletons or not.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonStream.TrackingMode">
            <summary>
            Gets or sets the tracking mode.
            </summary>
            <value>
            The current tracking mode of the skeleton stream.
            The default value is SkeletonTrackingMode.Default.
            </value>
            <remarks>
            This property may be set at any time, regardless of the current
            state of SkeletonStream.IsEnabled or KinectSensor.IsRunning.
            If the tracking mode is changed while both SkeletonStream.IsEnabled
            and KinectSensor.IsRunning are true, any skeletons currently being
            tracked will be lost.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Indicates that the Kinect sensor is in a state that prevents
            skeleton tracking from running.
            </exception>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonStream.EnableTrackingInNearRange">
            <summary>
            Gets or sets a value indicating whether skeleton tracking is enabled
            when the KinectSensor's DepthImageStream.Range is DepthRange.Near.
            </summary>
            <value>
            The current tracking mode of the flag.
            The default value is false.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Indicates that the Kinect sensor is in a state that prevents
            skeleton tracking from running.
            </exception>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonStream.SmoothParameters">
            <summary>
            Gets the associated smoothing parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonStream.IsSmoothingEnabled">
            <summary>
            Gets a value indicating whether smoothing is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonStream.FrameSkeletonArrayLength">
            <summary>
            Gets the total length of the skeleton data buffer of each SkeletonFrame from this SkeletonStream.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ThreadSafeList`1">
            <summary>
            IList implementation with locking on all operations.
            </summary>
            <typeparam name="T">Type of generic IList to implement.</typeparam>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.#ctor">
            <summary>
            Initializes a new instance of the ThreadSafeList class with a new lock.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ThreadSafeList class with an existing new lock.
            </summary>
            <param name="critSec">Existing lock to use for this list.</param>
        </member>
        <member name="F:Microsoft.Kinect.ThreadSafeList`1._lock">
            <summary>
            Lock object to use for all operations.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ThreadSafeList`1._list">
            <summary>
            Wrapped list object.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the ThreadSafeList&lt;T&gt;.
            </summary>
            <param name="collection">
            The collection whose elements should be added to the end of the ThreadSafeList&lt;T&gt;.
            The collection itself cannot be null, but it can contain elements that are
            null, if type T is a reference type.
            </param>
            <exception cref="T:System.ArgumentNullException">Collection is null.</exception>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire ThreadSafeList&lt;T&gt;.
            </summary>
            <param name="item">
            The object to locate in the ThreadSafeList&lt;T&gt;. The value
            can be null for reference types.
            </param>
            <returns>
            The zero-based index of the first occurrence of item within the entire ThreadSafeList&lt;T&gt;,
            if found; otherwise, â€“1.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the ThreadSafeList&lt;T&gt; at the specified
            index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">
            The object to insert. The value can be null for reference types.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0.-or-index is greater than ThreadSafeList&lt;T&gt;.Count.</exception>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the ThreadSafeList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than 0.-or-index is equal to or greater than ThreadSafeList&lt;T&gt;.Count.</exception>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.Add(`0)">
            <summary>
            Adds an object to the end of the ThreadSafeList&lt;T&gt;.
            </summary>
            <param name="item">
            The object to be added to the end of the ThreadSafeList&lt;T&gt;.
            The value can be null for reference types.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.Clear">
            <summary>
            Removes all elements from the ThreadSafeList&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the ThreadSafeList&lt;T&gt;.
            </summary>
            <param name="item">
            The object to locate in the ThreadSafeList&lt;T&gt;. The value
            can be null for reference types.
            </param>
            <returns>
            true if item is found in the ThreadSafeList&lt;T&gt;; otherwise,
            false.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire ThreadSafeList&lt;T&gt; to a compatible one-dimensional
            array, starting at the beginning of the target array.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from ThreadSafeList&lt;T&gt;. The System.Array must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">ArrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source ThreadSafeList&lt;T&gt; is
            greater than the available space from arrayIndex to the end of the destination
            array.
            </exception>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.CopyTo(`0[])">
            <summary>
            Copies the entire ThreadSafeList&lt;Tgt; to a compatible one-dimensional
            array, starting at the beginning of the target array.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from System.Collections.Generic.List&lt;Tgt;. The System.Array must have
            zero-based indexing.
            </param>
            <exception cref="T:System.ArgumentNullException">Array is null.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source ThreadSafeList&lt;Tgt; is
            greater than the number of elements that the destination array can contain.
            </exception>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the ThreadSafeList&lt;T&gt;.
            </summary>
            <param name="item">
            The object to remove from the ThreadSafeList&lt;T&gt;. The value
            can be null for reference types.
            </param>
            <returns>
            true if item is successfully removed; otherwise, false. This method also
            returns false if item was not found in the ThreadSafeList&lt;T&gt;.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.NewEnumerator">
            <summary>
            Returns an enumerator that iterates through the ThreadSafeList&lt;T&gt;.
            </summary>
            <remarks>This support function exists to satisfy code quality warning CA2000.  Otherwise, it would be in-line.</remarks>
            <returns>A ThreadSafeList&lt;T&gt;.Enumerator for the ThreadSafeList&lt;T&gt;.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ThreadSafeList&lt;T&gt;.
            </summary>
            <remarks>This enumerator is a SNAPSHOT of the list.  Keep this in mind when using this enumerator.</remarks>
            <returns>A ThreadSafeList&lt;T&gt;.Enumerator for the ThreadSafeList&lt;T&gt;.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ThreadSafeList&lt;T&gt;.
            </summary>
            <remarks>This enumerator is a SNAPSHOT of the list.  Keep this in mind when using this enumerator.</remarks>
            <returns>A ThreadSafeList&lt;T&gt;.Enumerator for the ThreadSafeList&lt;T&gt;.</returns>
        </member>
        <member name="P:Microsoft.Kinect.ThreadSafeList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Microsoft.Kinect.ThreadSafeList`1.Count">
            <summary>
            Gets the number of elements actually contained in the ThreadSafeList&lt;T&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ThreadSafeList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read only.  Returns true.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator">
            <summary>
            Provides a SNAPSHOT enumerator of the list.  Keep this in mind when using this enumerator.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator._list">
            <summary>
            Snapshot to enumerate.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator._enum">
            <summary>
            Internal enumerator of the snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator.#ctor(Microsoft.Kinect.ThreadSafeList{`0})">
            <summary>
            Initializes a new instance of the ThreadSafeEnumerator class, creating a snapshot of the given list.
            </summary>
            <param name="list">List to snapshot.</param>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator.Dispose">
            <summary>
            Disposes the underlying enumerator.  Does not set _list or _enum to null so calls will still
            proxy to the disposed instance (and throw the proper exception).
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false
            if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:Microsoft.Kinect.ThreadSafeList`1.ThreadSafeEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:Microsoft.Kinect.SkeletonPoint">
            <summary>
            This struct describes a 3 dimensional point in skeleton space.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonPoint.Equals(System.Object)">
            <summary>
            This method compares two skeleton point objects.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonPoint.Equals(Microsoft.Kinect.SkeletonPoint)">
            <summary>
            This method compares two skeleton point objects.
            </summary>
            <param name="skeletonPoint">The SkeletonPoint to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonPoint.GetHashCode">
            <summary>
            This gets the hash code for a given skeleton point.
            </summary>
            <returns>The calculated hash code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonPoint.op_Equality(Microsoft.Kinect.SkeletonPoint,Microsoft.Kinect.SkeletonPoint)">
            <summary>
            This method compares two skeleton point objects.
            </summary>
            <param name="skeletonPoint1">The first SkeletonPoint to compare.</param>
            <param name="skeletonPoint2">The second SkeletonPoint to compare.</param>
            <returns>It returns true if they are equal and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.SkeletonPoint.op_Inequality(Microsoft.Kinect.SkeletonPoint,Microsoft.Kinect.SkeletonPoint)">
            <summary>
            This method compares two skeleton point objects.
            </summary>
            <param name="skeletonPoint1">The first SkeletonPoint to compare.</param>
            <param name="skeletonPoint2">The second SkeletonPoint to compare.</param>
            <returns>It returns true if they are not equal and false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonPoint.X">
            <summary>
            Gets or sets the X coordinate of the skeleton point.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonPoint.Y">
            <summary>
            Gets or sets the Y coordinate of the skeleton point.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.SkeletonPoint.Z">
            <summary>
            Gets or sets the Z coordinate of the skeleton point.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ColorImageFormat">
            <summary>
            Image formats for the Color Image Stream. It represents Image Data format, Framerate, and Resolution.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFormat.Undefined">
            <summary>
            The image format is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFormat.RgbResolution640x480Fps30">
            <summary>
            RGB data (32 bits per pixel, layout corresponding to PixelFormats.Bgr32).
            Resolution of 640 by 480 at 30 Frames per second.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFormat.RgbResolution1280x960Fps12">
            <summary>
            RGB data (32 bits per pixel, layout corresponding to PixelFormats.Bgr32).
            Resolution of 1280 by 960 at 12 Frames per second.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFormat.YuvResolution640x480Fps15">
            <summary>
            The data is collected from the Kinect as YUV, but it is translated to:
            RGB data (32 bits per pixel, layout corresponding to PixelFormats.Bgr32).
            Resolution of 640 by 480 at 15 Frames per second.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFormat.RawYuvResolution640x480Fps15">
            <summary>
            YUV data (32 bits per pixel, layout corresponding to D3DFMT_LIN_UYVY).
            Resolution of 640 by 480 at 15 Frames per second.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFormat.InfraredResolution640x480Fps30">
            <summary>
            Infrared data (16 bits per pxel)
            Resolution of 640 by 480 at 30 Frames per second.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFormat.RawBayerResolution640x480Fps30">
            <summary>
            Bayer data (8 bits per pixel, layout in alternating pixels of red, green and blue).
            Resolution of 640 by 480 at 30 Frames per second.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageFormat.RawBayerResolution1280x960Fps12">
            <summary>
            Bayer data (8 bits per pixel, layout in alternating pixels of red, green and blue).
            Resolution of 1280 by 960 at 12 Frames per second.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.ColorImageStream">
            <summary>
            Represents the stream of Color Image data from the Kinect.
            It should only be used as a property of a KinectSensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageStream._imageType">
            <summary>
            The current image type of this stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageStream._colorImageFormat">
            <summary>
            The current image format of this stream.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageStream._colorDataPool">
            <summary>
            The related color data pool.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.ColorImageStream._cameraSettings">
            <summary>
            The color camera settings field.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.ScaleValue(System.Single)">
            <summary>
            This method returns the resolution scale of the value provided.
            </summary>
            <param name="value">The source value.</param>
            <returns>The scaled value based on a 640x480 resolution.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.#ctor(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initializes a new instance of the ColorImageStream class.
            </summary>
            <param name="mainNui">The sensor this stream relates to.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.Enable">
            <summary>
            Enables the Color Image Stream for this Kinect Sensor using the default of
            ColorImageFormat.RgbResolution640x480Fps30.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.Enable(Microsoft.Kinect.ColorImageFormat)">
            <summary>
            Enables the Color Image Stream for this Kinect Sensor, with the specified format.
            </summary>
            <param name="format">The Image Data format, Framerate, and Resolution.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.OpenNextFrame(System.Int32)">
            <summary>
            Retrieves the next ColorImageFrame from the sensor.  The ColorImageFrame must be disposed.
            </summary>
            <param name="millisecondsWait">The time to wait for a new frame from the sensor, in milliseconds.</param>
            <returns>The next ColorImageFrame, or null if the timeout has expired.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.StorePixels(System.Int32,Microsoft.Kinect.Interop._NUI_LOCKED_RECT,Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution,System.IntPtr,Microsoft.Kinect.Interop._NUI_IMAGE_FRAME@)">
            <summary>
            Store the pixel data during the window when it's available from native code.  
            </summary>
            <param name="frameNumber">The frameNumber of the pixel data.</param>
            <param name="lockedRect">The native description of the pixel data.</param>
            <param name="imageType">The ImageType of the pixels.</param>
            <param name="resolution">The Resolution of the pixels.</param>
            <param name="nativeStreamHandle">The native stream handle.</param>
            <param name="pNativeFrame">The native image frame.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.LockPixelData(System.Int32)">
            <summary>
            This method locks the pixel data for a given frame number.
            </summary>
            <param name="frameNumber">The frame number.</param>
            <returns>A locked pixel data if available.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.UnlockPixelData(Microsoft.Kinect.DataPool{System.Int32,Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution,System.Byte[],System.Nullable{System.Boolean}}.Entry)">
            <summary>
            This method unlocks the pixel data.
            </summary>
            <param name="entry">The data to unlock.</param>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.LookUpImageResolution(Microsoft.Kinect.ColorImageFormat)">
            <summary>
            This method looks up the image resolution based on a given color format.
            </summary>
            <param name="format">The color format.</param>
            <returns>The ImageResolution for the ColorImageFormat.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.LookUpColorImageFormat(Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution)">
            <summary>
            This method looks up the ColorImageFormat for the given ImageType and ImageResolution.
            </summary>
            <param name="imageType">The image type.</param>
            <param name="imageResolution">The image resolution.</param>
            <returns>The ColorImageFormat for the combination.</returns>
        </member>
        <member name="M:Microsoft.Kinect.ColorImageStream.LookUpPixelDataLength(Microsoft.Kinect.ColorImageFormat)">
            <summary>
            Returns the required length for a pixel data array based on the provided ColorImageFormat.
            </summary>
            <param name="format">The ColorImageFormat for which to lookup the required pixel data array length.</param>
            <returns>The required length for a pixel data array based on the provided ColorImageFormat.</returns>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageStream.NominalFocalLengthInPixels">
            <summary>
            Gets the nominal focal length of color image in pixels, adjusted for resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageStream.NominalInverseFocalLengthInPixels">
            <summary>
            Gets the inverse of the NominalFocalLengthInPixels, or 1/NominalFocalLengthInPixels.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageStream.NominalDiagonalFieldOfView">
            <summary>
            Gets the nominal diagonal field of view of color image.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageStream.NominalHorizontalFieldOfView">
            <summary>
            Gets the nominal horizontal field of view of color image.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageStream.NominalVerticalFieldOfView">
            <summary>
            Gets the nominal vertical field of view of color image.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageStream.CameraSettings">
            <summary>
            Gets the color camera settings.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageStream.Format">
            <summary>
            Gets the current Framerate and Resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.ColorImageStream.ImageType">
            <summary>
            Gets the ImageType for the stream.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DepthRange">
            <summary>
            Possible Ranges for the Depth Sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthRange.Default">
            <summary>
            Default or XBox range: 800mm to 4000mm.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthRange.Near">
            <summary>
            Range adjusted for up-close viewing: 400mm to 3000mm.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DepthImageFormat">
            <summary>
            Image formats for the Depth Image Stream. It represents Framerate, and Resolution.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFormat.Undefined">
            <summary>
            The image format is undefined.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFormat.Resolution640x480Fps30">
            <summary>
            Resolution of 640 by 480 at 30 Frames per second.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFormat.Resolution320x240Fps30">
            <summary>
            Resolution of 320 by 240 at 30 Frames per second.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageFormat.Resolution80x60Fps30">
            <summary>
            Resolution of 80 by 60 at 30 Frames per second.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.DepthImageStream">
            <summary>
            Represents the stream of Depth Image data from the Kinect.
            It should only be used as a property of a KinectSensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._DefaultMinDepth">
            <summary>
            The default minimum depth.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._DefaultMaxDepth">
            <summary>
            The default maximum depth.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._NearMinDepth">
            <summary>
            The near mode minimum depth.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._NearMaxDepth">
            <summary>
            The near mode maximum depth.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._TooNearDepth">
            <summary>
            The value indicating too near.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._TooFarDepth">
            <summary>
            The value indicating too far.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._UnknownDepth">
            <summary>
            The value for an unknown depth.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream.DepthBytesPerPixelConstant">
            <summary>
            The depth bytes per pixel constant.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.ScaleValue(System.Single)">
            <summary>
            This method returns the resolution scale of the value provided.
            </summary>
            <param name="value">The source value.</param>
            <returns>The scaled value based on a 320x240 resolution.</returns>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._range">
            <summary>
            The current depth range mode.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._minDepth">
            <summary>
            The current minimum depth value.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._maxDepth">
            <summary>
            The current maximum depth value.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._depthImageFormat">
            <summary>
            The current depth image format.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.DepthImageStream._depthDataPool">
            <summary>
            The depth data pool.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.#ctor(Microsoft.Kinect.KinectSensor)">
            <summary>
            Initializes a new instance of the DepthImageStream class.
            </summary>
            <param name="mainNui">The related sensor object.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.Enable">
            <summary>
            Enables the Depth Image Stream for this Kinect Sensor using the default value of
            DepthImageFormat.Resolution640x480Fps30.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.Enable(Microsoft.Kinect.DepthImageFormat)">
            <summary>
            Enables the Depth Image Stream for this Kinect Sensor, with the specified format.
            </summary>
            <param name="format">The Framerate, and Resolution.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.OpenNextFrame(System.Int32)">
            <summary>
            Retrieves the next DepthImageFrame from the sensor.  The DepthImageFrame must be disposed.
            </summary>
            <param name="millisecondsWait">Time to wait for a new frame from the sensor, in milliseconds.</param>
            <returns>The next DepthImageFrame, or null if the timeout has expired.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.StorePixels(System.Int32,Microsoft.Kinect.Interop._NUI_LOCKED_RECT,Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution,System.IntPtr,Microsoft.Kinect.Interop._NUI_IMAGE_FRAME@)">
            <summary>
            Store the pixel data during the window when it's available from native code.  
            </summary>
            <param name="frameNumber">The frameNumber of the pixel data.</param>
            <param name="lockedRect">The native description of the pixel data.</param>
            <param name="imageType">The ImageType of the pixels.</param>
            <param name="resolution">The Resolution of the pixels.</param>
            <param name="nativeStreamHandle">The native stream handle.</param>
            <param name="pNativeFrame">The native image frame.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.LockPixelData(System.Int32)">
            <summary>
            This method locks the pixel data for a given frame number.
            </summary>
            <param name="frameNumber">The frame number.</param>
            <returns>A locked pixel data if available.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.UnlockPixelData(Microsoft.Kinect.DataPool{System.Int32,Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution,System.Int16[],Microsoft.Kinect.DepthImagePixel[]}.Entry)">
            <summary>
            This method unlocks the pixel data.
            </summary>
            <param name="entry">The data to unlock.</param>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.LookUpImageResolution(Microsoft.Kinect.DepthImageFormat)">
            <summary>
            This method looks up the image resolution based on a given depth format.
            </summary>
            <param name="format">The depth format.</param>
            <returns>The ImageResolution for the DepthImageFormat.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.LookUpDepthImageFormat(Microsoft.Kinect.ImageType,Microsoft.Kinect.ImageResolution)">
            <summary>
            This method looks up the DepthImageFormat for the given ImageType and ImageResolution.
            </summary>
            <param name="imageType">The image type.</param>
            <param name="imageResolution">The image resolution.</param>
            <returns>The DepthImageFormat for the combination.</returns>
        </member>
        <member name="M:Microsoft.Kinect.DepthImageStream.LookUpPixelDataLength(Microsoft.Kinect.DepthImageFormat)">
            <summary>
            Returns the required length for a pixel data array based on the provided DepthImageFormat.
            </summary>
            <param name="format">The DepthImageFormat for which to lookup the required pixel data array length.</param>
            <returns>The required length for a pixel data array based on the provided DepthImageFormat.</returns>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.NominalFocalLengthInPixels">
            <summary>
            Gets the nominal focal length of depth image in pixels, adjusted for resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.NominalInverseFocalLengthInPixels">
            <summary>
            Gets the inverse of the NominalFocalLengthInPixels, or 1/NominalFocalLengthInPixels.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.NominalDiagonalFieldOfView">
            <summary>
            Gets the nominal diagonal field of view of depth image.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.NominalHorizontalFieldOfView">
            <summary>
            Gets the nominal horizontal field of view of depth image.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.NominalVerticalFieldOfView">
            <summary>
            Gets the nominal vertical field of view of depth image.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.Range">
            <summary>
            Gets or sets the current sensitive range of the Depth Sensor.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.Format">
            <summary>
            Gets the current Framerate, and Resolution.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.TooNearDepth">
            <summary>
            Gets the constant Depth value for data that is too near for the sensor to accurately track.
            This value is guaranteed to be smaller than MinDepth. Note that objects very near
            the sensor may actually return UnknownDepth.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.TooFarDepth">
            <summary>
            Gets the constant Depth value for data that is too far beyond the sensor range.
            This value is guaranteed to be larger than MaxDepth.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.UnknownDepth">
            <summary>
            Gets the constant Depth value for data that is at an unknown distance.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.MinDepth">
            <summary>
            Gets the minimum Depth value in mm for the current sensor range setting.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.MaxDepth">
            <summary>
            Gets the maximum Depth value in mm for the current sensor range setting.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.DepthImageStream.ImageType">
            <summary>
            This property can change based on external changes to Sensor.SkeletonStream,
            and therefore must be queried every time the value is required.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.NuiSensorProperty">
            <summary>
            IPropertyStore property indexes for INuiSensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.NuiSensorProperty.Default">
            <summary>
            Default value.  Not used.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.NuiSensorProperty.IsSupported">
            <summary>
            Internal IsSupported property for sensor.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.NuiAudioBeam">
            <summary>
            Provides the location of a sound source.
            Wrapper for INuiAudioBeam COM interface.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiAudioBeam.#ctor(Microsoft.Kinect.Interop.INuiAudioBeam)">
            <summary>
            Initializes a new instance of the NuiAudioBeam class with the given audio device.
            </summary>
            <param name="beam">The audio device to wrap.</param>
        </member>
        <member name="F:Microsoft.Kinect.NuiAudioBeam._beam">
            <summary>
            The wrapped audio device.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiAudioBeam.GetBeam(System.Double@)">
            <summary>
            Gets the currently selected beam direction.
            </summary>
            <param name="angle">Receives the horizontal angle (in radians) of the currently selected 
            beam in camera coordinates, where the x-z axes define the horizontal plane. The angle is 
            relative to the z-axis, which is perpendicular to the Kinect sensor.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiAudioBeam.SetBeam(System.Double)">
            <summary>
            Sets the currently selected beam direction.
            The KinectAudio DMO supports 11 beams. They have fixed directions ranging from âˆ’0.875 
            radians to +0.875 radians in .0175 radian increments, which corresponds to approximately 
            âˆ’50 degrees to +50 degrees, in ten degree increments.
            </summary>
            <param name="angle">The beam angle, in radians.</param>
            <remarks>Important : To use SetBeam, you must set the KinectAudio DMO's MFPKEY_WMAAECMA_FEATR_MICARR_MODE 
            property key to MIC_ARRAY_MODE.MICARRAY_EXTERN_BEAM. </remarks>
        </member>
        <member name="M:Microsoft.Kinect.NuiAudioBeam.GetPosition(System.Double@,System.Double@)">
            <summary>
            Provides the best estimate of the sound source location, as determined by the KinectAudio DMO's sound source localizer.
            </summary>
            <param name="angle">Receives the estimated horizontal angle (in radians) to the sound source 
            in camera coordinates, where the x-z axes define the horizontal plane. The angle is relative 
            to the z-axis, which is perpendicular to the Kinect sensor.</param>
            <param name="confidence">Receives the confidence value of the estimate.</param>
            <remarks>You must call IMediaObject::ProcessOutput before calling GetPosition. This method 
            drives the processing of audio samples through the audio pipeline, which is required for 
            determining the source direction. GetPosition will be successful only if ProcessOutput has 
            returned S_OK. Do not simply check for success, because ProcessOutput can also return S_FALSE 
            if it lacks sufficient data to proceed. If ProcessOutput returns S_FALSE, continue calling the 
            method until it returns S_OK, and then call GetPosition. 
            GetPosition is based on a measurement queue. If the queue empties, the function returns zero 
            for both parameters.
            </remarks>
        </member>
        <member name="P:Microsoft.Kinect.NuiAudioBeam.Wrapped">
            <summary>
            Gets the wrapped audio device.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.NuiCoordinateMapper">
            <summary>
            A class for performing mapping between depth space, color space, and skeleton space.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.NuiCoordinateMapper._nuiCoordinateMapper">
            <summary>
            Privately cached copy of INuiCoordinateMapper interface.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.#ctor(Microsoft.Kinect.Interop.INuiCoordinateMapper)">
            <summary>
            Initializes a new instance of the NuiCoordinateMapper class.
            </summary>
            <param name="nuiCoordinateMapper">The INuiCoordinateMapper interface to wrap.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the NuiCoordinateMapper class.
            </summary>
            <param name="parameters">The INuiCoordinateMapper interface to wrap.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.Init">
            <summary>
            Common constructor functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.GetColorToDepthRelationalParameters">
            <summary>
            Returns the relational parameters from native and copys them into a byte array.
            </summary>
            <returns>The relational parameters.</returns>
        </member>
        <member name="F:Microsoft.Kinect.NuiCoordinateMapper._relationalParametersChangedHandler">
            <summary>
            Event variable for RelationalParametersChanged.  Calls marshalled to main thread.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.MapDepthPointToColorPoint(Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.Interop._NUI_DEPTH_IMAGE_POINT@,Microsoft.Kinect.Interop._NUI_IMAGE_TYPE,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.Interop._NUI_COLOR_IMAGE_POINT@)">
            <summary>
            Gets the pixel coordinates in color space that correspond to the specified pixel coordinates in depth space, using the specified depth resolution. 
            </summary>
            <param name="eDepthResolution">The resolution of the depth image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="depthPoint">The DepthImagePoint to map to color space.</param>
            <param name="eColorType">Color type.</param>
            <param name="eColorResolution">The resolution of the color image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="colorPoint">The ColorImagePoint to recieve the mapped value.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.MapDepthFrameToColorFrame(Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.DepthImagePixel[],Microsoft.Kinect.Interop._NUI_IMAGE_TYPE,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.ColorImagePoint[])">
            <summary>
            Converts a frame's worth of data from depth space to color space. 
            </summary>
            <param name="eDepthResolution">The resolution of the depth image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="depthPixels">The data from an entire depth frame .</param>
            <param name="eColorType">Color type.</param>
            <param name="eColorResolution">The resolution of the color image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="colorPoints">Array to hold the color frame X,Y coordinates for each pixel in the depth frame.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.MapColorFrameToSkeletonFrame(Microsoft.Kinect.Interop._NUI_IMAGE_TYPE,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.DepthImagePixel[],Microsoft.Kinect.SkeletonPoint[])">
            <summary>
            Gets the pixel coordinates in skeleton space that correspond to the specified pixel in color space, using the provided color and depth resolutions.
            </summary>
            <param name="eColorType">Color type.</param>
            <param name="eColorResolution">The resolution of the color image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="eDepthResolution">The resolution of the depth image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="depthPixels">The input array of DepthImagePixels to map from, size should be equal to that specified by eDepthResolution.</param>
            <param name="skeletonPoints">The output array of SkeletonPoints, size should be equal to that specified by eColorResolution.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.MapDepthFrameToSkeletonFrame(Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.DepthImagePixel[],Microsoft.Kinect.SkeletonPoint[])">
            <summary>
            Gets the pixel coordinates in skeleton space that correspond to the specified pixel in depth space, using the provided depth resolution.
            </summary>
            <param name="eDepthResolution">The resolution of the depth image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="depthPixels">The input array of DepthImagePixels to map from, size should be equal to that specified by eDepthResolution.</param>
            <param name="skeletonPoints">The output array of SkeletonPoints, size should be equal to that specified by eDepthResolution.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.MapColorFrameToDepthFrame(Microsoft.Kinect.Interop._NUI_IMAGE_TYPE,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.DepthImagePixel[],Microsoft.Kinect.DepthImagePoint[])">
            <summary>
            Gets the pixel coordinates in depth space that correspond to the specified pixel coordinates in color space, using the provided color and depth resolutions.
            </summary>
            <param name="eColorType">Color type.</param>
            <param name="eColorResolution">The resolution of the color image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="eDepthResolution">The resolution of the depth image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="depthPixels">The input array of DepthImagePixels to map from, size should be equal to that specified by eDepthResolution.</param>
            <param name="depthPoints">The output array of DepthImagePoints, size should be equal to that specified by eColorResolution.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiCoordinateMapper.Microsoft#Kinect#Interop#INuiCoordinateMapperParametersChangedEvent#Invoke">
            <summary>
            Called by the native runtime when the underlying parameters have changed.
            </summary>
            <returns>Returns S_OK always.</returns>
        </member>
        <member name="E:Microsoft.Kinect.NuiCoordinateMapper.RelationalParametersChanged">
            <summary>
            Fires when the paramaters have been changed (e.g. by KinectStudio).
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.NuiSensor">
            <summary>
            Wraps the native INuiSensor interface, which provides native access to a sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.NuiSensor._nuiSensor">
            <summary>
            The wrapped sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.NuiSensor._depthFilter">
            <summary>
            The current depth filter.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.NuiSensor._depthFilters">
            <summary>
            All depth filters ever used by this sensor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.#ctor(Microsoft.Kinect.Interop.INuiSensor)">
            <summary>
            Initializes a new instance of the NuiSensor class.
            Wrapper for INuiSensor.  Slightly more managed friendly than a raw INuiSensor.
            </summary>
            <param name="wrapped">INuiSensor object to wrap.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiInstanceIndex">
            <summary>
            Gets the zero-based sensor index.
            </summary>
            <returns>Returns the sensor index.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiInitialize(System.UInt32)">
            <summary>
            Initializes the NUI engine.
            </summary>
            <param name="dwFlags">The NUI subsystems to initialize, as a bitwise-OR combination of 
            the NUI_INITIALIZE constants.</param>
        </member>
        <member name="F:Microsoft.Kinect.NuiSensor._nuiAudioSource">
            <summary>
            Caches the INuiAudioBeam object for the sensor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiGetAudioSource">
            <summary>
            Gets the audio source from a specific sensor.
            </summary>
            <returns>The INuiAudioBeam interface for the audio source.</returns>
        </member>
        <member name="F:Microsoft.Kinect.NuiSensor._nuiCoordinateMapper">
            <summary>
            Caches the INuiCoordinateMapper object for the sensor.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiGetCoordinateMapper">
            <summary>
            Gets the coordinate mapping object from a specific sensor.
            </summary>
            <returns>The INuiCoordinateMapper interface for the sensor.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiShutdown">
            <summary>
            Shuts down the NUI engine.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiSetFrameEndEvent(System.IntPtr,System.UInt32)">
            <summary>
            Sets the event that signals the last frame.
            </summary>
            <param name="hEvent">A handle to the event.</param>
            <param name="dwFrameEventFlag">The frame event options, as a bitwise-OR combination of the NUI_IMAGE_STREAM_FLAG constants.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiImageStreamOpen(Microsoft.Kinect.Interop._NUI_IMAGE_TYPE,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr@)">
            <summary>
            Opens an image stream.
            </summary>
            <param name="eImageType">A NUI_IMAGE_TYPE value that specifies which image stream to open. 
            The valid values for this parameter depend on the flags that you passed to the dwFlags 
            parameter of the INuiSensor::NuiInitialize method.</param>
            <param name="eResolution">A NUI_IMAGE_RESOLUTION value that specifies which resolution to 
            use for the image stream. The valid values for this parameter depend on the flags that you 
            passed to the dwFlags parameter of the INuiSensor::NuiInitialize method.</param>
            <param name="dwImageFrameFlags">Not used; specify NULL.</param>
            <param name="dwFrameLimit">The number of frames that the NUI runtime should buffer. 
            The maximum value is NUI_IMAGE_STREAM_FRAME_LIMIT_MAXIMUM. Most applications 
            should use a frame limit of two.</param>
            <param name="hNextFrameEvent">A handle to a manual reset event that will be fired when 
            the next frame in the stream is available.</param>
            <param name="phStreamHandle">A pointer that receives a handle to the opened stream.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiImageStreamSetImageFrameFlags(System.IntPtr,System.UInt32)">
            <summary>
            Sets the image frame flags for the specified stream.
            </summary>
            <param name="hStream">A handle to the stream.</param>
            <param name="dwImageFrameFlags">The image frame flags.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiImageStreamGetImageFrameFlags(System.IntPtr)">
            <summary>
            Gets the image frame flags for the specified stream.
            </summary>
            <param name="hStream">A handle to the stream.</param>
            <returns>A DWORD that receives the image frame flags.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiImageStreamGetNextFrameNoThrow(System.IntPtr,System.UInt32,Microsoft.Kinect.Interop._NUI_IMAGE_FRAME@)">
            <summary>
            Gets the next frame of data from the specified image stream.
            </summary>
            <param name="hStream">A handle to the image stream. This stream must have been opened by a call to the NuiImageStreamOpen method.</param>
            <param name="dwMillisecondsToWait">The timeout (in milliseconds) before returning without a new frame.</param>
            <param name="pImageFrame">A pointer to a NUI_IMAGE_FRAME structure that receives the next image 
            frame in the specified stream. The pFrameTexture member of the structure points to an 
            INuiFrameTexture instance that contains the frame data.</param>
            <returns>Returns S_OK if successful; otherwise, returns a failure code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiImageStreamReleaseFrame(System.IntPtr,Microsoft.Kinect.Interop._NUI_IMAGE_FRAME@)">
            <summary>
            Releases the specified frame of data from the specified stream.
            </summary>
            <param name="hStream">A handle to the stream. This stream must have been opened by a call to the INuiSensor::NuiImageStreamOpen method.</param>
            <param name="pImageFrame">A pointer to the frame to release.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiImageFrameGetDepthImagePixelFrameTexture(System.IntPtr,Microsoft.Kinect.Interop._NUI_IMAGE_FRAME@,System.Boolean@,Microsoft.Kinect.Interop.INuiFrameTexture@)">
            <summary>
            Returns a pointer to an INuiFrameTexture that contains the data of a depth frame
            in NUI_DEPTH_IMAGE_PIXEL format (instead of packed USHORTs).
            </summary>
            <param name="hStream">A handle to the open depth stream.</param>
            <param name="pImageFrame">
            The NUI_IMAGE_FRAME for which the texture is being requested. This must be a valid
            frame returned by a call to NuiImageStreamGetNextFrame on hStream, and not
            yet released by a call to NuiImageStreamReleaseFrame.
            </param>
            <param name="nearMode">
            Returns true if the frame was captured in near mode; false if it was captured in
            default mode.
            </param>
            <param name="ppTexture">
            Returns a pointer to an INuiFrameTexture containing the depth pixels.
            The lifetime of this texture is tied to the lifetime of pImageFrame;
            application code must not access the texture after NuiImageStreamRelease has been
            called on pImageFrame.
            </param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiImageGetColorPixelCoordinatesFromDepthPixelAtResolution(Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.Interop._NUI_IMAGE_VIEW_AREA@,System.Int32,System.Int32,System.UInt16,System.Int32@,System.Int32@)">
            <summary>
            Gets the pixel coordinates in color space that correspond to the specified pixel coordinates in depth space, using the specified depth resolution. 
            </summary>
            <param name="eColorResolution">The resolution of the color image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="eDepthResolution">The resolution of the depth image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="pcViewArea">The optional zoom and pan settings of the color image, as a pointer 
            to a NUI_IMAGE_VIEW_AREA structure. To ensure that the settings are valid, use the ViewArea 
            member of the NUI_IMAGE_FRAME that you are registering pixels against. Do not instantiate 
            and populate this structure manually.</param>
            <param name="lDepthX">The X coordinate in depth image space.</param>
            <param name="lDepthY">The Y coordinate in depth image space.</param>
            <param name="usDepthValue">The depth value in depth image space. This value is constrained 
            between NUI_IMAGE_DEPTH_MINIMUM and NUI_IMAGE_DEPTH_MINIMUM.</param>
            <param name="plColorX">Pointer to a LONG value that receives the X coordinate of the pixel in 
            color image space. This pointer must be non-NULL when you call this function. If this method 
            does not return S_OK, this data is invalid. This value can be outside of the bounds of the 
            color image.</param>
            <param name="plColorY">Pointer to a LONG value that receives the Y coordinate of the pixel 
            in color image space. This pointer must be non-NULL when you call this function. If this 
            method does not return S_OK, this data is invalid. This value can be outside of the bounds 
            of the color image.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiImageGetColorPixelCoordinateFrameFromDepthPixelFrameAtResolution(Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,Microsoft.Kinect.Interop._NUI_IMAGE_RESOLUTION,System.Int16[],Microsoft.Kinect.ColorImagePoint[])">
            <summary>
            Converts a frame's worth of data from depth space to color space. 
            </summary>
            <param name="eColorResolution">The resolution of the color image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="eDepthResolution">The resolution of the depth image, as a NUI_IMAGE_RESOLUTION enumeration constant.</param>
            <param name="depthValues">The data from an entire depth frame .</param>
            <param name="colorCoordinates">Array to hold the color frame X,Y coordinates for each pixel in the depth frame.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiCameraElevationSetAngle(System.Int32)">
            <summary>
            Sets the elevation angle of the Kinect sensor.
            </summary>
            <param name="lAngleDegrees">The elevation angle relative to gravity, in degrees. 
            A value of zero indicates that the sensor array should point exactly horizontally. 
            Positive values indicate that the sensor array should point above the horizon, and 
            negative values indicate that the sensor array should point below the horizon. This 
            value is constrained between NUI_CAMERA_ELEVATION_MINIMUM and NUI_CAMERA_ELEVATION_MAXIMUM.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiCameraElevationGetAngle">
            <summary>
            Gets the elevation angle of the Kinect sensor. 
            </summary>
            <returns>
            The current elevation angle relative to gravity, in degrees. The pointer must be non-NULL 
            when you call the function. After the function call returns, the LONG value contains the 
            elevation angle. Valid angles range from NUI_CAMERA_ELEVATION_MINIMUM to 
            NUI_CAMERA_ELEVATION_MAXIMUM.
            </returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiAccelerometerGetCurrentReading">
            <summary>
            Gets the current accelerometer reading of the Kinect sensor.
            </summary>
            <returns>
            A Vector4 pointing in the directon of gravity.
            </returns>
            <remarks>
            <para>The accelerometer reading is returned as a 3d vector pointing in the direction of 
            gravity (i.e. floor (gravity) on a non-accelerating sensor).  The unit of the vector
            is in gravity units (g), 9.81m/s^2.  The coordinate system is centered on the sensor, 
            right-handed coordinate system with positive-Z in the direction the sensor is pointing at.  
            In the default sensor rotation (horizontal, level placement), this will return the vector 
            (0, -1.0, 0, 0).  The w value of the Vector4 is always set to 0.0.</para>
            </remarks>   
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiSkeletonTrackingEnable(System.IntPtr,System.UInt32)">
            <summary>
            Enables skeletal tracking.
            </summary>
            <param name="hNextFrameEvent">A handle to an application-allocated, manual reset event that 
            will be set whenever a new frame of skeleton data is available, and will be reset whenever 
            the latest frame data is returned. This can be NULL.</param>
            <param name="dwFlags">
            Flags that control skeleton tracking, as a bitwise-OR combination of the values 
            in the following table. Flag Description 
            NUI_SKELETON_TRACKING_FLAG_SUPPRESS_NO_FRAME_DATA  - Prevents the 
            INuiSensor::NuiSkeletonGetNextFrame method from returning E_NUI_FRAME_NO_DATA errors. 
            Instead, calls to NuiSkeletonGetNextFrame block execution until data 
            is available or the timeout period passes.  
            NUI_SKELETON_TRACKING_FLAG_TITLE_SETS_TRACKED_SKELETONS - Disables the default player 
            selection mode and enables the title to choose which detected skeletons are tracked. 
            </param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiSkeletonTrackingDisableNoThrow">
            <summary>
            Disables skeleton tracking.
            </summary>
            <returns>S_OK if successful; otherwise, returns a failure code.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiSkeletonGetNextFrameNoThrow(System.UInt32,Microsoft.Kinect.Interop._NUI_SKELETON_FRAME@)">
            <summary>
            Gets the next frame of data from the skeleton stream.
            </summary>
            <param name="dwMillisecondsToWait">The timeout (in milliseconds) before returning without a new frame.</param>
            <param name="pSkeletonFrame">A pointer to a NUI_SKELETON_FRAME structure that receives the next image frame in the skeleton stream.</param>
            <returns>Returns S_OK if successful; otherwise, returns one of the following failure codes: E_POINTER, E_NUI_FRAME_NO_DATA.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiTransformSmooth(Microsoft.Kinect.Interop._NUI_SKELETON_FRAME@,Microsoft.Kinect.Interop._NUI_TRANSFORM_SMOOTH_PARAMETERS@)">
            <summary>
            Filters skeleton positions to reduce jitter between frames.
            </summary>
            <param name="pSkeletonFrame">Points to a NUI_SKELETON_FRAME Structure that contains the skeleton data to be smoothed. On exit, the skeleton data in the structure has been replaced by smoothed data. If this function does not return S_OK, this data is unchanged.</param>
            <param name="pSmoothingParams">The parameters for the smoothing function. See the NUI_TRANSFORM_SMOOTH_PARAMETERS structure for a description of the parameters.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiDeviceConnectionId">
            <summary>
            Gets the sensor connection ID.
            </summary>
            <returns>The hub device instance id.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiUniqueId">
            <summary>
            Gets the unique ID for the sensor.
            </summary>
            <returns>The camera device instance id.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiAudioArrayId">
            <summary>
            Gets the audio array ID. 
            </summary>
            <returns>Returns the audio array ID.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiStatus">
            <summary>
            Gets the connection status of the Kinect sensor.
            </summary>
            <returns>Returns S_OK if successful; otherwise, returns one of the following failure codes: E_NUI_NOTCONNECTED.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiInitializationFlags">
            <summary>
            Gets the flags that were passed to the INuiSensor::NuiInitialize method.
            </summary>
            <returns>Returns the initialization flags.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiSkeletonSetTrackedSkeletons(System.UInt32,System.UInt32)">
            <summary>
            Sets an array of IDs for skeletal tracking.
            </summary>
            <param name="trackingId1">The tracking ID for the first skeleton.</param>
            <param name="trackingId2">The tracking ID for the second skeleton.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.NuiGetColorCameraSettings">
            <summary>
            Retrieves the color camera settings native object.
            This method will throw if the settings are not supported.
            </summary>
            <returns>The color camera settings.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiSensor.GetDepthFilterForTimestamp(System.Int64)">
            <summary>
            Returns the depth filter corresponding to a depth or skeleton frame captured at a
            particular timestamp.
            </summary>
            <param name="timestamp">The timestamp at which the frame was captured.</param>
            <returns>The depth filter that was applied to the frame.</returns>
        </member>
        <member name="P:Microsoft.Kinect.NuiSensor.IsSupported">
            <summary>
            Gets a value indicating whether the device is a supported Kinect.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.NuiSensor.Item(Microsoft.Kinect.NuiSensorProperty)">
            <summary>
            Returns a private property from the NuiSensors IPropertyStore.
            </summary>
            <param name="index">Index of the property to retrieve.</param>
            <returns>The property value.</returns>
        </member>
        <member name="P:Microsoft.Kinect.NuiSensor.ForceInfraredEmitterOff">
            <summary>
            Gets or sets a value indicating whether the infrared emitter is disabled.
            Default value of false.
            </summary>
        </member>
        <member name="P:Microsoft.Kinect.NuiSensor.DepthFilter">
            <summary>
            Gets or sets a filter to be applied to each depth frame.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.NuiColorCameraSettings">
            <summary>
            This is the wrapper class for the color camera settings.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.NuiColorCameraSettings._nuiColorCameraSettings">
            <summary>
            This field holds on to the INuiColorCameraSettings object.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.#ctor(Microsoft.Kinect.Interop.INuiColorCameraSettings)">
            <summary>
            Initializes a new instance of the NuiColorCameraSettings class.
            </summary>
            <param name="nuiColorCameraSettings">The underlying native settings object.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetAutoWhiteBalance(System.Boolean)">
            <summary>
            This method enables or disables the sensor's auto exposure setting.
            </summary>
            <param name="bAutoWhiteBalanceEnabled">The bool indicating if the setting is enabled or disabled.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetAutoWhiteBalance">
            <summary>
            Gets the current value for auto white balance.
            </summary>
            <returns>Returns true if this is enabled, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetWhiteBalance(System.Int32)">
            <summary>
            Sets the white balance.
            </summary>
            <remarks>This property only works when AutoWhiteBalance is disabled.</remarks>
            <param name="whiteBalance">The desired white balance.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetWhiteBalance">
            <summary>
            Gets the current white balance setting.
            </summary>
            <remarks>If AutoWhiteBalance is true, this will only return the last known value.</remarks>
            <returns>The current value of the white balance setting.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinWhiteBalance">
            <summary>
            Gets the minimum acceptable value for white balance.
            </summary>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxWhiteBalance">
            <summary>
            Gets the maximum acceptable value for white balance.
            </summary>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetContrast(System.Double)">
            <summary>
            Sets the desired contrast.
            </summary>
            <param name="contrast">The desired contrast.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetContrast">
            <summary>
            Gets the current contrast.
            </summary>
            <returns>The current contrast.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinContrast">
            <summary>
            Gets the minimum contrast.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxContrast">
            <summary>
            Gets the maximum contrast.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetHue(System.Double)">
            <summary>
            Sets the desired hue.
            </summary>
            <param name="hue">The desired hue.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetHue">
            <summary>
            Gets the current hue.
            </summary>
            <returns>The current hue.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinHue">
            <summary>
            Gets the minimum hue.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxHue">
            <summary>
            Gets the maximum hue.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetSaturation(System.Double)">
            <summary>
            Sets the desired saturation.
            </summary>
            <param name="saturation">The desired saturation.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetSaturation">
            <summary>
            Gets the current saturation.
            </summary>
            <returns>The current saturation.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinSaturation">
            <summary>
            Gets the minimum saturation.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxSaturation">
            <summary>
            Gets the maximum saturation.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetGamma(System.Double)">
            <summary>
            Sets the desired gamma.
            </summary>
            <param name="gamma">The desired gamma.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetGamma">
            <summary>
            Gets the current gamma.
            </summary>
            <returns>The current gamma.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinGamma">
            <summary>
            Gets the minimum gamma.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxGamma">
            <summary>
            Gets the maximum gamma.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetSharpness(System.Double)">
            <summary>
            Sets the desired sharpness.
            </summary>
            <param name="sharpness">The desired sharpness.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetSharpness">
            <summary>
            Gets the current sharpness.
            </summary>
            <returns>The current sharpness.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinSharpness">
            <summary>
            Gets the minimum sharpness.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxSharpness">
            <summary>
            Gets the maximum sharpness.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetAutoExposure(System.Boolean)">
            <summary>
            This method enables or disables the sensor's auto exposure setting.
            </summary>
            <param name="bAutoExposureEnabled">The bool indicating if the setting is enabled or disabled.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetAutoExposure">
            <summary>
            Gets the current value for auto exposure.
            </summary>
            <returns>Returns true if enabled, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetExposureTime(System.Double)">
            <summary>
            Sets the desired exposure time.
            </summary>
            <param name="exposureTime">The desired exposure time.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetExposureTime">
            <summary>
            Gets the current exposure time.
            </summary>
            <returns>The current exposure time.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinExposureTime">
            <summary>
            Gets the minimum exposure time.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxExposureTime">
            <summary>
            Gets the maximum exposure time.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetFrameInterval(System.Double)">
            <summary>
            Sets the desired frame interval.
            </summary>
            <param name="frameInterval">The desired frame interval.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetFrameInterval">
            <summary>
            Gets the current frame interval.
            </summary>
            <returns>The current frame interval.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinFrameInterval">
            <summary>
            Gets the minimum frame interval.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxFrameInterval">
            <summary>
            Gets the maximum frame interval.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetBrightness(System.Double)">
            <summary>
            Sets the desired brightness.
            </summary>
            <param name="brightness">The desired brightness..</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetBrightness">
            <summary>
            Gets the current brightness.
            </summary>
            <returns>The current brightness.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinBrightness">
            <summary>
            Gets the minimum brightness.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxBrightness">
            <summary>
            Gets the maximum brightness.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetPowerLineFrequency(Microsoft.Kinect.Interop._NUI_POWER_LINE_FREQUENCY)">
            <summary>
            Sets the desired power line frequency.
            </summary>
            <param name="powerLineFrequency">The desired frequency.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetPowerLineFrequency">
            <summary>
            Gets the current power line frequency.
            </summary>
            <returns>The current frequency.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetBacklightCompensationMode(Microsoft.Kinect.Interop._NUI_BACKLIGHT_COMPENSATION_MODE)">
            <summary>
            Sets the desired backlight compensation mode.
            </summary>
            <param name="backlightCompensationMode">The desired mode.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetBacklightCompensationMode">
            <summary>
            Gets the current backlight compensation mode.
            </summary>
            <returns>The current mode.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.SetGain(System.Double)">
            <summary>
            Sets the desired gain.
            </summary>
            <param name="gain">The desired gain.</param>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetGain">
            <summary>
            Gets the current gain.
            </summary>
            <returns>The current gain.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMinGain">
            <summary>
            Gets the minimum gain.
            </summary>
            <returns>The minimum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.GetMaxGain">
            <summary>
            Gets the maximum gain.
            </summary>
            <returns>The maximum.</returns>
        </member>
        <member name="M:Microsoft.Kinect.NuiColorCameraSettings.ResetCameraSettingsToDefault">
            <summary>
            This resets the color camera settings to their defaults.
            </summary>
        </member>
        <member name="T:Microsoft.Kinect.KinectExceptionHelper">
            <summary>
            Translates HRESULTs from native NUI API's and COM interfaces to managed exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectExceptionHelper.E_NUI_HARDWARE_FEATURE_UNAVAILABLE">
            <summary>
            The sensor does not support the requested feature (e.g. near mode).
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectExceptionHelper.E_NUI_NOTGENUINE">
            <summary>
            The given sensor is not a genuine Kinect&#x2122; sensor.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectExceptionHelper.E_NUI_NOTSUPPORTED">
            <summary>
            The given sensor is not a supported Kinect&#x2122; sensor.  Probably an XBox Kinect&#x2122; on a non-developer machine.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectExceptionHelper.E_NUI_BADINDEX">
            <summary>
            Invalid index sent to NuiCreateSensorByIndex or NuiCreateSensorById.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectExceptionHelper.E_WIN32_ERROR_REQUEST_ABORTED">
            <summary>
            A Win32 API returned ERROR_REQUEST_ABORTED.
            </summary>
        </member>
        <member name="F:Microsoft.Kinect.KinectExceptionHelper.E_NUI_DEVICE_IN_USE">
            <summary>
            This means that the per-device mutex has already been created in NuiInitialize, and therefore
            we conclude that the device is already in use.
            </summary>
        </member>
        <member name="M:Microsoft.Kinect.KinectExceptionHelper.CheckHr(System.Int32)">
            <summary>
            Throws a managed exception for the given native HRESULT from the NUI API.
            </summary>
            <param name="hr">Native HRESULT returned from API.</param>
        </member>
    </members>
</doc>
